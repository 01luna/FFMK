\ PIC18 disassembler
-see
marker -see

flash create symfc
[ $fc00 , #21 ,                       ]
[ %0010.0100.0000.0000 , ," addwf"    ]
[ %0010.0000.0000.0000 , ," addwfc"   ]
[ %0001.0100.0000.0000 , ," andwf"    ]
[ %0001.1100.0000.0000 , ," comf"     ]
[ %0000.0100.0000.0000 , ," decf"     ]
[ %0010.1100.0000.0000 , ," decfsz"   ]
[ %0100.1100.0000.0000 , ," dcfsnz"   ]
[ %0010.1000.0000.0000 , ," incf"     ]
[ %0011.1100.0000.0000 , ," incfsz"   ]
[ %0100.1000.0000.0000 , ," infsnz"   ]
[ %0001.0000.0000.0000 , ," iorwf"    ]
[ %0101.0000.0000.0000 , ," movf"     ]
[ %0011.0100.0000.0000 , ," rlcf"     ]
[ %0100.0100.0000.0000 , ," rlncf"    ]
[ %0011.0000.0000.0000 , ," rrcf"     ]
[ %0100.0000.0000.0000 , ," rrncf"    ]
[ %0101.0100.0000.0000 , ," subfwb"   ]
[ %0101.1100.0000.0000 , ," subwf"    ]
[ %0101.1000.0000.0000 , ," subwfb"   ]
[ %0011.1000.0000.0000 , ," swapf"    ]
[ %0001.1000.0000.0000 , ," xorwf"

flash create symfe
[ $fe00 , #9 ,                        ]
[ %0110.1010.0000.0000 , ," clrf"     ]
[ %0110.0010.0000.0000 , ," cpfseq"   ]
[ %0110.0100.0000.0000 , ," cpfsgt"   ]
[ %0110.0000.0000.0000 , ," cpfslt"   ]
[ %0110.1110.0000.0000 , ," movwf"    ]
[ %0110.0010.0000.0000 , ," mulwf"    ]
[ %0110.1100.0000.0000 , ," negf"     ]
[ %0110.1000.0000.0000 , ," setf"     ]
[ %0110.0110.0000.0000 , ," tstfsz"

flash create symf0
[ $f000 , #6 ,                        ]
[ %1100.0000.0000.0000 , ," movff"    ]
[ %1001.0000.0000.0000 , ," bcf"      ]
[ %1000.0000.0000.0000 , ," bsf"      ]
[ %1011.0000.0000.0000 , ," btfsc"    ]
[ %1010.0000.0000.0000 , ," btfss"    ]
[ %0111.0000.0000.0000 , ," btg"

flash create braff
[ $ff00 , #8 ,                        ]
[ %1110.0010.0000.0000 , ," bc"       ]
[ %1110.0110.0000.0000 , ," bn"       ]
[ %1110.0011.0000.0000 , ," bnc"      ]
[ %1110.0111.0000.0000 , ," bnn"      ]
[ %1110.0101.0000.0000 , ," bnov"     ]
[ %1110.0001.0000.0000 , ," bnz"      ]
[ %1110.0100.0000.0000 , ," bov"      ]
[ %1110.0000.0000.0000 , ," bz"

flash create litff
[ $ff00 , #9 ,                         ]
[ %0000.1111.0000.0000 , ," addlw"     ]
[ %0000.1011.0000.0000 , ," andlw"     ]
[ %0000.1001.0000.0000 , ," iorlw"     ]
[ %0000.1110.0000.0000 , ," movlw"     ]
[ %0000.1101.0000.0000 , ," mullw"     ]
[ %0000.1100.0000.0000 , ," retlw"     ]
[ %0000.1000.0000.0000 , ," sublw"     ]
[ %0000.0001.0000.0000 , ," movlb"     ]
[ %0000.1010.0000.0000 , ," xorlw"

flash create opcffff
[ $ffff , #5 ,                         ]
[ %0000.0000.0000.0100 , ," clrwdt"    ]
[ %0000.0000.0000.0110 , ," pop"       ]
[ %0000.0000.0000.0101 , ," push"      ]
[ %0000.0000.0001.0010 , ," return"    ]
[ %0000.0000.0000.0011 , ," sleep"

flash create braf8
[ $f800 , #2 ,                         ]
[ %1101.1000.0000.0000 , ," rcall"     ]
[ %1101.0000.0000.0000 , ," bra"

flash create braffff
[ $ff00 , #2 ,                         ]
[ %1110.1100.0000.0000 , ," call"      ]
[ %1110.1111.0000.0000 , ," goto"

flash create regs
[ $d9 c, ," rpl" ]
[ $da c, ," rph" ]
[ $db c, ," (rp+w)" ]
[ $dc c, ," (+rp)" ]
[ $dd c, ," (rp-)" ]
[ $de c, ," (rp+)" ]
[ $df c, ," (rp)" ]
[ $e1 c, ," tpl" ]
[ $e2 c, ," tph" ]
[ $e3 c, ," (tp+w)" ]
[ $e4 c, ," (+tp)" ]
[ $e5 c, ," (tp-)" ]
[ $e6 c, ," (tp+)" ]
[ $e7 c, ," (tp)"  ]
[ $e9 c, ," spl" ]
[ $ea c, ," sph" ]
[ $eb c, ," (sp+w)" ]
[ $ec c, ," (+sp)" ]
[ $ed c, ," (sp-)" ]
[ $ee c, ," (sp+)" ]
[ $ef c, ," (sp)" ]
[ $f9 c, ," pcl" ]
[ $fa c, ," pclath" ]
[ $fd c, ," tosl" ]
[ $fe c, ," tosh" 0 ,

ram 0 value sym.cnt
: to.dc to sym.cnt ;

: *@ dup @ ;
: .str c@+ type space ;
: nxt c@+ + aligned ;
: dist ( a symtab -- a' flag) 
  over @ !p>r
  @+ >r @+ to.dc
  begin
    @+ sym.cnt  
  while
    r@ and dup @p r@ and <>
  while
    drop nxt sym.cnt 1- to.dc 
  repeat
  then 
  @p r@ and  = 
  if   .str
  else drop
  then sym.cnt rdrop r>p
;
: u.2 $ff and 2 u.r ;
: u.4 4 u.r ;
: dis.a ( opc -- ) $0100 and if [char] b else [char] a then emit ;
: dis.d ( opc -- ) $0200 and if [char] f else [char] w then emit space ;
: dis.b ( opc -- ) $0e00 and 9 rshift u. ;

: dis.r ( opc -- opc ) 
  >r regs
  begin
    c@+ dup
  while
    r@ $1ff and <>
  while
    nxt
  repeat
    .str true
  then
  0= if drop r@ u.2
  then r>
;

: disfc ( a -- a' )
  symfc dist if *@ dis.r dup dis.d dis.a then ;
: disfe ( a -- a' flag )
  symfe dist dup >r if @+ dis.r dis.a then r> ;
: dis.0 $fff and dup $f5f > if $ff and dis.r drop else u.4 then ;
: disbit
  symf0 dist 
  if   sym.cnt 6 = 
       if   @+ dis.0 *@ dis.0
       else *@ dup u.2 dup dis.b dis.a
       then
  then ;
 
: disco
  braff dist 
  if *@ $ff and dup 80 and
     if   $ff00 or
     then 2* over + 2+ u.4
  then ;

: dislit litff dist if *@ u.2 then ;

: disend ( n -- ) sym.cnt = if cr abort then ;

: disffff opcffff dist drop 2 disend ;

: .(s ['] (s" = if   space 2+ c@+ 2dup type + aligned then ;

: disbra
  braf8 dist 
  if   *@ $7ff and dup $400 and
       if   $f800 or 
       then 2* over + 2+ 
       sym.cnt 2 = 
       if   dup c>n .id .(s
       else u.4
       then 
  then ;

: disgoto
  braffff dist
  if @+ $ff and over @ 8 lshift or 2* dup c>n .id
     sym.cnt 2 = 
     if   .(s  
     else drop
     then
  then 1 disend ;

: ?again dup postpone until ; immediate

: see
  hex '
  begin
    cr dup u.4 dup @ u.4
    disfe 0= ?again
    disfc
    disbit
    disco
    dislit
    disbra
    disgoto
    disffff
    2+
 again ;
