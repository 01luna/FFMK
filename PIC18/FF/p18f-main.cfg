;**********************************************************************
;                                                                     *
;    Filename:      p18f-main.cfg                                     *
;    Date:          24.09.2011                                        *
;    FF Version:    3.8                                               *
;    Copyright:     Mikael Nordman                                    *
;    Author:        Mikael Nordman                                    *
;                                                                     * 
;    Modified:                                                        *
;**********************************************************************
;    FlashForth is licensed acording to the GNU General Public License*
;**********************************************************************
;;; FlashForth processor main configuration file

#define CONFIG_RESET     0x0000  ; No bootloader, application start at 0x0000
                                 ; Link with FF_0000.lkr or FF_USB_0000.lkr
;#define CONFIG_RESET     0x0800  ; Bootloader, application start at 0x0800
                                 ; Link with FF_0800.lkr or FF_USB_0800.lkr

;;;  Specify the cpu clock frequency here
;;;  It must be aligned with the processor specific configuration bits 
;;;  In case of bootloader, it is the boot loader configuration that
;;;  determines the clock frequency.

 constant clock=d'48000000'  ; Hz

;;; Specify RS-232 the baud rate for UART1 (TX1, RX1)
 constant baud=d'38400'

;;; The default number base
#define DEFAULT_BASE d'16'

;;; Define which words you want to leave out from the core dictionary
;;; #define SKIP_DUMP
;;; #define SKIP_MULTITASKING

;;; Define SAFE_CHECK1 to enable writechecks
;;; on system variables below h'f060'
; #define SAFE_CHECK1


;;; Define which timer is stepping TICKS and MS. Only one can be uncommented.
;;; #define MS_TMR1
;;; #define MS_TMR2
#define MS_TMR3

;;; Allow warm reset by ctrl-O
#define CTRL_O_WARM_RESET

;;; Put CPU in idle mode when all tasks are idle
;;; Saves power CPUs that support IDLE mode.
;;; TX1_BUF_SIZE should be 4 or larger for good realtime performance
#define IDLE_MODE

;;; Measure CPU load, uses TIMER0. Needs IDLE_MODE
#define CPU_LOAD

;;; CPU load indicator led definitions
#define CPU_LOAD_LED 1          ; Set to 0 to disable
#define CPU_LOAD_TRIS TRISC
#define CPU_LOAD_PORT LATC
#define CPU_LOAD_BIT 0
#define CPU_LOAD_LED_POLARITY 1 ; 0 = low on port turns on led, 1 = high on port turns on led

;;; Define the starup delay for turnkey words. Milliseconds
#define TURNKEY_DELAY_USB d'8000'
#define TURNKEY_DELAY_UART d'2000'

;;; Define if 8-bit characters should be sent by TX1
;;; Use with HW flow control and without ctrl-O reset for 
;;; full binary character set.
;#define USE_8BIT_ASCII

;;; UART buffer sizes. Must be a power of 2. max size 128 bytes.
;;; A buffer must be on one 256 byte ram page
;;; With the default linker files the maximum RX1_BUF_SIZE is d'64'
;;; With the default linker files the maximum TX1_BUF_SIZE is d'32'

;;; Larger TX buffer size can give better real time performance
;;; for applications that can do other things during UART transmission.
  constant TX1_BUF_SIZE = d'4' ; 0 = unbuffered TX1
  
;;; Larger RX buffer size may be needed for high latency flow control
 constant RX1_BUF_SIZE = d'16'
 
;;; Define the RX1 buffer fill level for XOFF or
;;; Define the RX1 buffer fill level for CTS off
;;; Smaller fill levels for RX1_OFF_FILL may be needed for high latency flow control
 constant RX1_OFF_FILL = (RX1_BUF_SIZE - d'12')

;;; Flow control defintions ********************************

;;; Use SW flow control XON/XOFF as default
;;; Uncomment to use HW flow control
;#define FC_TYPE_HW

#ifdef FC_TYPE_HW
; Clear To Send to the computer, DB9 PIN 8
#define HW_FC_CTS_PORT LATC
#define HW_FC_CTS_TRIS TRISC
#define HW_FC_CTS_PIN  0

;;; Define if also RTS flow control should be included
;;; RTS lets the terminal control if FF is allowed to transmit data
; #define HW_FC_RTS ; Comment out to leave out RTS

; Request To Send from the computer, DB9 PIN 7.
#ifdef HW_FC_RTS
#define HW_FC_RTS_PORT PORTC
#define HW_FC_RTS_TRIS TRISC
#define HW_FC_RTS_PIN  1
#endif  ; HW_FC_RTS
#else
#define FC_TYPE_SW
#endif

; If you nest PAUSE deeper, the return stack size save area must be increased
; Max size is d'62'
#define RETURN_STACK_SAVE_SIZE d'30'    ; 15 cells return stack save area
#define PARAMETER_STACK_SIZE d'64'      ; 32 cells parameter stack
#define TIB_SIZE d'74'                  ; 74 chars tib size
#define HOLD_SIZE d'10'                 ; 10 chars hold area

;;; Storage space for OPERATOR uservariables 2 and upwards
;;; EXAMPLE: 8 user myUserVar  -> define UADDSIZE 8
#define UADDSIZE d'0'


;;; Calculate the baud rate control value
        constant spbrgval = ((clock/baud)/d'16') - 1

;;; Constant for the MS word.
        constant   tmr2prescaler = d'4'
        constant   tmr2postscaler = d'16'
        constant   tmr2ms_val=(clock/d'4000'/tmr2prescaler/tmr2postscaler) 

        constant   tmr1prescaler = d'1'
        constant   tmr1ms_val_lo=(0 - clock/d'4000'/tmr1prescaler)&h'ff' 
        constant   tmr1ms_val_hi=((0 - clock/d'4000'/tmr1prescaler)>>8)&h'ff'

;;; Calculate the program memory write delay
        constant clock_MHZ = clock / d'1000000'
        constant write_delay = (clock_MHZ / d'4') + 1  

