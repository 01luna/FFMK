Dictionary of FlashForth 4.8 on dsPIC 30, 33 and PIC 24

!          ( x addr -- )
           Store x to addr

!p         ( addr -- )
           Store addr to p(ointer) register

!p>r       ( addr -- )
           Push contents of p to return stack and stor addr to p

#          ( u1 -- u2 )
           Convert 1 digit to formatted numeric string

#>         ( u1 -- c-addr u )
           Leave address and count of formatted numeric string

#s         ( u1 -- u2 )
           Convert remaining digits to formatted numeric output

'          ( -- xt )
           Parse word and find it in dictionary

'source    ( -- a-addr )     User Variable 
           Current input source

(          ( -- )
           Skip input on the same line until ) is encountered

*          (u1/n1 u2/n2 -- u3/n3
           Signed and unsigned 16*16->16 bit multiplikation

*/         ( n1 n2 n3 -- quotient )
           Multiply n1 and n2 and divide with n3. 32 bit intermediate result.

*/mod      ( n1 n2 n3 -- remainder quotient )
           Multiply n1 and n2 and divide with n3. 32 bit intermediate result

+          ( n1 n2 -- n3 )
           Add n1 to n2

+!         ( n addr -- )
           Add n to cell at addr.

,          ( x -- )
           Append x to the current data section

-          ( n1 n2 -- n3 )
           Subtract n2 from n1

.          ( n -- )
           Display n signed according to base

.s         ( -- )
           Display the stack contents

.st        ( -- )
           Emit status string for base, current data section,
           and display the stack contents.

/          ( n1 n2 -- n3 )
           16/16->16 bit division

/string    ( addr u n -- addr+n u-n )
           Trim string

0<         ( n -- flag )
           Leave true flag if n is less than zero

0=         ( x -- flag )
           Leave true flag if x is zero

1          ( -- 1 ) 
           Leave one

1+         ( n -- n1 )
           Add one to n

1-         ( n -- n1 )
           Subtract 1 from n

2*         ( u1 -- u2 )
           Shift u1 left one bit

2+         ( n -- n1 )
           Add two to n

2-         ( n -- n1 )
           Subtract 2 from n

2/         (n1 -- n2 )
           Shift n1 right one bit.

2@         ( a-addr -- x1 x2 )
           Fetch two cells

2!         ( x1 x2 a-addr -- )
           Store two cells

2drop      ( x1 x2 -- )
           Drop two cells

2dup       ( x1 x2  -- x1 x2 x1 x2 )
           Duplicate two top cells

:          ( "name" -- )
           Begin a colon definition

:noname    ( -- addr )
           Define headerless forth code

;          ( -- )
           End a colon definition

;i         ( -- )
           End a interrupt word

<          ( n1 n2 -- flag )
           Leave true flag if n1 is less than n2

<#         ( -- )
           Begin numeric conversion

<>         ( x1 x2 -- x3 )
           Leave 0 (false) flag if x1 and x2 are equal
           Same as XOR.

=          ( x1 x2 -- flag )
           Leave true flag if x1 and x2 are equal

>          ( n1 n2 -- flag )
           Leave trye flag if n1 is grater than n2

>body      ( xt -- a-addr )
           Leave the parameter field address of 
           a created word

>cq        ( c queue-addr -- )
           Put a character to a queue

>cq?       ( queue-addr -- flag )
           Leave false flag if queue is full

>digit     ( n -- c )
           Convert n to ascii character value

>in        ( -- a-addr )      User Variable
           Holds offset into tib

>number    ( n1 addr1 u1 -- n2 addr2 u2 )
           Convert string to number

>pr        ( c -- c' )
           Convert a character to a graphic ASCII value.
           Non-graphic characters are converted to a dot.

>r         ( x -- ) ( R: -- x )
           Push x from the parameter stack to the return stack

?abort     ( flag c-addr u -- )
           Print message and abort if flag is true

?abort?    ( flag -- )
           If flag is true output ? and abort

?negate    ( n1 n2 -- n3 )
           Negate n1 if n2 is negative

@          ( addr -- x )
           Fetch x from addr

@+         ( addr1 -- addr2 x )
           Fetch cell from addr1 and increment addr1 by a cell

@p         ( -- addr )
           Fetch the p register to the stack

@ex        ( addr -- )
           Fetch vector from addr and execute.

[          ( -- )
           Enter interpreter state

[']        ( "name" -- )
           Compile xt of name as a literal

[char]     ( "char" -- )
           Compile inline ascii character

[i         ( -- )
           Enter the interrupt context
           Save w0,w1,w2,w3 hibyte, TBLPAG, increment SP

\          ( -- )
           Skip rest of line

]          ( -- )
           Enter compilation state

abort      ( -- )
           Reset stack pointer and execute quit

abort"     ( "string" -- )
           Compile inline string and postpone abort?

abs        ( n -- n1 )
           Leave absolute value of n

accept     ( c-addr +n -- +n' )
           Get line from terminal

again      ( addr -- )
           begin ... again

aivt       ( -- )
           Use the alternate interrupt vector table

align      ( -- )
           Align the current data section dictionary pointer
           to cell boundary

aligned    ( addr -- a-addr )
           Align addr to a cell boundary.

allot      ( n -- )
           Adjust the current data section dictionary pointer

and        ( x1 x2 -- x3 )
           Bitwise and of x1 and x2

base       ( a-addr )     User Variable
           Numeric conversion base

begin      ( -- a-addr )
           begin ... again
           begin ... until
           begin ... while ... repeat

bin        ( -- )
           Set base to binary

bl         ( -- c )
           Ascii space

blanks     ( c-addr u -- )
           Fill u bytes with BL staring at c-addr

bclr       ( ram-addr bitno -- )
           Clear bit in bitarray.
           Ram-addr must be cell aligned. Bitno 0-65535

bset       ( ram-addr bitno -- )
           Set bit in bitarray.
           Ram-addr must be cell aligned. Bitno 0-65535

btst       ( ram-addr bitno -- flag )
           Test bit in bitarray.
           Ram-addr must be cell aligned. Bitno 0-65535

c!         ( c addr -- )
           Store c to addr

c@         ( addr -- c )
           Fetch c from addr

c@+        ( addr1 -- addr2 c )
           Fetch char from addr1 and increment addr1

c,         ( c -- )
           Append c to the current data section

cell       ( -- n )
           Leave the size of one cell in characters.

cell+      ( addr1 -- addr2 )
           Add cell size to addr1

cells      ( x1 -- x2 )
           Convert cells to address units.

char       ( "char" -- n )
           Parse a char and leave ascii value on stack

char+      ( c-addr1 -- c-addr2 )
           Add one to c.addr1

chars      ( x1 -- x2 )
           Convert characters to address units

cf!        ( low high addr -- )
           Store 24 bits to flash

cf@        ( addr -- low high )
           Fetch 24 bits from flash

cf,        ( xt -- )
           Compile xt into the flash dictionary.

c>n        ( addr1 -- addr2 )
           Convert cfa to nfa

cmove      ( addr1 addr2 u -- )
           Move u chars from addr1 to addr2

cold       ( -- )
           Make a cold start. Reset all dictionary pointers.

con        ( x "name" -- )
           Create a constant in rom as inline code

constant   ( x "name" -- )
           Create an constant in rom with docreate as runtime

cq>        ( queue-addr -- c )
           Get a character from queue.

cq>?       ( queue-addr -- n )
           Get the amount of characters in the queue.

cq:        ( size "name" -- )
           Create a character queue

cq0        ( queue-addr -- )
           Initalise the queue.

cr         ( -- )
           Emit CR LF

create     ( "name" -- )
           Create a word definition and store the current
           data section pointer.

cwd        ( -- )
           Clear the WatchDog counter.

decimal    ( -- )
           Set numeric base to decimal 10.

defer      ( "name -- )
           Define a deferred execution vector

di         ( -- )
           Disable interrupts

digit?     ( c -- n flag )
           Convert char to a digit according to base

does>      ( -- )
           Define the runtime action of a created word.

dp         ( -- addr )       Eeprom variable mirrored in ram
           Leave the address of the current data section
           dictionary pointer

drop       ( x1 -- )
           Drop top of stack

dump       ( addr u -- )
           Display a memory dump 

dup        ( x -- x x )
           Duplicate top of stack

ei         ( -- )
           Enable interrupts

end        ( task-addr -- )
           Remove a task from the task list.

eeprom     ( -- )
           Set data section context to eeprom

else       ( addr1 -- addr2 )
           if ... else ... then

emit       ( c -- )
           Emit c to the serial port FIFO. Executes pause.
           Deferred user word is TX1.

emit?      ( -- flag )
           Leave false flag if queue is full.
           Deferred user word is TX1?

erase      ( c-addr u -- )
           Fill u bytes with 0 staring at c-addr


evaluate   ( c-addr n -- )
           Evaluate buffer

execute    ( addr -- )
           Execute word at addr

exit       ( -- )
           Exit from a word.

false      ( -- 0 )

Fcy        ( -- u )
           Leave the CPU MIPS and peripheral clock in KHz

flash      ( -- )
           Set data section context to flash

fill       ( c-addr u c -- )
           Fill u bytes with c staring at c-addr

find       ( c-addr -- c-addr 0/1/-1 )
           Find a word in dictionary
           Leave 1 if immediate, -1 if normal, 0 if not found

for        ( u -- )
           Loop u times. for ... next

forget     ( "name -- )
           Forget name

ha         ( -- addr )
           Hold Area. Same as end of TIB.

here       ( -- addr )
           Leave the current data section dictionary pointer

hex        ( -- )
           Set numeric base to hexadecimal

hold       ( c -- )
           Append char to formatted numeric string

hp         ( -- a-addr )            User Variable
           Hold pointer for formatted numeric output

i]         ( -- )
           Exit the interrupt context
           Restore w0,w1,w2,w3 hibyte, TBLPAG, decrement SP

i,         ( x -- )
           Append x to the flash data section.

if         ( -- a-addr ) 
           if ... else ... then

iflush     ( -- )
           Flush the flash write buffer

immed?     ( addr -- n )
           Leave a nonzero value if addr contains a immediate flag

immediate  ( -- )
           Mark latest definition as immediate

in?        ( nfa -- flag )
           Leave a nonzero value if nfa has the inline bit set

inline     ( "name" -- )
           Inline the following word.

inlined    ( -- )
           Mark the latest compiled word as inlined.

interpret  ( c-addr u - )
           Interpret the buffer

invert     ( x1 -- x2 )
           Ones complement of x1

int!       ( xt vector-no -- )
           Store an interrupt vector to the alternate
           interrupt vector table.
           In flash on dsPIC30.
           In ram on the 24 and 33 series. 

is         ( x "name" -- )
           Set the value a deferred word

ivt        ( -- )
           Use the normal interrupt vector table

key        ( -- c )
           Get a character from the serial port FIFO.
           Execute pause until a character is available
           Deferred user word is RX1.

key?       ( -- n )
           Leave the amount of characters in the input queue
           Deferred user word is RX1?

latest     ( -- a-addr )
           Variable holding the address of the latest defined word

leave      ( -- )             COMPILE ONLY
           Leave a for/next loop when next is encountered.
           Sets top of return stack to zero

literal    ( x -- )
           Compile a literal into the dictionary

lshift     ( x1 u -- x2
           Shift x1 u bits to the left

m+         ( d1 n -- d2 )
           Add double number d1 to n

marker     ( "name" -- )
           Mark a dictionary state

max        ( n1 n2 -- n3 )
           Leave max of n1 and n2

mclr       ( mask ram-addr -- )
           AND the contents of caddr with the complement of mask

min        ( n1 n2 -- n3 )
           Leave min of n1 and n2

mod        ( n1 n2 -- remainder )
           Divide n1 with n2 and leave the remainder.

ms         ( +n -- )
           Pause for +n milliseconds

mset       ( mask ram-caddr -- )
           OR the contents of caddr with mask.

mtst       ( mask addr -- x )
           AND the contents of caddr with mask

n=         ( c-addr nfa u -- flag )
           Compare strings. Flag is true if strings match. u<16.

n>c        ( nfa --  cfa )
           Convert nfa to cfa

2-         ( nfa -- lfa )
           Convert nfa to lfa
negate     ( n -- -n )
           negate n

next       ( bra-addr bc-addr -- )
           for ... next


nip        ( x1 x2 -- x2 )
           Remove x1 from the stack

number?    ( c-addr -- n/c-addr flag )
           Convert string to number
           # is decimal prefix
           $ is hexadecimal prefix
           % is binary prefix

operator   ( -- addr )
           Leave the address of the operator task

or         ( x1 x2 -- x3 )
           Or bitwise x1 with x2

over       ( x1 x2 -- x1 x2 x1 )
           Copy x1 to top of stack

p+         ( -- )
           Increment p register by one

p2+        ( -- )
           Increment p register by two

p++        ( n -- )
           Add n to the p register

p!         ( x -- )
           Store x to the location pointed by the p register

pc!        ( c -- )
           Store c to the location pointed by the p register

p@         ( -- x )
           Fetch the cell pointed by the p register

pc@        ( -- c )
           Fetch the char pointed by the p register

pad        ( -- addr )
           Pad is ram here

pause      ( -- )
           Switch task

place      ( addr1 u addr2 -- )
           Place string from addr1 to addr2 as a counted string

postpone   ( "name" -- )
           Postpone action of immediate word

prompt     ( -- )                  Eeprom defer
           Deferred execution vector for the info displayed by quit.
           Default is .ST .

quit       ( -- )
           Interpret from keyboard

r0         ( -- a-addr )
           User variable for start of return stack

r>         ( -- x ) ( R: x -- )
           Pop x from the return stack to the parameter stack

r>p        ( -- )
           Pop from return stack to p register

r@         ( -- x ) ( R: x -- x )
           Copy x from the return stack to the parameter stack

rp@        ( -- x )
           Fetch the stack pointer. Points to a free cell.

ram        ( -- )
           Set data section context to ram

rdrop      ( -- )
           Remove top element from return stack

repeat     ( addr2 addr1 -- )
           begin ... while ... repeat

rhere      ( -- addr )
           Start of free ram

rot        ( x1 x2 x3 -- x2 x3 x1 )
           Rotate three top stack items

rsave      ( -- a-addr )  User variable
           Return stack save area

rshift     ( x1 u -- x2 )
           Shift x1 u bits to the right

run        ( task-addr -- )
           Link the task to the task list. The task
           starts running immediately.

rx1        ( -- c )
           Get a character from U1RXQ.
           Block and execute PAUSE if U1RXQ is empty.

rx1?       ( -- n )
           Get the amount of characters in U1RXQ.
           Emit XON of the queue is empty.

rx2        ( -- c )
           Get a character from U2RXQ.
           Block and execute PAUSE if U2RXQ is empty.

rx2?       ( -- n )
           Get the amount of characters in U2RXQ.
           Emit XON of the queue is empty.

s0         ( -- a-addr )
           User variable for start of parameter stack


scan       ( c-addr u c -- c-addr' u'
           Scan string until c is found.

sign       ( n -- )
           Append minus sign to formatted numeric output

sign?      ( addr1 n1 -- addr2 n2 flag )
           Get optional minus sign

single     ( -- )
           End all tasks except the operator task.
           Removes all tasks from the task list
           except the operator task.

skip       ( c-addr u c -- c-addr' u' )
           Skip string until c not encountered.

sp@        ( -- addr )
           Leave parameter stack pointer

sp!        ( addr -- )
           Set the parameter stack pointer to addr

s"         ( "text" -- )
           Compile string into flash

."         ( "text" -- )
           Compile string to print into flash

source     ( -- c-addr n )
           Current input buffer

space      ( -- )
           Emit one space character

spaces     ( n -- )
           Emit n space characters

ssave      ( -- a-addr )        User Variable
           Saved return stack pointer

state      ( -- flag )
           Compilation state: Read only value.

swap       ( x1 x2 -- x2 x1 )
           Swap two top stack items

task       ( -- addr )           User variable
           Pointer to the task definition.

task:      ( tibsize stacksize rstacksize addsize -- )
           Define a task

tasks      ( -- )
           List all running tasks

tinit      ( taskloop-addr task-addr -- )
           Initialise the user area and link it to a task loop

then       ( addr -- )
           if ... else ... then

tib        ( -- addr )
           Terminal input buffer address

tiu        ( -- addr )           User variable
           Terminal input buffer pointer

ti#        ( -- n )
           Size of terminal input buffer

ticks      ( -- u )
           System ticks. Read only value.

to         ( x "name" -- )
           Store x into value "name".

true       ( -- -1 )

tuck       ( x1 x2 -- x2 x1 x2 )
           Insert x2 below x1 in the stack

turnkey    ( -- a-addr )          Eeprom value mirrored in ram
           Vector for user startup word

tx1        ( c -- )
           Put a character to U1TXQ.
           Block and execute PAUSE if U1TXQ is full.

tx1?       ( -- flag )
           Leave false flag if U1TXQ is full.

tx2        ( c -- )
           Put a character to U2TXQ.
           Block and execute PAUSE if U2TXQ is full.

tx2?       ( -- flag )
           Leave false flag if U2TXQ is full.

type       ( c-addr u -- )
           Type line to terminal. u < $100

u*/mod     ( u1 u2 u3 -- u4(remainder) u5(quotient) )
           Unsigned u1*u2/u3 with 32 bit intermediate result

u.         ( u -- )
           Display u unsigned according to numeric base

u.r        ( u +n -- )
           Display u in field of width n. 0<n<256

u/         ( u1 u2 -- u3 )
           Unsigned 16/16->16 bit division

u/mod      ( u1 u2 -- u3(remainder) u4(quotient)
           Unsigned 16/16->16 bit division

u<         ( u1 u2 -- flag )
           Leave true flag if u1 is less than u2

u>         ( u1 u2 -- flag )
           Leave true flag if u1 is greater than u2

u1+        ( -- )
           Turn on flow control for UART1

u1-        ( -- )
           Turn off flow control for UART1

u1rxq      ( -- queue-addr )
           Leave the address of the queue for UART1

u1txq      ( -- queue-addr )
           Leave the address of the queue for UART1

u2rxq      ( -- queue-addr )
           Leave the address of the queue for UART2

u2+        ( -- )
           Turn on flow control for UART2

u2-        ( -- )
           Turn off flow control for UART2

u2txq      ( -- queue-addr )
           Leave the address of the queue for UART2

ulink      ( -- a-addr)
           Link to next task

um*        ( u1 u2 -- ud )
           Unsigned 16x16 -> 32 bit multiply

um/mod     ( ud u1 -- u2(remainder) u3(quotient)
           unsigned 32/16 -> 16 bit division

umax       ( u1 u2 -- u )
           Leave the unsigned larger of u1 and u2.

umin       ( u1 u2 -- u )
           Leave the unsigned smaller of u1 and u2.

until      ( flag -- )
           begin..until

up         ( -- a-addr )
           Variable holding the user pointer

user       ( n "name" -- )
           Define a user variable at offset n

value      ( x "name" -- )
           Define a value

variable   ( "name" -- )
           Create a variable in the current data section

warm       ( -- )
           Make a warm start

while      (addr1 -- addr2 addr1 )
           begin ... while ... repeat

within     ( x xl xh -- flag )
           Leave true if  xl <= x < xh

wmove      ( addr1 addr2 u -- )
           Move u cells from addr1 to addr2

word       ( c -- c-addr )
           Copy a word delimited by c to c-addr

words      ( -- )
           List words
 
xor        ( x1 x2 -- x3 )
           Xor bitwise x1 with x2.



ASSEMBLER words
---------------

The following definitions are in the core dictionary.

as,        ( lower upper -- )
           Append a 24-bit code 

as0        ( bit ram-addr -- u )
           Help word for bit manipulation opcodes

rcall,     ( rel-addr -- )
bra,       ( cc rel-addr -- )
return,    ( -- )
retfie,    ( -- )
bclr,      ( bit ram-addr -- )
bset,      ( bit ram-addr -- )
btst,      ( bit ram-addr -- )
btsc,      ( bit ram-addr -- )
btss,      ( bit ram-addr -- )
z,         ( -- cc )
nz,        ( -- cc )
not,       ( cc -- not-cc )
if,        ( cc -- here )
else,      ( back-addr -- here )
then,      ( back-addr -- )
begin,     ( -- here )
again,     ( back-addr -- )
until,     ( back-addr cc -- )

