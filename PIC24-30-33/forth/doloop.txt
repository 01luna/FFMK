\ *******************************************************************
\                                                                   *
\    Filename:      doloop.txt                                      *
\    Date:          21.01.2014                                      *
\    FF Version:    5.0                                             *
\    MCU:           PIC30 PIC24 PIC33                               *
\    Copyright:     Mikael Nordman                                  *
\    Author:        Mikael Nordman                                  *
\ *******************************************************************
\ FlashForth is licensed according to the GNU General Public License*
\ *******************************************************************
-doloop
marker -doloop
ram variable ind
ram variable lim

: compileonly $10 shb ; \ Make word compile only

: (do)   ( limit index -- R: leave oldindex oldlim ) 
  r> r>
  dup xa> @ >r 0 >r      \ R: leave 
  ind @ >r lim @ >r  \ R: leave oldindex oldlim
  2+ >r >r           \ R: leave oldindex oldlim returnaddr
  ind ! lim !
; compileonly

: (?do)
  2dup xor
  if
    [ '  (do) ] again  \ branch to (do) 
  then
  r> r> xa> @ >r >r 2drop
;

: (loop)
  [ ind $2000 or $ec as, ] \ inc ind
  [ ind $8000 or $bf as, ] \ mov ind, wreg
  [ lim 2/ #4 lshift 1 or lim 2/ #12 rshift $80 or as, ] \ mov lim, w1
  [ $2f00 $eb as, ]        \ clr [++14]
  [ $0001 $e7 as, ]        \ cpsne w0, w1
  [ $8f00 $eb as, ]        \ setm [W14]
; compileonly

: (+loop) ( n -- )
  dup >r            \ remember increment
  [ ind literal ] @ 
  + dup 
  [ ind literal ] !
  [ lim literal ] @ 
  r> 0< 
  if    <
  else  1- >
  then            
; compileonly

: (unloop)
  r> r>
  r> lim ! r> ind ! rdrop rdrop
  >r >r
; compileonly

: do
  postpone (do)
  postpone begin
  flash 2 allot ram
  postpone begin
; immediate compileonly

: ?do
  postpone (?do)
  postpone begin
  flash 2 allot ram
  postpone begin
; immediate compileonly

: leave
  rdrop rdrop r> lim ! r> ind !
; compileonly

: i
  [ ind $8000 or $bf as, ] \ mov ind, wreg
  [ $782f00. as, ]         \ mov w0,  [++W14]
; inlined compileonly

: j 
  [ $97b86f. as, ] \ mov [W15-6], WREG
  [ $782f00. as, ] \ mov w0,  [++W14]
; inlined compileonly

: loop
  postpone (loop)
  postpone until
  postpone (unloop)
  flash here >xa swap ! ram
; immediate compileonly

: +loop
  postpone (+loop)
  postpone until
  postpone (unloop)
  flash here >xa swap ! ram
; immediate compileonly
