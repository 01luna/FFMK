
AVRASM ver. 2.1.30  avr/src/ff-atmega.asm Sun Nov 27 19:17:17 2016

avr/src/ff-atmega.asm(34): Including file 'avr/src/config.inc'
avr/src/config.inc(5): Including file 'avrasm2/inc\m2560def.inc'
avr/src/ff-atmega.asm(78): warning: Register r26 already defined by the .DEF directive
avr/src/ff-atmega.asm(79): warning: Register r27 already defined by the .DEF directive
avr/src/ff-atmega.asm(80): warning: Register r30 already defined by the .DEF directive
avr/src/ff-atmega.asm(81): warning: Register r31 already defined by the .DEF directive
avr/src/ff-atmega.asm(244): warning: Use of undefined or forward referenced symbol 'TX0_' in .equ/.set
avr/src/ff-atmega.asm(245): warning: Use of undefined or forward referenced symbol 'RX0_' in .equ/.set
avr/src/ff-atmega.asm(246): warning: Use of undefined or forward referenced symbol 'RX0Q' in .equ/.set
                 
                 
                 ;                                                                     *
                 ;    Filename:      FlashForth.asm                                    *
                 ;    Date:          11.11.2016                                        *
                 ;    File Version:  5.0                                               *
                 ;    MCU:           Atmega                                            *
                 ;    Copyright:     Mikael Nordman                                    *
                 ;    Author:        Mikael Nordman                                    *
                 ;                                                                     * 
                 ;**********************************************************************
                 ; FlashForth is a standalone Forth system for microcontrollers that
                 ; can flash their own flash memory.
                 ;
                 ; Copyright (C) 2016  Mikael Nordman
                 
                 ; This program is free software: you can redistribute it and/or modify
                 ; it under the terms of the GNU General Public License version 3 as 
                 ; published by the Free Software Foundation.
                 ;
                 ; This program is distributed in the hope that it will be useful,
                 ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                 ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 ; GNU General Public License for more details.
                 ;
                 ; You should have received a copy of the GNU General Public License
                 ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                 ;
                 ; Modified versions of FlashForth must be clearly marked as such, 
                 ; in the name of this file, and in the identification
                 ; displayed when FlashForth starts.
                 ;**********************************************************************
                 
                 ; Include the FlashForth configuration file
                 .include "config.inc"
                 
                 
                 ; Select the include file for your micro controller
                 ;.include "m2561def.inc"  ; 
                 .include "m2560def.inc"  ; Tested     Fuses: E:0xff H:0xdc L:0xff
                 
                 ;***** Created: 2008-11-07 12:39 ******* Source: ATmega2560.xml **********
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m2560def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega2560
                 ;* Date              : 2008-11-07
                 ;* Version           : 2.31
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega2560
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M2560DEF_INC_
                 #define _M2560DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega2560
                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x98
                 .equ	SIGNATURE_002	= 0x01
                 
                 #pragma AVRPART CORE CORE_VERSION V3
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                 .equ	PINL	= 0x109	; MEMORY MAPPED
                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                 .equ	PINK	= 0x106	; MEMORY MAPPED
                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                 .equ	PINH	= 0x100	; MEMORY MAPPED
                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	EIND	= 0x3c
                 .equ	RAMPZ	= 0x3b
                 .equ	SPMCSR	= 0x37
                 .equ	MCUCR	= 0x35
                 .equ	MCUSR	= 0x34
                 .equ	SMCR	= 0x33
                 .equ	OCDR	= 0x31
                 .equ	ACSR	= 0x30
                 .equ	SPDR	= 0x2e
                 .equ	SPSR	= 0x2d
                 .equ	SPCR	= 0x2c
                 .equ	GPIOR2	= 0x2b
                 .equ	GPIOR1	= 0x2a
                 .equ	OCR0B	= 0x28
                 .equ	OCR0A	= 0x27
                 .equ	TCNT0	= 0x26
                 .equ	TCCR0B	= 0x25
                 .equ	TCCR0A	= 0x24
                 .equ	GTCCR	= 0x23
                 .equ	EEARH	= 0x22
                 .equ	EEARL	= 0x21
                 .equ	EEDR	= 0x20
                 .equ	EECR	= 0x1f
                 .equ	GPIOR0	= 0x1e
                 .equ	EIMSK	= 0x1d
                 .equ	EIFR	= 0x1c
                 .equ	PCIFR	= 0x1b
                 .equ	TIFR5	= 0x1a
                 .equ	TIFR4	= 0x19
                 .equ	TIFR3	= 0x18
                 .equ	TIFR2	= 0x17
                 .equ	TIFR1	= 0x16
                 .equ	TIFR0	= 0x15
                 .equ	PORTG	= 0x14
                 .equ	DDRG	= 0x13
                 .equ	PING	= 0x12
                 .equ	PORTF	= 0x11
                 .equ	DDRF	= 0x10
                 .equ	PINF	= 0x0f
                 .equ	PORTE	= 0x0e
                 .equ	DDRE	= 0x0d
                 .equ	PINE	= 0x0c
                 .equ	PORTD	= 0x0b
                 .equ	DDRD	= 0x0a
                 .equ	PIND	= 0x09
                 .equ	PORTC	= 0x08
                 .equ	DDRC	= 0x07
                 .equ	PINC	= 0x06
                 .equ	PORTB	= 0x05
                 .equ	DDRB	= 0x04
                 .equ	PINB	= 0x03
                 .equ	PORTA	= 0x02
                 .equ	DDRA	= 0x01
                 .equ	PINA	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; ADCSRB - ADC Control and Status Register B
                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 ; DIDR1 - Digital Input Disable Register 1
                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                 
                 
                 ; ***** USART0 ***********************
                 ; UDR0 - USART I/O Data Register
                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR0A - USART Control and Status Register A
                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                 .equ	U2X0	= 1	; Double the USART transmission speed
                 .equ	UPE0	= 2	; Parity Error
                 .equ	DOR0	= 3	; Data overRun
                 .equ	FE0	= 4	; Framing Error
                 .equ	UDRE0	= 5	; USART Data Register Empty
                 .equ	TXC0	= 6	; USART Transmitt Complete
                 .equ	RXC0	= 7	; USART Receive Complete
                 
                 ; UCSR0B - USART Control and Status Register B
                 .equ	TXB80	= 0	; Transmit Data Bit 8
                 .equ	RXB80	= 1	; Receive Data Bit 8
                 .equ	UCSZ02	= 2	; Character Size
                 .equ	TXEN0	= 3	; Transmitter Enable
                 .equ	RXEN0	= 4	; Receiver Enable
                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR0C - USART Control and Status Register C
                 .equ	UCPOL0	= 0	; Clock Polarity
                 .equ	UCSZ00	= 1	; Character Size
                 .equ	UCPHA0	= UCSZ00	; For compatibility
                 .equ	UCSZ01	= 2	; Character Size
                 .equ	UDORD0	= UCSZ01	; For compatibility
                 .equ	USBS0	= 3	; Stop Bit Select
                 .equ	UPM00	= 4	; Parity Mode Bit 0
                 .equ	UPM01	= 5	; Parity Mode Bit 1
                 .equ	UMSEL00	= 6	; USART Mode Select
                 .equ	UMSEL0	= UMSEL00	; For compatibility
                 .equ	UMSEL01	= 7	; USART Mode Select
                 .equ	UMSEL1	= UMSEL01	; For compatibility
                 
                 ; UBRR0H - USART Baud Rate Register High Byte
                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR0L - USART Baud Rate Register Low Byte
                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 ; ***** TWI **************************
                 ; TWAMR - TWI (Slave) Address Mask Register
                 .equ	TWAM0	= 1	; 
                 .equ	TWAMR0	= TWAM0	; For compatibility
                 .equ	TWAM1	= 2	; 
                 .equ	TWAMR1	= TWAM1	; For compatibility
                 .equ	TWAM2	= 3	; 
                 .equ	TWAMR2	= TWAM2	; For compatibility
                 .equ	TWAM3	= 4	; 
                 .equ	TWAMR3	= TWAM3	; For compatibility
                 .equ	TWAM4	= 5	; 
                 .equ	TWAMR4	= TWAM4	; For compatibility
                 .equ	TWAM5	= 6	; 
                 .equ	TWAMR5	= TWAM5	; For compatibility
                 .equ	TWAM6	= 7	; 
                 .equ	TWAMR6	= TWAM6	; For compatibility
                 
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                 .equ	PA3	= 3	; For compatibility
                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                 .equ	PA4	= 4	; For compatibility
                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                 .equ	PA5	= 5	; For compatibility
                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                 .equ	PA6	= 6	; For compatibility
                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                 .equ	PA7	= 7	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                 .equ	PC7	= 7	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** PORTE ************************
                 ; PORTE - Data Register, Port E
                 .equ	PORTE0	= 0	; 
                 .equ	PE0	= 0	; For compatibility
                 .equ	PORTE1	= 1	; 
                 .equ	PE1	= 1	; For compatibility
                 .equ	PORTE2	= 2	; 
                 .equ	PE2	= 2	; For compatibility
                 .equ	PORTE3	= 3	; 
                 .equ	PE3	= 3	; For compatibility
                 .equ	PORTE4	= 4	; 
                 .equ	PE4	= 4	; For compatibility
                 .equ	PORTE5	= 5	; 
                 .equ	PE5	= 5	; For compatibility
                 .equ	PORTE6	= 6	; 
                 .equ	PE6	= 6	; For compatibility
                 .equ	PORTE7	= 7	; 
                 .equ	PE7	= 7	; For compatibility
                 
                 ; DDRE - Data Direction Register, Port E
                 .equ	DDE0	= 0	; 
                 .equ	DDE1	= 1	; 
                 .equ	DDE2	= 2	; 
                 .equ	DDE3	= 3	; 
                 .equ	DDE4	= 4	; 
                 .equ	DDE5	= 5	; 
                 .equ	DDE6	= 6	; 
                 .equ	DDE7	= 7	; 
                 
                 ; PINE - Input Pins, Port E
                 .equ	PINE0	= 0	; 
                 .equ	PINE1	= 1	; 
                 .equ	PINE2	= 2	; 
                 .equ	PINE3	= 3	; 
                 .equ	PINE4	= 4	; 
                 .equ	PINE5	= 5	; 
                 .equ	PINE6	= 6	; 
                 .equ	PINE7	= 7	; 
                 
                 
                 ; ***** PORTF ************************
                 ; PORTF - Data Register, Port F
                 .equ	PORTF0	= 0	; 
                 .equ	PF0	= 0	; For compatibility
                 .equ	PORTF1	= 1	; 
                 .equ	PF1	= 1	; For compatibility
                 .equ	PORTF2	= 2	; 
                 .equ	PF2	= 2	; For compatibility
                 .equ	PORTF3	= 3	; 
                 .equ	PF3	= 3	; For compatibility
                 .equ	PORTF4	= 4	; 
                 .equ	PF4	= 4	; For compatibility
                 .equ	PORTF5	= 5	; 
                 .equ	PF5	= 5	; For compatibility
                 .equ	PORTF6	= 6	; 
                 .equ	PF6	= 6	; For compatibility
                 .equ	PORTF7	= 7	; 
                 .equ	PF7	= 7	; For compatibility
                 
                 ; DDRF - Data Direction Register, Port F
                 .equ	DDF0	= 0	; 
                 .equ	DDF1	= 1	; 
                 .equ	DDF2	= 2	; 
                 .equ	DDF3	= 3	; 
                 .equ	DDF4	= 4	; 
                 .equ	DDF5	= 5	; 
                 .equ	DDF6	= 6	; 
                 .equ	DDF7	= 7	; 
                 
                 ; PINF - Input Pins, Port F
                 .equ	PINF0	= 0	; 
                 .equ	PINF1	= 1	; 
                 .equ	PINF2	= 2	; 
                 .equ	PINF3	= 3	; 
                 .equ	PINF4	= 4	; 
                 .equ	PINF5	= 5	; 
                 .equ	PINF6	= 6	; 
                 .equ	PINF7	= 7	; 
                 
                 
                 ; ***** PORTG ************************
                 ; PORTG - Data Register, Port G
                 .equ	PORTG0	= 0	; 
                 .equ	PG0	= 0	; For compatibility
                 .equ	PORTG1	= 1	; 
                 .equ	PG1	= 1	; For compatibility
                 .equ	PORTG2	= 2	; 
                 .equ	PG2	= 2	; For compatibility
                 .equ	PORTG3	= 3	; 
                 .equ	PG3	= 3	; For compatibility
                 .equ	PORTG4	= 4	; 
                 .equ	PG4	= 4	; For compatibility
                 .equ	PORTG5	= 5	; 
                 .equ	PG5	= 5	; For compatibility
                 
                 ; DDRG - Data Direction Register, Port G
                 .equ	DDG0	= 0	; 
                 .equ	DDG1	= 1	; 
                 .equ	DDG2	= 2	; 
                 .equ	DDG3	= 3	; 
                 .equ	DDG4	= 4	; 
                 .equ	DDG5	= 5	; 
                 
                 ; PING - Input Pins, Port G
                 .equ	PING0	= 0	; 
                 .equ	PING1	= 1	; 
                 .equ	PING2	= 2	; 
                 .equ	PING3	= 3	; 
                 .equ	PING4	= 4	; 
                 .equ	PING5	= 5	; 
                 
                 
                 ; ***** PORTH ************************
                 ; PORTH - PORT H Data Register
                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                 .equ	PH0	= 0	; For compatibility
                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                 .equ	PH1	= 1	; For compatibility
                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                 .equ	PH2	= 2	; For compatibility
                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                 .equ	PH3	= 3	; For compatibility
                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                 .equ	PH4	= 4	; For compatibility
                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                 .equ	PH5	= 5	; For compatibility
                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                 .equ	PH6	= 6	; For compatibility
                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                 .equ	PH7	= 7	; For compatibility
                 
                 ; DDRH - PORT H Data Direction Register
                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                 
                 ; PINH - PORT H Input Pins
                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                 
                 
                 ; ***** PORTJ ************************
                 ; PORTJ - PORT J Data Register
                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                 .equ	PJ0	= 0	; For compatibility
                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                 .equ	PJ1	= 1	; For compatibility
                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                 .equ	PJ2	= 2	; For compatibility
                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                 .equ	PJ3	= 3	; For compatibility
                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                 .equ	PJ4	= 4	; For compatibility
                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                 .equ	PJ5	= 5	; For compatibility
                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                 .equ	PJ6	= 6	; For compatibility
                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                 .equ	PJ7	= 7	; For compatibility
                 
                 ; DDRJ - PORT J Data Direction Register
                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                 
                 ; PINJ - PORT J Input Pins
                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                 
                 
                 ; ***** PORTK ************************
                 ; PORTK - PORT K Data Register
                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                 .equ	PK0	= 0	; For compatibility
                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                 .equ	PK1	= 1	; For compatibility
                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                 .equ	PK2	= 2	; For compatibility
                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                 .equ	PK3	= 3	; For compatibility
                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                 .equ	PK4	= 4	; For compatibility
                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                 .equ	PK5	= 5	; For compatibility
                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                 .equ	PK6	= 6	; For compatibility
                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                 .equ	PK7	= 7	; For compatibility
                 
                 ; DDRK - PORT K Data Direction Register
                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                 
                 ; PINK - PORT K Input Pins
                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                 
                 
                 ; ***** PORTL ************************
                 ; PORTL - PORT L Data Register
                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                 .equ	PL0	= 0	; For compatibility
                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                 .equ	PL1	= 1	; For compatibility
                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                 .equ	PL2	= 2	; For compatibility
                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                 .equ	PL3	= 3	; For compatibility
                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                 .equ	PL4	= 4	; For compatibility
                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                 .equ	PL5	= 5	; For compatibility
                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                 .equ	PL6	= 6	; For compatibility
                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                 .equ	PL7	= 7	; For compatibility
                 
                 ; DDRL - PORT L Data Direction Register
                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                 
                 ; PINL - PORT L Input Pins
                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                 
                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                 
                 ; TCCR0A - Timer/Counter  Control Register A
                 .equ	WGM00	= 0	; Waveform Generation Mode
                 .equ	WGM01	= 1	; Waveform Generation Mode
                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                 
                 ; TCCR0B - Timer/Counter Control Register B
                 .equ	CS00	= 0	; Clock Select
                 .equ	CS01	= 1	; Clock Select
                 .equ	CS02	= 2	; Clock Select
                 .equ	WGM02	= 3	; 
                 .equ	FOC0B	= 6	; Force Output Compare B
                 .equ	FOC0A	= 7	; Force Output Compare A
                 
                 ; TCNT0 - Timer/Counter0
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0A - Timer/Counter0 Output Compare Register
                 .equ	OCROA_0	= 0	; 
                 .equ	OCROA_1	= 1	; 
                 .equ	OCROA_2	= 2	; 
                 .equ	OCROA_3	= 3	; 
                 .equ	OCROA_4	= 4	; 
                 .equ	OCROA_5	= 5	; 
                 .equ	OCROA_6	= 6	; 
                 .equ	OCROA_7	= 7	; 
                 
                 ; OCR0B - Timer/Counter0 Output Compare Register
                 .equ	OCR0B_0	= 0	; 
                 .equ	OCR0B_1	= 1	; 
                 .equ	OCR0B_2	= 2	; 
                 .equ	OCR0B_3	= 3	; 
                 .equ	OCR0B_4	= 4	; 
                 .equ	OCR0B_5	= 5	; 
                 .equ	OCR0B_6	= 6	; 
                 .equ	OCR0B_7	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	PSR10	= PSRSYNC	; For compatibility
                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	TOIE2A	= TOIE2	; For compatibility
                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                 
                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                 
                 ; TCCR2A - Timer/Counter2 Control Register A
                 .equ	WGM20	= 0	; Waveform Genration Mode
                 .equ	WGM21	= 1	; Waveform Genration Mode
                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                 
                 ; TCCR2B - Timer/Counter2 Control Register B
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM22	= 3	; Waveform Generation Mode
                 .equ	FOC2B	= 6	; Force Output Compare B
                 .equ	FOC2A	= 7	; Force Output Compare A
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2A - Timer/Counter2 Output Compare Register A
                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; OCR2B - Timer/Counter2 Output Compare Register B
                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                 .equ	EXCLK	= 6	; Enable External Clock Input
                 
                 ; GTCCR - General Timer Counter Control register
                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PSR2	= PSRASY	; For compatibility
                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCSR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDCE	= 4	; Watchdog Change Enable
                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                 
                 
                 ; ***** USART1 ***********************
                 ; UDR1 - USART I/O Data Register
                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR1A - USART Control and Status Register A
                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                 .equ	U2X1	= 1	; Double the USART transmission speed
                 .equ	UPE1	= 2	; Parity Error
                 .equ	DOR1	= 3	; Data overRun
                 .equ	FE1	= 4	; Framing Error
                 .equ	UDRE1	= 5	; USART Data Register Empty
                 .equ	TXC1	= 6	; USART Transmitt Complete
                 .equ	RXC1	= 7	; USART Receive Complete
                 
                 ; UCSR1B - USART Control and Status Register B
                 .equ	TXB81	= 0	; Transmit Data Bit 8
                 .equ	RXB81	= 1	; Receive Data Bit 8
                 .equ	UCSZ12	= 2	; Character Size
                 .equ	TXEN1	= 3	; Transmitter Enable
                 .equ	RXEN1	= 4	; Receiver Enable
                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR1C - USART Control and Status Register C
                 .equ	UCPOL1	= 0	; Clock Polarity
                 .equ	UCSZ10	= 1	; Character Size
                 .equ	UCPHA1	= UCSZ10	; For compatibility
                 .equ	UCSZ11	= 2	; Character Size
                 .equ	UDORD1	= UCSZ11	; For compatibility
                 .equ	USBS1	= 3	; Stop Bit Select
                 .equ	UPM10	= 4	; Parity Mode Bit 0
                 .equ	UPM11	= 5	; Parity Mode Bit 1
                 .equ	UMSEL10	= 6	; USART Mode Select
                 .equ	UMSEL11	= 7	; USART Mode Select
                 
                 ; UBRR1H - USART Baud Rate Register High Byte
                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR1L - USART Baud Rate Register Low Byte
                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEARH - EEPROM Address Register Low Byte
                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                 
                 ; EEARL - EEPROM Address Register Low Byte
                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                 
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEPE	= 1	; EEPROM Write Enable
                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                 
                 
                 ; ***** TIMER_COUNTER_5 **************
                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                 
                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                 .equ	ICF5	= 5	; Input Capture Flag 5
                 
                 ; TCCR5A - Timer/Counter5 Control Register A
                 .equ	WGM50	= 0	; Waveform Generation Mode
                 .equ	WGM51	= 1	; Waveform Generation Mode
                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR5B - Timer/Counter5 Control Register B
                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                 .equ	WGM52	= 3	; Waveform Generation Mode
                 .equ	WGM53	= 4	; Waveform Generation Mode
                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                 
                 ; TCCR5C - Timer/Counter 5 Control Register C
                 .equ	FOC5C	= 5	; Force Output Compare 5C
                 .equ	FOC5B	= 6	; Force Output Compare 5B
                 .equ	FOC5A	= 7	; Force Output Compare 5A
                 
                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                 
                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                 
                 
                 ; ***** TIMER_COUNTER_4 **************
                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                 
                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                 .equ	ICF4	= 5	; Input Capture Flag 4
                 
                 ; TCCR4A - Timer/Counter4 Control Register A
                 .equ	WGM40	= 0	; Waveform Generation Mode
                 .equ	WGM41	= 1	; Waveform Generation Mode
                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR4B - Timer/Counter4 Control Register B
                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                 .equ	WGM42	= 3	; Waveform Generation Mode
                 .equ	WGM43	= 4	; Waveform Generation Mode
                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                 
                 ; TCCR4C - Timer/Counter 4 Control Register C
                 .equ	FOC4C	= 5	; Force Output Compare 4C
                 .equ	FOC4B	= 6	; Force Output Compare 4B
                 .equ	FOC4A	= 7	; Force Output Compare 4A
                 
                 
                 ; ***** TIMER_COUNTER_3 **************
                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                 
                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                 .equ	ICF3	= 5	; Input Capture Flag 3
                 
                 ; TCCR3A - Timer/Counter3 Control Register A
                 .equ	WGM30	= 0	; Waveform Generation Mode
                 .equ	WGM31	= 1	; Waveform Generation Mode
                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR3B - Timer/Counter3 Control Register B
                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                 .equ	WGM32	= 3	; Waveform Generation Mode
                 .equ	WGM33	= 4	; Waveform Generation Mode
                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                 
                 ; TCCR3C - Timer/Counter 3 Control Register C
                 .equ	FOC3C	= 5	; Force Output Compare 3C
                 .equ	FOC3B	= 6	; Force Output Compare 3B
                 .equ	FOC3A	= 7	; Force Output Compare 3A
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 ; TCCR1C - Timer/Counter 1 Control Register C
                 .equ	FOC1C	= 5	; Force Output Compare 1C
                 .equ	FOC1B	= 6	; Force Output Compare 1B
                 .equ	FOC1A	= 7	; Force Output Compare 1A
                 
                 
                 ; ***** JTAG *************************
                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                 .equ	IDRD	= OCDR7	; For compatibility
                 
                 ; MCUCR - MCU Control Register
                 .equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; MCUSR - MCU Status Register
                 .equ	JTRF	= 4	; JTAG Reset Flag
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; EICRA - External Interrupt Control Register A
                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                 
                 ; EICRB - External Interrupt Control Register B
                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                 
                 ; EIMSK - External Interrupt Mask Register
                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                 
                 ; EIFR - External Interrupt Flag Register
                 .equ	INTF0	= 0	; External Interrupt Flag 0
                 .equ	INTF1	= 1	; External Interrupt Flag 1
                 .equ	INTF2	= 2	; External Interrupt Flag 2
                 .equ	INTF3	= 3	; External Interrupt Flag 3
                 .equ	INTF4	= 4	; External Interrupt Flag 4
                 .equ	INTF5	= 5	; External Interrupt Flag 5
                 .equ	INTF6	= 6	; External Interrupt Flag 6
                 .equ	INTF7	= 7	; External Interrupt Flag 7
                 
                 ; PCICR - Pin Change Interrupt Control Register
                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                 
                 ; PCIFR - Pin Change Interrupt Flag Register
                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                 
                 ; PCMSK2 - Pin Change Mask Register 2
                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                 
                 ; PCMSK1 - Pin Change Mask Register 1
                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                 
                 ; PCMSK0 - Pin Change Mask Register 0
                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	PUD	= 4	; Pull-up disable
                 ;.equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; MCUSR - MCU Status Register
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                 
                 ; XMCRA - External Memory Control Register A
                 .equ	SRW00	= 0	; Wait state select bit lower page
                 .equ	SRW01	= 1	; Wait state select bit lower page
                 .equ	SRW10	= 2	; Wait state select bit upper page
                 .equ	SRW11	= 3	; Wait state select bit upper page
                 .equ	SRL0	= 4	; Wait state page limit
                 .equ	SRL1	= 5	; Wait state page limit
                 .equ	SRL2	= 6	; Wait state page limit
                 .equ	SRE	= 7	; External SRAM Enable
                 
                 ; XMCRB - External Memory Control Register B
                 .equ	XMM0	= 0	; External Memory High Mask
                 .equ	XMM1	= 1	; External Memory High Mask
                 .equ	XMM2	= 2	; External Memory High Mask
                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; CLKPR - 
                 .equ	CLKPS0	= 0	; 
                 .equ	CLKPS1	= 1	; 
                 .equ	CLKPS2	= 2	; 
                 .equ	CLKPS3	= 3	; 
                 .equ	CLKPCE	= 7	; 
                 
                 ; SMCR - Sleep Mode Control Register
                 .equ	SE	= 0	; Sleep Enable
                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                 
                 ; RAMPZ - RAM Page Z Select Register
                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                 
                 ; EIND - Extended Indirect Register
                 .equ	EIND0	= 0	; Bit 0
                 
                 ; GPIOR2 - General Purpose IO Register 2
                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                 
                 ; GPIOR1 - General Purpose IO Register 1
                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                 
                 ; GPIOR0 - General Purpose IO Register 0
                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                 
                 ; PRR1 - Power Reduction Register1
                 .equ	PRUSART1	= 0	; Power Reduction USART1
                 .equ	PRUSART2	= 1	; Power Reduction USART2
                 .equ	PRUSART3	= 2	; Power Reduction USART3
                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                 
                 ; PRR0 - Power Reduction Register0
                 .equ	PRADC	= 0	; Power Reduction ADC
                 .equ	PRUSART0	= 1	; Power Reduction USART
                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                 .equ	PRTWI	= 7	; Power Reduction TWI
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register A
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCSRB - The ADC Control and Status register B
                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                 ;.equ	ACME	= 6	; 
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; DIDR0 - Digital Input Disable Register
                 .equ	ADC0D	= 0	; 
                 .equ	ADC1D	= 1	; 
                 .equ	ADC2D	= 2	; 
                 .equ	ADC3D	= 3	; 
                 .equ	ADC4D	= 4	; 
                 .equ	ADC5D	= 5	; 
                 .equ	ADC6D	= 6	; 
                 .equ	ADC7D	= 7	; 
                 
                 ; DIDR2 - Digital Input Disable Register
                 .equ	ADC8D	= 0	; 
                 .equ	ADC9D	= 1	; 
                 .equ	ADC10D	= 2	; 
                 .equ	ADC11D	= 3	; 
                 .equ	ADC12D	= 4	; 
                 .equ	ADC13D	= 5	; 
                 .equ	ADC14D	= 6	; 
                 .equ	ADC15D	= 7	; 
                 
                 
                 ; ***** BOOT_LOAD ********************
                 ; SPMCSR - Store Program Memory Control Register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read While Write section read enable
                 .equ	SIGRD	= 5	; Signature Row Read
                 .equ	RWWSB	= 6	; Read While Write Section Busy
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 
                 ; ***** USART2 ***********************
                 ; UDR2 - USART I/O Data Register
                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR2A - USART Control and Status Register A
                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                 .equ	U2X2	= 1	; Double the USART transmission speed
                 .equ	UPE2	= 2	; Parity Error
                 .equ	DOR2	= 3	; Data overRun
                 .equ	FE2	= 4	; Framing Error
                 .equ	UDRE2	= 5	; USART Data Register Empty
                 .equ	TXC2	= 6	; USART Transmitt Complete
                 .equ	RXC2	= 7	; USART Receive Complete
                 
                 ; UCSR2B - USART Control and Status Register B
                 .equ	TXB82	= 0	; Transmit Data Bit 8
                 .equ	RXB82	= 1	; Receive Data Bit 8
                 .equ	UCSZ22	= 2	; Character Size
                 .equ	TXEN2	= 3	; Transmitter Enable
                 .equ	RXEN2	= 4	; Receiver Enable
                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR2C - USART Control and Status Register C
                 .equ	UCPOL2	= 0	; Clock Polarity
                 .equ	UCSZ20	= 1	; Character Size
                 .equ	UCSZ21	= 2	; Character Size
                 .equ	USBS2	= 3	; Stop Bit Select
                 .equ	UPM20	= 4	; Parity Mode Bit 0
                 .equ	UPM21	= 5	; Parity Mode Bit 1
                 .equ	UMSEL20	= 6	; USART Mode Select
                 .equ	UMSEL21	= 7	; USART Mode Select
                 
                 ; UBRR2H - USART Baud Rate Register High Byte
                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR2L - USART Baud Rate Register Low Byte
                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 ; ***** USART3 ***********************
                 ; UDR3 - USART I/O Data Register
                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR3A - USART Control and Status Register A
                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                 .equ	U2X3	= 1	; Double the USART transmission speed
                 .equ	UPE3	= 2	; Parity Error
                 .equ	DOR3	= 3	; Data overRun
                 .equ	FE3	= 4	; Framing Error
                 .equ	UDRE3	= 5	; USART Data Register Empty
                 .equ	TXC3	= 6	; USART Transmitt Complete
                 .equ	RXC3	= 7	; USART Receive Complete
                 
                 ; UCSR3B - USART Control and Status Register B
                 .equ	TXB83	= 0	; Transmit Data Bit 8
                 .equ	RXB83	= 1	; Receive Data Bit 8
                 .equ	UCSZ32	= 2	; Character Size
                 .equ	TXEN3	= 3	; Transmitter Enable
                 .equ	RXEN3	= 4	; Receiver Enable
                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR3C - USART Control and Status Register C
                 .equ	UCPOL3	= 0	; Clock Polarity
                 .equ	UCSZ30	= 1	; Character Size
                 .equ	UCSZ31	= 2	; Character Size
                 .equ	USBS3	= 3	; Stop Bit Select
                 .equ	UPM30	= 4	; Parity Mode Bit 0
                 .equ	UPM31	= 5	; Parity Mode Bit 1
                 .equ	UMSEL30	= 6	; USART Mode Select
                 .equ	UMSEL31	= 7	; USART Mode Select
                 
                 ; UBRR3H - USART Baud Rate Register High Byte
                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR3L - USART Baud Rate Register Low Byte
                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	CKOUT	= 6	; Clock output
                 .equ	CKDIV8	= 7	; Divide clock by 8
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	WDTON	= 4	; Watchdog timer always on
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	JTAGEN	= 6	; Enable JTAG
                 .equ	OCDEN	= 7	; Enable OCD
                 
                 ; EXTENDED fuse bits
                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                 .equ	IOEND	= 0x01ff
                 .equ	SRAM_START	= 0x0200
                 .equ	SRAM_SIZE	= 8192
                 .equ	RAMEND	= 0x21ff
                 .equ	XRAMEND	= 0xffff
                 .equ	E2END	= 0x0fff
                 .equ	EEPROMEND	= 0x0fff
                 .equ	EEADRBITS	= 12
                 #pragma AVRPART MEMORY PROG_FLASH 262144
                 #pragma AVRPART MEMORY EEPROM 4096
                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x1f000
                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x1efff
                 .equ	PAGESIZE	= 128
                 .equ	FIRSTBOOTSTART	= 0x1fe00
                 .equ	SECONDBOOTSTART	= 0x1fc00
                 .equ	THIRDBOOTSTART	= 0x1f800
                 .equ	FOURTHBOOTSTART	= 0x1f000
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                 
                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                 
                 #endif  /* _M2560DEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 ;.include "m128def.inc"   ; Tested     Fuses: E:0xff H:0xdc L:0xff
                 ;.include "m168pdef.inc"
                 ;.include "m328pdef.inc"   ; Tested    Fuses: E:0xff H:0xda L:0xff
                 ;.include "m328def.inc"   ; Tested    Fuses: E:0xff H:0xda L:0xff
                 ;.include "m32adef.inc"
                 ;.include "m644pdef.inc"
                 
                 ; Oscillator frequency in herz
                 .equ FREQ_OSC = 16000000
                 
                 ; Define the UART used for the operator
                 .equ OPERATOR_UART = 0              ; 0 or 1
                 
                 ;;; UART0 configuration
                 ;;; Note: With Arduino Uno R3 and MEGA R3 the USB to serial bridge latency and queues 
                 ;;; disturb the XON/XOFF flow control. 
                 ;;; The workaround is to use XON/XOFF flow control and 1 ms intercharacter delay in the terminal program. Or use the ff-shell.py which adds CR LF flow control.
                 .equ BAUDRATE0 = 9600               ; Serial baudrate UART0
                 .equ U0FC_TYPE = 1                  ; 1 = XON/XOFF, 2=CTS/RTS
                 .equ U0RTS_PORT = portd
                 .equ U0RTS_DDR = ddrd
                 .equ U0RTS_BIT = 3
                 
                 ;;; UART1 configuration
                 .equ BAUDRATE1= 38400               ; Serial baudrate UART1
                 .equ U1FC_TYPE = 1                  ; 1 = XON/XOFF, 2=CTS/RTS
                 .equ U1RTS_PORT = portd
                 .equ U1RTS_DDR = ddrd
                 .equ U1RTS_BIT = 4
                 
                 ; Default number base
                 .equ BASE_DEFAULT = 10      ; 16 = hexadecimal, 10 = decimal
                 
                 ; Set to 1 for power save when CPU is idle
                 .equ IDLE_MODE = 1
                 
                 ; Enable the cpu load measurement. Uses Timer 1. Needs IDLE_MODE = 1
                 .equ CPU_LOAD = 0
                 
                 ; CPU load indicator led definitions. Needs IDLE_MODE = 1
                 .equ CPU_LOAD_LED = 1            ; set to 1 to enable
                 .equ CPU_LOAD_DDR = ddrb
                 .equ CPU_LOAD_PORT = portb       ; avr-p28:portc arduinomega:portb arduinouno:portb
                 .equ CPU_LOAD_BIT = 7            ; avr-p28:pin5  arduinomega:pin7  ardinouno:pin5
                 .equ CPU_LOAD_LED_POLARITY = 1   ; avr-p28:  0 = low on port turns on led, 
                                                  ; arduino : 1 = high on port turns on led 
                 
                 ; Define the startup delay for the turnkey words. Milliseconds
                 .equ TURNKEY_DELAY = 2000  ; milliseconds
                 
                 ; UART buffer sizes
                 .equ RX0_BUF_SIZE = 32  ; 8,16,32,64
                 .equ RX0_OFF_FILL = 4   ; Fill level for XOFF
                 
                 .equ RX1_BUF_SIZE = 32  ; 8,16,32,64
                 .equ RX1_OFF_FILL = 4   ; Fill level for XOFF
                 
                 ;;; USER AREA sizes for the OPERATOR task
                 .equ RETURN_STACK_SIZE = 64          ; 48 cells return stack
                 .equ PARAMETER_STACK_SIZE = 64       ; 32 cells parameter stack
                 .equ TIB_SIZE = 90                   ; 80 chars tib size +  10 chars hold area
                 
                 ; Set to 1 to allow control-o to reset FlashForth from the operator UART
                 .equ CTRL_O_WARM_RESET = 1
                 
                 ; Select which timer to use for the system millisecond ticks 0, 1, 2
                 .equ MS_TIMER = 0
                 
                 ; Debug flash and eeprom writes
                 ; Prints F=Write to FLASH E=Write to EEPROM
                 .equ DEBUG_FLASH = 0
                 
                 #if defined(__ATmega2560__)
                 #define partstring "ATmega2560"
                 #elif defined(__ATmega328P__)
                 #elif defined(__ATmega328__)
                 #elif defined(__ATmega128__)
                 #elif defined(__ATmega2561__)
                 #elif defined(__ATmega644__)
                 #else
                 #endif
                 
                 .if MS_TIMER == 0
                 .ifdef OC0Aaddr
                 .equ MS_TIMER_ADDR = OC0Aaddr
                 .else
                 .endif
                 .endif
                 
                 .if MS_TIMER == 1
                 .ifdef OC1Aaddr
                 .else
                 .endif
                 .endif
                 
                 .if MS_TIMER == 2
                 .ifdef OC2Aaddr
                 .else
                 .endif
                 .endif
                 
                 
                 ; Define the FF version date string
                 #define DATE "11.11.2016"
                 
                 
                 ; Register definitions
                   .def upl = r2         ; not in interrupt 
                   .def uph = r3         ; not in interrupt
                   .def zero = r5        ; read only zero
                   .def r_one = r6       ; read only one
                   .def r_two = r7       ; read only two
                   .def t8 = r8          ; Not in interrupt
                   .def wflags  = r9     ; not in interrupt
                 
                   .def loadreg0 = r4    ;
                   .def loadreg1 = r12
                   .def loadreg2 = r13
                 
                 
                   .def ibasel=r10       ; Not in interrupt
                   .def ibaseh=r11       ; Not in interrupt
                   .def ms_count  = r14  ; Not in interrupt
                   .def ms_count1 = r15  ; Not in interrupt
                   .def t0 = r16
                   .def t1 = r17
                   .def t2 = r0          ; Not in interrupt
                   .def t3 = r1          ; Not in interrupt
                 
                   .def al = r18
                   .def ah = r19
                   .def pl = r20         ; P Register and FOR..LOOP INDEX variable
                   .def ph = r21
                 
                   .def FLAGS1 = r22     ; Not in interrupt
                   .def FLAGS2 = r23     ; Not in interrupt
                   .def tosl = r24
                   .def tosh = r25
                 ;  xl = r26
                 ;  xh = r27
                 ;  yl = r28  ; StackPointer Ylo
                 ;  yh = r29  ; StackPointer Yhi
                 ;  zl = r30
                 ;  zh = r31
                   .def t4 = r26
                   .def t5 = r27
                   .def t6 = r30
                   .def t7 = r31
                 
                 ; Macros
                 .macro poptos 
                     ld tosl, Y+
                     ld tosh, Y+
                 .endmacro
                 
                 .macro pushtos
                     st -Y, tosh
                     st -Y, tosl
                 .endmacro
                 
                 .macro in_
                 .if (@1 < $40)
                   in @0,@1
                 .else
                   lds @0,@1
                 .endif
                 .endmacro
                 
                 .macro out_
                 .if (@0 < $40)
                   out @0,@1
                 .else
                   sts @0,@1
                 .endif
                 .endmacro
                 
                 .macro sbi_
                 .if (@0 < $40)
                   sbi @0,@1
                 .else
                   in_ @2,@0
                   ori @2,exp2(@1)
                   out_ @0,@2
                 .endif
                 .endmacro
                 
                 .macro cbi_
                 .if (@0 < $40)
                   cbi @0,@1
                 .else
                   in_ @2,@0
                   andi @2,~(exp2(@1))
                   out_ @0,@2
                 .endif
                 .endmacro
                 
                 .macro lpm_
                 .if (FLASHEND < 0x8000) ; Word address
                         lpm @0,@1
                 .else
                         elpm @0,@1
                 .endif
                 .endmacro
                 
                 .macro sub_pflash_z
                 .if (PFLASH > 0)
                         subi    zh, high(PFLASH)
                 .endif
                 .endmacro
                 
                 .macro add_pflash_z
                 .if (PFLASH > 0)
                         subi    zh, high(0x10000-PFLASH)
                 .endif        
                 .endmacro
                 
                 .macro sub_pflash_tos
                 .if (PFLASH > 0)
                         subi    tosh, high(PFLASH)
                 .endif
                 .endmacro
                 
                 .macro add_pflash_tos
                 .if (PFLASH > 0)
                         subi    tosh, high(0x10000-PFLASH)
                 .endif        
                 .endmacro
                 
                 .macro rampv_to_c
                 .if (FLASHEND >= 0x8000)
                         bset    0
                 .else
                         bclr    0
                 .endif
                 .endmacro
                 
                 .macro fdw
                   .dw ((@0<<1)+PFLASH)
                 .endmacro
                 
                 .macro m_pop_zh
                 .ifdef EIND
                         pop     zh
                 .endif
                 .endmacro
                 .macro m_pop_xh
                 .ifdef EIND
                         pop     xh
                  .endif
                 .endmacro
                 .macro m_pop_t0
                 .ifdef EIND
                         pop     t0
                  .endif
                 .endmacro
                 .macro m_push_t0
                 .ifdef EIND
                         push    t0
                  .endif
                 .endmacro
                 .macro mijmp
                 .ifdef EIND
                         eijmp
                 .else
                         ijmp
                 .endif
                 .endmacro
                 
                 ; Symbol naming compatilibity
                 ; UART0 symbols for Atmega32
                 .ifndef UCSR0A
                 .else
                 .equ UDR0_=UDR0
                 .equ URSEL_=0
                 .endif
                 
                 .ifndef SPMCSR
                 .endif
                 
                 .ifndef SPMEN
                 .endif
                 
                 .ifndef EEWE
                 .equ EEWE=EEPE
                 .endif
                 
                 .ifndef EEMWE
                 .equ EEMWE=EEMPE
                 .endif
                 
                 .if OPERATOR_UART == 1
                 .else
                 .if OPERATOR_UART == 0
                 .equ OP_TX_=TX0_
                 .equ OP_RX_=RX0_
                 .equ OP_RXQ=RX0Q
                 .endif
                 .endif
                 
                 #define ubrr0val (FREQ_OSC/16/BAUDRATE0) - 1
                 #define ubrr1val (FREQ_OSC/16/BAUDRATE1) - 1
                 
                 .if FREQ_OSC < 16384000 ;Hz
                 .equ ms_value_tmr0 = ((FREQ_OSC/1000/64) - 1)
                 .equ ms_value_tmr1 = ((FREQ_OSC/1000) - 1)
                 .equ ms_value_tmr2 = ((FREQ_OSC/1000/64) - 1)
                 .ifdef TCCR0B
                 .equ ms_pre_tmr0   = 3
                 .endif
                 .ifdef TCCR0
                 .endif
                 .ifdef TCCR2B
                 .equ ms_pre_tmr2   = 4
                 .endif
                 .ifdef TCCR2
                 .endif
                 
                 .else ; FREQ_OSC >= 16384000 Hz
                 .ifdef TCCR0B
                 .endif
                 .ifdef TCCR0
                 .endif
                 .ifdef TCCR2B
                 .endif
                 .ifdef TCCR2
                 .endif
                 .endif
                 .equ CPU_LOAD_VAL  = (FREQ_OSC*255/100000)
                 ;..............................................................................
                 ;Program Specific Constants (literals used in code)
                 ;..............................................................................
                 ; Flash page size
                 .equ PAGESIZEB=PAGESIZE*2    ; Page size in bytes 
                 
                 ; Forth word header flags
                 .equ NFA= 0x80      ; Name field mask
                 .equ IMMED= 0x40    ; Immediate mask
                 .equ INLINE= 0x20   ; Inline mask for 1 and 2 cell code
                 .equ INLINE4= 0x00   ; Inline mask for 4 cell code
                 .equ INLINE5= 0x00   ; Inline mask for 5 cell code
                 .equ COMPILE= 0x10  ; Compile only mask
                 .equ NFAmask= 0xf   ; Name field length mask
                 
                 ; FLAGS2
                 .equ fIDLE=     6   ; 0 = busy, 1 = idle
                 .equ fLOAD=     5   ; Load measurement ready
                 .equ fLOADled=  4   ; 0 = no load led, 1 = load led on
                 .equ fFC_tx1=   3   ; 0=Flow Control, 1 = no Flow Control   
                 .equ fFC_tx0=   2   ; 0=Flow Control, 1 = no Flow Control   
                 .equ ixoff_tx1= 1                    
                 .equ ixoff_tx0= 0
                 
                 ; FLAGS1
                 .equ noclear= 6     ; dont clear optimisation flags 
                 .equ idup=    5     ; Use dupzeroequal instead of zeroequal
                 .equ izeroeq= 4     ; Use brne instead of breq if zeroequal
                 .equ istream= 3
                 .equ fLOCK=   2
                 .equ fTAILC=  1
                 .equ idirty=  0
                 
                 ;;; For Flow Control
                 .equ XON=   0x11
                 .equ XOFF=  0x13
                 
                 .equ CR_=0x0d
                 .equ LF_=0x0a
                 .equ BS_=0x08
                 .equ TAB_=0x09
                 
                 ;;; Memory mapping prefixes
                 .equ PRAM    = 0x0000                 ; 8 Kbytes of ram (atm2560)
                 .equ PEEPROM = RAMEND+1               ; 4 Kbytes of eeprom (atm2560)
                 .if (FLASHEND == 0x1ffff)             ; 128 Kwords flash
                 .equ OFLASH  = PEEPROM+EEPROMEND+1    ; 52 Kbytes available for FlashForth(atm2560)
                 .equ PFLASH  = 0
                 .equ RAMPZV  = 3
                 .equ KERNEL_SIZE=0x0d00
                 .else
                 .if (FLASHEND == 0xffff)              ; 64 Kwords flash
                 .else
                 .if (FLASHEND == 0x7fff)              ; 32 Kwords flash
                 .else
                 .if (FLASHEND == 0x3fff)              ; 16 Kwords flash
                 .else
                 .if (FLASHEND == 0x1fff)              ; 8  Kwords flash
                 .endif
                 .endif
                 .endif
                 .endif
                 .endif
                 .equ BOOT_SIZE=0x400
                 .equ BOOT_START=FLASHEND - BOOT_SIZE + 1  ; atm128: 0xfc00, atm328: 0x3c00 
                 .equ KERNEL_START=BOOT_START - KERNEL_SIZE
                 
                 ;;;  High values for memory areas
                 .equ FLASH_HI = 0xffff - (BOOT_SIZE*2) - (KERNEL_SIZE*2)
                 .equ EEPROM_HI =PEEPROM + EEPROMEND
                 .equ RAM_HI = RAMEND
                         
                 ;;; USER AREA for the OPERATOR task
                 .equ ursize=       RETURN_STACK_SIZE
                 .equ ussize=       PARAMETER_STACK_SIZE
                 .equ utibsize=     TIB_SIZE
                 
                 ;;; User variables and area
                 .equ us0=          -28         ; Start of parameter stack
                 .equ ur0=          -26         ; Start of ret stack
                 .equ uemit=        -24         ; User EMIT vector
                 .equ ukey=         -22         ; User KEY vector
                 .equ ukeyq=        -20         ; User KEY? vector
                 .equ ubase=        -18         ; Number Base
                 .equ utib=         -16         ; TIB address
                 .equ utask=        -14         ; Task area pointer
                 .equ ustatus=      -12
                 .equ uflg=         -11
                 .equ usource=      -10         ; Two cells
                 .equ utoin=        -6          ; Input stream
                 .equ ulink=        -4          ; Task link
                 .equ ursave=       -2          ; Saved ret stack pointer
                 .equ uhp=           0          ; Hold pointer
                 
                 
                 ;;; Variables in EEPROM
                 .equ eeprom=       PEEPROM
                 .equ dp_start=     eeprom + 0x0000 ; TURNKEY
                 .equ dp_flash=     eeprom + 0x0002 ; FLASH dictionary pointer
                 .equ dp_eeprom=    eeprom + 0x0004 ; EEPROM dictionary pointer
                 .equ dp_ram=       eeprom + 0x0006 ; RAM dictionary pointer
                 .equ latest=       eeprom + 0x0008 ; Pointer to latest dictionary word
                 .equ prompt=       eeprom + 0x000a ; Deferred prompt
                 .equ ehere=        eeprom + 0x000c
                 
                 ;****************************************************
                 .dseg
000200           ibuf:         .byte PAGESIZEB
000300           ivec:         .byte INT_VECTORS_SIZE
                 
                 rxqueue0:
000372           rbuf0_wr:    .byte 1
000373           rbuf0_rd:    .byte 1
000374           rbuf0_lv:    .byte 1
000375           rbuf0:       .byte RX0_BUF_SIZE
                 
                 .ifdef UCSR1A
                 rxqueue1:
000395           rbuf1_wr:    .byte 1
000396           rbuf1_rd:    .byte 1
000397           rbuf1_lv:    .byte 1
000398           rbuf1:       .byte RX1_BUF_SIZE
                 .endif
                 
0003b8           dpSTART:    .byte 2
0003ba           dpFLASH:    .byte 2 ; DP's and LATEST in RAM
0003bc           dpEEPROM:   .byte 2
0003be           dpRAM:      .byte 2
0003c0           dpLATEST:   .byte 2
                 
0003c2           iaddrl:     .byte 1
0003c3           iaddrh:     .byte 1
                 .ifdef RAMPZ
0003c4           iaddru:	    .byte 1
0003c5           ibaseu:	    .byte 1
                 .endif
                 
                 .if IDLE_MODE == 1
                 .if CPU_LOAD == 1       
                 .endif
                 .endif
                 
0003c6           cse:        .byte 1 ; Current data section 0=flash, 1=eeprom, 2=ram
0003c7           state:      .byte 1 ; Compilation state
0003c8           uvars:      .byte   (-us0)
0003e4           up0:        .byte   2
0003e6           urbuf:      .byte   ursize
000426           usbuf:      .byte   ussize
000466           utibbuf:    .byte   utibsize
0004c0           dpdata:     .byte   2
                 
                 .eseg
                 .org 0
000000 ff ff             .dw 0xffff  ; Force first cell of eeprom to 0xffff
                 ;*******************************************************************
                 ; Start of kernel
                 ;*******************************************************************
                 .cseg
                 .if (FLASHEND == 0x1ffff)
                 .org 0x17f00
                 .else
                 .endif
                 ;***********************************************************
                 CMP:
017f00 940f f245         call    TOR
017f02 c009              rjmp    CMP2
                 CMP1:
017f03 940f ef8e         call    NEQUALSFETCH
017f05 940f f27a         call    MINUS
017f07 940f f35b         call    ZEROSENSE
017f09 f011              breq    CMP2
017f0a 940d f8b6         jmp     TWODROPZ
                 CMP2:
017f0c 940f f9e9         call    XNEXT
017f0e f7a0              brcc    CMP1
017f0f 940d f8b2         jmp     TWODROPNZ
                 .if (FLASHEND == 0x1ffff)
                 .org KERNEL_START
                 .endif
                 ; M? -- caddr count    current data space string
                 ;        dw      L_DOTBASE
                 L_MEMQ:
01ef00 2081              .db     NFA|1," "
                 MEMQ:
01ef01 940f f0d2         call    CSE_
01ef03 940f f726         call    DOLIT
01ef05 ff98              fdw     MEMQADDR_N
01ef06 940f f26d         call    PLUS
01ef08 940f f669         call    FETCH_A
01ef0a 940f f4e4         call    CFETCHPP
01ef0c 940f f726         call    DOLIT
01ef0e 000f              .dw     NFAmask
01ef0f 940d f283         jmp     AND_
                 
                 ;***********************************************************
                 ; unsigned 32/16 -> 16/16 division
                 umslashmod0:
01ef11 94e8              clt
01ef12 2388              tst  tosl
01ef13 f429              brne umslashmodstart
01ef14 2399              tst  tosh
01ef15 f419              brne umslashmodstart
01ef16 9468              set  ; Set T flag
01ef17 940d fd9b         jmp  WARM_
                 umslashmodstart:
01ef19 920f              push t2
01ef1a 921f              push t3
01ef1b 01dc              movw t4, tosl
                 
01ef1c 9019              ld t3, Y+
01ef1d 91e9              ld t6, Y+
                   
01ef1e 9189              ld tosl, Y+
01ef1f 9199              ld tosh, Y+
                 
                 ; unsigned 32/16 -> 16/16 division
                         ; set loop counter
01ef20 e100              ldi t0,$10 ;6
                 
                 umslashmod1:
                         ; shift left, saving high bit
01ef21 27ff              clr t7
01ef22 0f88              lsl tosl
01ef23 1f99              rol tosh
01ef24 1c11              rol t3
01ef25 1fee              rol t6
01ef26 1fff              rol t7
                 
                         ; try subtracting divisor
01ef27 161a              cp  t3, t4
01ef28 07eb              cpc t6, t5
01ef29 05f5              cpc t7,zero
                 
01ef2a f018              brcs umslashmod2
                 
                         ; dividend is large enough
                         ; do the subtraction for real
                         ; and set lowest bit
01ef2b 9583              inc tosl
01ef2c 1a1a              sub t3, t4
01ef2d 0beb              sbc t6, t5
                 
                 umslashmod2:
01ef2e 950a              dec  t0
01ef2f f789              brne umslashmod1 ;16=17=272
                 
                 umslashmod3:
                         ; put remainder on stack
01ef30 93ea              st -Y,t6
01ef31 921a              st -Y,t3
01ef32 901f              pop t3
01ef33 900f              pop t2
                         ; Quotient is already in tos ; 6 + 272 + 4 =282 cycles
01ef34 9508              ret
                 ;*********************************************************************
                 ; EXIT --   Compile a return
                 ;        variable link
01ef35 0000              .dw     0
                 EXIT_L:
01ef36 6584
01ef37 6978
01ef38 0074              .db     NFA|4,"exit",0
                 EXIT:
01ef39 910f              m_pop_t0
01ef3a 910f              pop     t0
01ef3b 910f              pop     t0
01ef3c 9508              ret
                 
01ef3d fb04              fdw     IFLUSH_L
                 OPERATOR_L:
01ef3e 6f88
01ef3f 6570
01ef40 6172
01ef41 6f74
01ef42 0072              .db     NFA|8,"operator",0
                 OPERATOR:
01ef43 940f f065         call    DOCREATE
01ef45 de8c              fdw     OPERATOR_AREA
                 OPERATOR_AREA:
01ef46 03e4              .dw     up0
01ef47 0000
01ef48 0040              .dw     0, ursize
01ef49 0040
01ef4a 005a              .dw     ussize, utibsize
                 
                 ; idle
01ef4b de6c              fdw(EXIT_L)
                 IDLE_L:
01ef4c 6984
01ef4d 6c64
01ef4e 0065              .db     NFA|4,"idle",0
                 IDLE:
01ef4f 6470              sbr     FLAGS2, (1<<fIDLE)
01ef50 9508              ret
                         
                 ; busy
01ef51 de98              fdw(IDLE_L)
                 BUSY_L:
01ef52 6284
01ef53 7375
01ef54 0079              .db     NFA|4,"busy",0
                 BUSY:
01ef55 7b7f              cbr     FLAGS2, (1<<fIDLE)
01ef56 9508              ret        
                 ; *********************************************
                 ; Bit masking 8 bits, only for ram addresses !
                 ; : mset ( mask addr -- )
                 ;   dup >r c@ swap or r> c!
                 ; ;
01ef57 ff62              fdw     ICCOMMA_L
                 MSET_L:
01ef58 6d84
01ef59 6573
01ef5a 0074              .db     NFA|4,"mset",0
                 MSET:
01ef5b 01fc              movw    zl, tosl
01ef5c 9189
01ef5d 9199              poptos
01ef5e 8100              ld      t0, z
01ef5f 2b08              or      t0, tosl
01ef60 8300              st      z, t0
01ef61 9189
01ef62 9199              poptos
01ef63 9508              ret
                         
                 ; : mclr  ( mask addr -- )
                 ;  dup >r c@ swap invert and r> c!
                 ; ;
01ef64 deb0              fdw     MSET_L
                 MCLR_L:
01ef65 6d84
01ef66 6c63
01ef67 0072              .db     NFA|4,"mclr",0
                 MCLR_:
01ef68 01fc              movw    zl, tosl
01ef69 9189
01ef6a 9199              poptos
01ef6b 8100              ld      t0, z
01ef6c 9580              com     tosl
01ef6d 2308              and     t0, tosl
01ef6e 8300              st      z, t0
01ef6f 9189
01ef70 9199              poptos
01ef71 9508              ret
                 
                 ;   LSHIFT      x1 u -- x2
01ef72 deca              fdw     MCLR_L
                 LSHIFT_L:
01ef73 6c86
01ef74 6873
01ef75 6669
01ef76 0074              .db     NFA|6,"lshift",0
                 LSHIFT:
01ef77 01fc              movw    zl, tosl
01ef78 9189
01ef79 9199              poptos
                 LSHIFT1:
01ef7a 9731              sbiw    zl, 1
01ef7b f01a              brmi    LSHIFT2
01ef7c 0f88              lsl     tosl
01ef7d 1f99              rol     tosh
01ef7e cffb              rjmp    LSHIFT1
                 LSHIFT2:
01ef7f 9508              ret
                 
                 ;   RSHIFT      x1 u -- x2
01ef80 dee6              fdw     LSHIFT_L
                 RSHIFT_L:
01ef81 7286
01ef82 6873
01ef83 6669
01ef84 0074              .db     NFA|6,"rshift",0
                 RSHIFT:
01ef85 01fc              movw    zl, tosl
01ef86 9189
01ef87 9199              poptos
                 RSHIFT1:
01ef88 9731              sbiw    zl, 1
01ef89 f01a              brmi    RSHIFT2
01ef8a 9596              lsr     tosh
01ef8b 9587              ror     tosl
01ef8c cffb              rjmp    RSHIFT1
                 RSHIFT2:
01ef8d 9508              ret
                 
                 ;**********************************************
                 NEQUALSFETCH:
01ef8e d555              rcall   CFETCHPP
01ef8f d2ad              rcall   ROT
01ef90 d553              rcall   CFETCHPP
01ef91 c2ab              rjmp    ROT
                 ;***************************************************
                 ; N=    c-addr nfa -- n   string:name cmp
                 ;             n=0: s1==s2, n=ffff: s1!=s2
                 ; N= is specificly used for finding dictionary entries
                 ; It can also be used for comparing strings shorter than 16 characters,
                 ; but the first string must be in ram and the second in program memory.
01ef92 df02              fdw     RSHIFT_L
                 NEQUAL_L:
01ef93 6e82
01ef94 003d              .db     NFA|2,"n=",0
                 NEQUAL:
01ef95 dff8              rcall   NEQUALSFETCH
01ef96 708f              andi    tosl, 0xf
01ef97 d352              rcall   EQUAL
01ef98 d3c2              rcall   ZEROSENSE
01ef99 f0b1              breq    NEQUAL5
01ef9a d315              rcall   ONEMINUS
01ef9b d548              rcall   CFETCHPP
01ef9c d2a8              rcall   TOR
01ef9d c00c              rjmp    NEQUAL4
                 NEQUAL2:
01ef9e dfef              rcall   NEQUALSFETCH
01ef9f d342              rcall   NOTEQUAL
01efa0 d3ba              rcall   ZEROSENSE
01efa1 f021              breq    NEQUAL3
01efa2 d72f              rcall   TRUE_
01efa3 940f f9fa         call    LEAVE
01efa5 c004              rjmp    NEQUAL4
                 NEQUAL3:
01efa6 d2b4              rcall   RFETCH
01efa7 d3b3              rcall   ZEROSENSE
01efa8 f409              brne    NEQUAL4
01efa9 d720              rcall   FALSE_
                 NEQUAL4:
01efaa 940f f9e9         call    XNEXT
01efac f788              brcc    NEQUAL2
01efad 911f              pop     t1
01efae 910f              pop     t0
01efaf c001              rjmp    NEQUAL6
                 NEQUAL5:
01efb0 d721              rcall   TRUE_
                 NEQUAL6:
01efb1 d3ea              rcall   NIP
01efb2 940d f39c         jmp     NIP
                 
                 ; SKIP   c-addr u c -- c-addr' u'
                 ;                          skip matching chars
                 ; u (count) must be smaller than 256
01efb4 df26              fdw     NEQUAL_L
                 SKIP_L:
01efb5 7384
01efb6 696b
01efb7 0070              .db     NFA|4,"skip",0
                 SKIP:
                 
01efb8 d28c              rcall   TOR
                 SKIP0:
01efb9 d3a7              rcall   DUPZEROSENSE
01efba f089              breq    SKIP2
                 
01efbb d279              rcall   OVER
01efbc d401              rcall   CFETCH_A
                 
01efbd d772              rcall   DUP
01efbe d767              rcall   DOLIT
01efbf 0009              .dw     TAB_
01efc0 d329              rcall   EQUAL
01efc1 d399              rcall   ZEROSENSE
01efc2 f429              brne    SKIP05    
01efc3 d297              rcall   RFETCH
01efc4 d325              rcall   EQUAL
01efc5 d395              rcall   ZEROSENSE
01efc6 f029              breq    SKIP2
01efc7 c001                      rjmp    SKIP1
                 SKIP05:
01efc8 d25b              rcall   DROP
                 SKIP1:
01efc9 d1cf              rcall   ONE
01efca d4c4              rcall   SLASHSTRING
01efcb cfed              rjmp    SKIP0
                 SKIP2:
01efcc 910f              pop     t0
01efcd 910f              pop     t0
01efce 9508              ret
                 
                 
                 ; SCAN   c-addr u c -- c-addr' u'
                 ;                          find matching chars
                 
                 
01efcf df6a              fdw     SKIP_L
                 SCAN_L:
01efd0 7384
01efd1 6163
01efd2 006e              .db     NFA|4,"scan",0
                 SCAN:
01efd3 d33b              rcall   STORE_P_TO_R
01efd4 d270              rcall   TOR
01efd5 c010              rjmp    SCAN3
                 SCAN1:
01efd6 d50d              rcall   CFETCHPP
01efd7 d758              rcall   DUP
01efd8 d74d              rcall   DOLIT
01efd9 0009              .dw     TAB_
01efda d30f              rcall   EQUAL
01efdb d37f              rcall   ZEROSENSE
01efdc f011              breq    SCAN2
01efdd d246              rcall   DROP
01efde c005              rjmp    SCAN25
                 SCAN2:
01efdf 940f fad2         call    FETCH_P
01efe1 d308              rcall   EQUAL
01efe2 d378              rcall   ZEROSENSE
01efe3 f011              breq    SCAN3
                 SCAN25:
01efe4 d2cb              rcall   ONEMINUS
01efe5 c003              rjmp    SCAN4
                 SCAN3:
01efe6 940f f9e9         call    XNEXT
01efe8 f768              brcc    SCAN1
                 SCAN4:
01efe9 d266              rcall   RFROM
01efea d2c0              rcall   ONEPLUS
01efeb d32f              rcall   R_TO_P
01efec 9508              ret
                 
                 ; : mtst ( mask addr -- flag )
                 ;   c@ and 
                 ; ;
01efed dfa0              fdw     SCAN_L
                 MTST_L:
01efee 6d84
01efef 7374
01eff0 0074              .db     NFA|4,"mtst",0
                 MTST:
01eff1 01fc              movw    zl, tosl
01eff2 9181              ld      tosl, z+
01eff3 9109              ld      t0, Y+
01eff4 9119              ld      t1, Y+
01eff5 2380              and     tosl, t0
01eff6 2799              clr     tosh
01eff7 9508              ret
                 
                 
01eff8 dfdc              fdw     MTST_L
                 FCY_L:
01eff9 4683
01effa 7963              .db     NFA|3,"Fcy"
01effb d069              rcall   DOCREATE
01effc 3e80              .dw     FREQ_OSC / 1000
                 
                 ;;; Check parameter stack pointer
01effd 7383
01effe 3f70              .db     NFA|3,"sp?"
                 check_sp:
01efff d08e              rcall   SPFETCH
01f000 940f f85e         call    R0_
01f002 d666              rcall   FETCH_A
01f003 940f f859         call    S0
01f005 d663              rcall   FETCH_A
01f006 d2a4              rcall   ONEPLUS
01f007 d2d0              rcall   WITHIN
01f008 d1e4              rcall   XSQUOTE
01f009 5303
01f00a 3f50              .db     3,"SP?"
01f00b d707              rcall   QABORT
01f00c 9508              ret
                 ;***************************************************
                 ; EMIT  c --    output character to the emit vector
01f00d dff2              fdw     FCY_L
                 EMIT_L:
01f00e 6584
01f00f 696d
01f010 0074              .db     NFA|4,"emit",0
                 EMIT:
01f011 d339              rcall   UEMIT_
01f012 940d f030         jmp     FEXECUTE
                 
                 ;***************************************************
                 ; KEY   -- c    get char from UKEY vector
01f014 e01c              fdw     EMIT_L
                 KEY_L:
01f015 6b83
01f016 7965              .db     NFA|3,"key"
                 KEY:
01f017 d339              rcall   UKEY_
01f018 940d f030         jmp     FEXECUTE
                 
                 ;***************************************************
                 ; KEY   -- c    get char from UKEY vector
01f01a e02a              fdw     KEY_L
                 KEYQ_L:
01f01b 6b84
01f01c 7965
01f01d 003f              .db     NFA|4,"key?",0
                 KEYQ:
01f01e d338              rcall   UKEYQ_
01f01f 940d f030         jmp     FEXECUTE
                 
01f021 e036              fdw     KEYQ_L
                 EXECUTE_L:
01f022 6587
01f023 6578
01f024 7563
01f025 6574              .db     NFA|7,"execute"
                 EXECUTE:
01f026 01fc              movw    zl, tosl
                         sub_pflash_z
01f027 9189
01f028 9199              poptos
01f029 9408              rampv_to_c
01f02a 95f7              ror     zh
01f02b 95e7              ror     zl
01f02c 9419              mijmp
                 
01f02d e044              fdw     EXECUTE_L
                 FEXECUTE_L:
01f02e 4083
01f02f 7865              .db     NFA|3,"@ex"
                 FEXECUTE:
01f030 d638              rcall   FETCH_A
01f031 940d f026         jmp     EXECUTE
                 
01f033 e05c              fdw     FEXECUTE_L
                 VARIABLE_L:
01f034 7688
01f035 7261
01f036 6169
01f037 6c62
01f038 0065              .db     NFA|8,"variable",0
                 VARIABLE_:
01f039 d0a2              rcall   HERE
01f03a d0b7              rcall   CELL
01f03b d1e1              rcall   ALLOT
01f03c 940d f050         jmp     CONSTANT_
                 
01f03e e068              fdw     VARIABLE_L
                 TWOVARIABLE_L:
01f03f 3289
01f040 6176
01f041 6972
01f042 6261
01f043 656c              .db     NFA|9,"2variable"
                 TWOVARIABLE_:
01f044 d097              rcall   HERE
01f045 d6e0              rcall   DOLIT
01f046 0004              .dw     0x4
01f047 d1d5              rcall   ALLOT
01f048 940d f050         jmp     CONSTANT_
                 
01f04a e07e              fdw     TWOVARIABLE_L
                 CONSTANT_L:
01f04b 6388
01f04c 6e6f
01f04d 7473
01f04e 6e61
01f04f 0074              .db     NFA|8,"constant",0
                 CONSTANT_:
01f050 d7a0              rcall   COLON
01f051 940f fe5c         call    LITERAL
01f053 940d f7ff         jmp     SEMICOLON
                 
01f055 e096              fdw     CONSTANT_L
                 TWOCONSTANT_L:
01f056 3289
01f057 6f63
01f058 736e
01f059 6174
01f05a 746e              .db     NFA|9,"2constant"
                 TWOCONSTANT_:
01f05b d1cf              rcall   SWOP
01f05c d794              rcall   COLON
01f05d 940f fe5c         call    LITERAL
01f05f 940f fe5c         call    LITERAL
01f061 940d f7ff         jmp     SEMICOLON
                 
                 ; DOCREATE, code action of CREATE
                 ; Fetch the next cell from program memory to the parameter stack
                 DOCREATE_L:
01f063 2883
01f064 2963              .db     NFA|3, "(c)"
                 DOCREATE:
01f065 91ff              m_pop_zh
01f066 91ff              pop     zh
01f067 91ef              pop     zl
01f068 d00f              rcall   FETCHLIT
01f069 91ff              m_pop_zh
01f06a 91ff              pop     zh
01f06b 91ef              pop     zl
01f06c 9419              mijmp
                 
                 ;;; Resolve the runtime action of the word created by using does>
                 DODOES_L:
01f06d 2883
01f06e 2964              .db     NFA|3, "(d)"
                 DODOES:
01f06f 91bf              m_pop_xh
01f070 91bf              pop     xh
01f071 91af              pop     xl
01f072 91ff              m_pop_zh
01f073 91ff              pop     zh
01f074 91ef              pop     zl
01f075 d002              rcall   FETCHLIT
01f076 01fd              movw    z, x
01f077 9419              mijmp    ; (z)
                 FETCHLIT:
01f078 939a
01f079 938a              pushtos
01f07a 0fee              lsl     zl
01f07b 1fff              rol     zh
01f07c 9187              lpm_    tosl, z+
01f07d 9197              lpm_    tosh, z+
01f07e 9508              ret
                 
01f07f 2883
01f080 292c              .db     NFA|3, "(,)"
                 DOCOMMAXT:
01f081 910f              m_pop_t0
01f082 91ff              pop     zh
01f083 91ef              pop     zl
01f084 dff3              rcall   FETCHLIT
01f085 95f7              ror     zh
01f086 95e7              ror     zl
01f087 93ef              push    zl
01f088 93ff              push    zh
01f089 930f              m_push_t0
01f08a c09a              rjmp     COMMAXT
                 
                 ;   SP@     -- addr         get parameter stack pointer
01f08b e0ac              fdw     TWOCONSTANT_L
                 SPFETCH_L:
01f08c 7383
01f08d 4070              .db     NFA|3,"sp@"
                 SPFETCH:
01f08e 01fe              movw    z, y
01f08f 939a
01f090 938a              pushtos
01f091 01cf              movw    tosl, z
01f092 9508              ret
                 
                 ;   SP!     addr --         store stack pointer
01f093 7383
01f094 2170              .db     NFA|3,"sp!"
                 SPSTORE:
01f095 01ec              movw    y, tosl
01f096 9508              ret
                 
                 ;   RPEMPTY     -- EMPTY THE RETURN STACK       
01f097 7283
01f098 3070              .db     NFA|3,"rp0"
                 RPEMPTY:
01f099 91bf              m_pop_xh
01f09a 91bf              pop     xh
01f09b 91af              pop     xl
01f09c d7c1              rcall   R0_
01f09d d5cb              rcall   FETCH_A
01f09e bf8d              out     spl, tosl
01f09f bf9e              out     sph, tosh
01f0a0 9189
01f0a1 9199              poptos
01f0a2 01fd              movw    zl, xl
01f0a3 9419              mijmp
                 
                 ;   RP@ Fetch the return stack pointer        
01f0a4 e118              fdw     SPFETCH_L
                 RPFETCH_L:
01f0a5 72b3
01f0a6 4070              .db     NFA|INLINE|COMPILE|3,"rp@"
                 RPFETCH:
01f0a7 939a
01f0a8 938a              pushtos
01f0a9 b78d              in      tosl, spl
01f0aa b79e              in      tosh, sph
01f0ab 9508              ret
                 
                 ;   ><  Swap bytes        
01f0ac e14a              fdw     RPFETCH_L
                 SWAPB_L:
01f0ad 3ea2
01f0ae 003c              .db     NFA|INLINE|2,"><",0
                 SWAPB:
01f0af 2f08              mov     t0, tosl
01f0b0 2f89              mov     tosl, tosh
01f0b1 2f90              mov     tosh, t0
01f0b2 9508              ret
                 
                 ; DICTIONARY POINTER FOR the current section
                 ; Flash -- sets the data section to flash
01f0b3 e15a              fdw     SWAPB_L
                 FLASH_L:
                 ROM_N:  
01f0b4 6685
01f0b5 616c
01f0b6 6873              .db     NFA|5,"flash"
                 ROM_:
01f0b7 9250 03c6         sts     cse, zero
01f0b9 9508              ret
                 
                 ; EEPROM -- sets the data section to EEPROM data memory
01f0ba e168              fdw     FLASH_L
                 EEPROM_L:
                 EROM_N: 
01f0bb 6586
01f0bc 7065
01f0bd 6f72
01f0be 006d              .db     NFA|6,"eeprom",0
                 EROM:
01f0bf 9270 03c6         sts     cse, r_two
01f0c1 9508              ret
                         
                 ; RAM -- sets the data section to RAM memory
01f0c2 e176              fdw     EEPROM_L
                 RAM_L:
                 FRAM_N: 
01f0c3 7283
01f0c4 6d61              .db     NFA|3,"ram"
                 FRAM:
01f0c5 e004              ldi     t0, 4
01f0c6 9300 03c6         sts     cse, t0
01f0c8 9508              ret
                 
                 ; DP    -- a-addr          
                 ; Fetched from EEPROM
01f0c9 e186              fdw     RAM_L
                 DP_L:
01f0ca 6482
01f0cb 0070              .db     NFA|2,"dp",0
                 DP:
01f0cc d6f6              rcall   IDP
01f0cd d004              rcall   CSE_
01f0ce 940d f26d         jmp     PLUS
                 
                 
                 ;;; 
01f0d0 6383
01f0d1 6573              .db     NFA|3,"cse"
                 CSE_:
01f0d2 939a
01f0d3 938a              pushtos
01f0d4 9180 03c6         lds     tosl, cse
01f0d6 2799              clr     tosh
01f0d7 9508              ret
                 
                 ; HERE    -- addr    get current data space ptr
                 ;   DP @ ;
01f0d8 e194              fdw     DP_L
                 HERE_L:
01f0d9 6884
01f0da 7265
01f0db 0065              .db     NFA|4,"here",0
                 HERE:
01f0dc dfef              rcall   DP
01f0dd 940d fed5         jmp     FETCH
                 
                 ; ,   x --             append cell to current data space
                 ;   HERE ! CELL ALLOT ;
01f0df e1b2              fdw     HERE_L
                 COMMA_L:
01f0e0 2c81              .db     NFA|1,","
                 COMMA:
01f0e1 dffa              rcall   HERE
01f0e2 d40f              rcall   STORE_A
01f0e3 d00e              rcall   CELL
01f0e4 940d f21d         jmp     ALLOT
                 
                 ; C,  c --             append char to current data space
                 ;   HERE C! 1 ALLOT ;
01f0e6 e1c0              fdw     COMMA_L 
                 CCOMMA_L:
01f0e7 6382
01f0e8 002c              .db     NFA|2,"c,",0
                 CCOMMA:
01f0e9 dff2              rcall   HERE
01f0ea d2d7              rcall   CSTORE_A
01f0eb d0ad              rcall   ONE
01f0ec 940d f21d         jmp     ALLOT
                 
                 
                 ; CELL     -- n                 size of one cell
01f0ee e1ce              fdw     CCOMMA_L
                 CELL_L:
01f0ef 6384
01f0f0 6c65
01f0f1 006c              .db     NFA|4,"cell",0
                 CELL:
01f0f2 939a
01f0f3 938a              pushtos
01f0f4 e082              ldi     tosl, 2
01f0f5 e090              ldi     tosh, 0
01f0f6 9508              ret
                 
                 ; ALIGN    --                         align DP
01f0f7 e1de              fdw     CELL_L
                 ALIGN_L:
01f0f8 6185
01f0f9 696c
01f0fa 6e67              .db     NFA|5,"align"
                 ALIGN:
01f0fb dfe0              rcall   HERE
01f0fc d008              rcall   ALIGNED
01f0fd dfce              rcall   DP
01f0fe 940d fe8a         jmp     STORE
                 
                 ; ALIGNED  addr -- a-addr       align given addr
01f100 e1f0              fdw     ALIGN_L
                 ALIGNED_L:
01f101 6187
01f102 696c
01f103 6e67
01f104 6465              .db     NFA|7,"aligned"
                 ALIGNED:
01f105 9601              adiw    tosl, 1
01f106 d61f              rcall   DOLIT
01f107 fffe              .dw     0xfffe
01f108 940d f283         jmp     AND_
                 
                 ; CELL+    a-addr1 -- a-addr2      add cell size
                 ;   2 + ;
01f10a e202              fdw     ALIGNED_L
                 CELLPLUS_L:
01f10b 63a5
01f10c 6c65
01f10d 2b6c              .db     NFA|INLINE|5,"cell+"
                 CELLPLUS:
01f10e 9602              adiw    tosl, 2
01f10f 9508              ret
                 
                 ; CELLS    n1 -- n2            cells->adrs units
01f110 e216              fdw     CELLPLUS_L
                 CELLS_L:
01f111 63a5
01f112 6c65
01f113 736c              .db     NFA|INLINE|5,"cells"
                 CELLS:
01f114 0f88              lsl     tosl
01f115 1f99              rol     tosh
01f116 9508              ret
                 
                 ; CHAR+    c-addr1 -- c-addr2   add char size
01f117 e222              fdw     CELLS_L
                 CHARPLUS_L:
01f118 63a5
01f119 6168
01f11a 2b72              .db     NFA|INLINE|5,"char+"
                 CHARPLUS:
01f11b 9601              adiw    tosl, 1
01f11c 9508              ret
                 
                 ; CHARS    n1 -- n2            chars->adrs units
01f11d e230              fdw     CHARPLUS_L
                 CHARS_L:
01f11e 63a5
01f11f 6168
01f120 7372              .db     NFA|INLINE|5,"chars"
01f121 9508      CHARS:  ret
                 
01f122 e23c              fdw     CHARS_L
                 COMMAXT_L:
01f123 6383
01f124 2c66              .db     NFA|3, "cf,"
                 COMMAXT:
01f125 d60a              rcall   DUP
01f126 d635              rcall   IHERE
01f127 d152              rcall   MINUS
01f128 d13f              rcall   ABS_ 
01f129 d5fc              rcall   DOLIT
01f12a 0ff0              .dw     0xff0
01f12b d1c8              rcall   GREATER
01f12c d22e              rcall   ZEROSENSE
01f12d f051              breq    STORECF1
                 STORECFF1: 
                 ;        rcall   CALL_
01f12e d5f7              rcall   DOLIT
                 .ifdef EIND
01f12f 940f              .dw     0x940F  ; On Atmega 2560 all code is on 128 - 256 Kword area.
                 .else
                 .endif
01f130 940f ffa9         call    ICOMMA
                         sub_pflash_tos
01f132 9408              rampv_to_c
01f133 9597              ror     tosh
01f134 9587              ror     tosl
01f135 940f ffa9         call    ICOMMA
01f137 c008              rjmp    STORECF2
                 STORECF1:
01f138 d623              rcall   IHERE
01f139 d140              rcall   MINUS
01f13a d700              rcall   TWOMINUS
01f13b d18a              rcall   TWOSLASH
                         ;rcall   RCALL_
01f13c 709f              andi    tosh, 0x0f
01f13d 6d90              ori     tosh, 0xd0
01f13e 940f ffa9         call    ICOMMA
                 STORECF2:
01f140 9508              ret
                 
                 
                 ; !COLON   --       change code field to docolon
                 ;   -6 IALLOT ; 
                 ;       .dw    link
                 ;link   set     $
01f141 2186
01f142 6f63
01f143 6f6c
01f144 006e              .db     NFA|6,"!colon",0
                 STORCOLON:
01f145 d5e0              rcall   DOLIT
01f146 fffa              .dw     0xfffa         ;  -6
01f147 940d f919         jmp     IALLOT
                 
                 
                 ; 2@    a-addr -- x1 x2            fetch 2 cells
                 ;   DUP @ SWAP CELL+ @ ;
                 ;   the lower address will appear on top of stack
01f149 e246              fdw     COMMAXT_L
                 TWOFETCH_L:
01f14a 3282
01f14b 0040              .db     NFA|2,"2@",0
                 TWOFETCH:
01f14c d5e3              rcall   DUP
01f14d d51b              rcall   FETCH_A
01f14e d0dc              rcall   SWOP
01f14f dfbe              rcall   CELLPLUS
01f150 940d f669         jmp     FETCH_A
                 
                 ; 2!    x1 x2 a-addr --            store 2 cells
                 ;   SWAP OVER ! CELL+ ! ;
                 ;   the top of stack is stored at the lower adrs
01f152 e294              fdw     TWOFETCH_L
                 TWOSTORE_L:
01f153 3282
01f154 0021              .db     NFA|2,"2!",0
                 TWOSTORE:
01f155 d0d5              rcall   SWOP
01f156 d0de              rcall   OVER
01f157 dfb6              rcall   CELLPLUS
01f158 d399              rcall   STORE_A
01f159 940d fe8a         jmp     STORE
                 
                 ; 2DROP  x1 x2 --                   drop 2 cells
                 ;   DROP DROP ;
01f15b e2a6              fdw     TWOSTORE_L
                 TWODROP_L:
01f15c 3285
01f15d 7264
01f15e 706f              .db     NFA|5,"2drop"
                 TWODROP:
01f15f d0c4              rcall   DROP
01f160 940d f224         jmp     DROP
                 
                 ; 2DUP   x1 x2 -- x1 x2 x1 x2    dup top 2 cells
                 ;   OVER OVER ;
01f162 e2b8              fdw     TWODROP_L
                 TWODUP_L:
01f163 3284
01f164 7564
01f165 0070              .db     NFA|4,"2dup",0
                 TWODUP:
01f166 d0ce              rcall   OVER
01f167 940d f235         jmp     OVER
                 
                 ; 2SWAP   x1 x2 x3 x4 -- x3 x4 x1 x2    dup top 2 cells
01f169 e2c6              fdw     TWODUP_L
                 TWOSWAP_L:
01f16a 3285
01f16b 7773
01f16c 7061              .db     NFA|5,"2swap"
                 TWOSWAP:
01f16d d0cf              rcall   ROT
01f16e d0d6              rcall   TOR
01f16f d0cd              rcall   ROT
01f170 d0df              rcall   RFROM
01f171 9508              ret
                 
                 ; INPUT/OUTPUT ==================================
                 
                 ; SPACE   --                      output a space
                 ;   BL EMIT ;
01f172 e2d4              fdw     TWOSWAP_L
                 SPACE_L:
01f173 7385
01f174 6170
01f175 6563              .db     NFA|5,"space"
                 SPACE_:  
01f176 d6c9              rcall   BL
01f177 940d f011         jmp     EMIT
                 
                 ; SPACES   n --                  output n spaces
                 ;   BEGIN DUP WHILE SPACE 1- REPEAT DROP ;
01f179 e2e6              fdw     SPACE_L
                 SPACES_L:
01f17a 7386
01f17b 6170
01f17c 6563
01f17d 0073              .db     NFA|6,"spaces",0
                 SPACES:
                 SPCS1:
01f17e d1e2              rcall   DUPZEROSENSE
01f17f f019              breq    SPCS2
01f180 dff5              rcall   SPACE_
01f181 d12e              rcall   ONEMINUS
01f182 cffb              rjmp    SPCS1
01f183 940d f224 SPCS2:  jmp     DROP
                 
                 
                 ; umin     u1 u2 -- u           unsigned minimum
                 ;   2DUP U> IF SWAP THEN DROP ;
01f185 e2f4              fdw     SPACES_L
                 UMIN_L:
01f186 7584
01f187 696d
01f188 006e              .db     NFA|4,"umin",0
                 UMIN:
01f189 dfdc              rcall   TWODUP
01f18a d176              rcall   UGREATER
01f18b c006              rjmp    MINMAX
                 
                 ; umax    u1 u2 -- u            unsigned maximum
                 ;   2DUP U< IF SWAP THEN DROP ;
01f18c e30c              fdw     UMIN_L
                 UMAX_L:
01f18d 7584
01f18e 616d
01f18f 0078              .db     NFA|4,"umax",0
                 UMAX:
01f190 dfd5              rcall   TWODUP
01f191 d168              rcall   ULESS
                 MINMAX:
01f192 d1c8              rcall   ZEROSENSE
01f193 f009              breq    UMAX1
01f194 d096              rcall   SWOP
01f195 940d f224 UMAX1:  jmp     DROP
                 
01f197 e31a              fdw     UMAX_L
                 ONE_L:
01f198 3181              .db     NFA|INLINE4|1,"1"
                 ONE:
01f199 939a
01f19a 938a              pushtos
01f19b e081              ldi     tosl, 1
01f19c e090              ldi     tosh, 0
01f19d 9508              ret
                 
                 ; ACCEPT  c-addr +n -- +n'  get line from terminal
01f19e e330              fdw     ONE_L
                 ACCEPT_L:
01f19f 6186
01f1a0 6363
01f1a1 7065
01f1a2 0074              .db     NFA|6,"accept",0
                 ACCEPT:
01f1a3 d091              rcall   OVER
01f1a4 d0c8              rcall   PLUS
01f1a5 d08f              rcall   OVER
                 ACC1:
01f1a6 de70              rcall   KEY
                 
01f1a7 308d              cpi     tosl, CR_
01f1a8 f429              brne    ACC_LF
                         
01f1a9 d528              rcall   TRUE_
01f1aa d02f              rcall   FCR
01f1ab d216              rcall   CSTORE_A
01f1ac d077              rcall   DROP
01f1ad c026              rjmp    ACC6
                 ACC_LF:
01f1ae 308a              cpi     tosl, LF_
01f1af f449              brne    ACC2
01f1b0 d073              rcall   DROP
                 
01f1b1 d028              rcall   FCR
01f1b2 d20b              rcall   CFETCH_A
01f1b3 d1a7              rcall   ZEROSENSE
01f1b4 f0f9              breq    ACC6
01f1b5 d514              rcall   FALSE_
01f1b6 d023              rcall   FCR
01f1b7 d20a              rcall   CSTORE_A
01f1b8 cfed              rjmp    ACC1
                 ACC2:
01f1b9 d510              rcall   FALSE_
01f1ba d01f              rcall   FCR
01f1bb d206              rcall   CSTORE_A
01f1bc d573              rcall   DUP
01f1bd de53              rcall   EMIT
01f1be d571              rcall   DUP
01f1bf d566              rcall   DOLIT
01f1c0 0008              .dw     BS_
01f1c1 d128              rcall   EQUAL
01f1c2 d198              rcall   ZEROSENSE
01f1c3 f039              breq    ACC3
01f1c4 d05f              rcall   DROP
01f1c5 d0ea              rcall   ONEMINUS
01f1c6 d07e              rcall   TOR
01f1c7 d06d              rcall   OVER
01f1c8 d087              rcall   RFROM
01f1c9 dfc6              rcall   UMAX
01f1ca cfdb              rjmp    ACC1
                 ACC3:
01f1cb d069              rcall   OVER
01f1cc d1f5              rcall   CSTORE_A
01f1cd d0dd              rcall   ONEPLUS
01f1ce d066              rcall   OVER
01f1cf dfb9              rcall   UMIN
01f1d0 df95              rcall   TWODUP
01f1d1 d110              rcall   NOTEQUAL
01f1d2 d188              rcall   ZEROSENSE
01f1d3 f691              brne     ACC1
                 ACC6:
01f1d4 d1c7              rcall   NIP
01f1d5 d055              rcall   SWOP
01f1d6 940d f27a         jmp     MINUS
                 
01f1d8 6683
01f1d9 7263              .db     NFA|3,"fcr"
                 FCR:
01f1da d2a0              rcall   DOUSER
01f1db fff5              .dw     uflg
                 
                 
                 ; TYPE    c-addr u --   type line to terminal u < $100
                 ; : type for c@+ emit next drop ;
                 
01f1dc e33e              fdw      ACCEPT_L
                 TYPE_L:
01f1dd 7484
01f1de 7079
01f1df 0065              .db     NFA|4,"type",0
                 TYPE:
01f1e0 d064              rcall   TOR
01f1e1 c002              rjmp    TYPE2       ; XFOR
                 TYPE1:  
01f1e2 d301              rcall   CFETCHPP
01f1e3 de2d              rcall   EMIT
                 TYPE2:
01f1e4 940f f9e9         call    XNEXT
01f1e6 f7d8              brcc    TYPE1
01f1e7 911f              pop     t1
01f1e8 910f              pop     t0
01f1e9 940d f224         jmp     DROP
                 
                 
                 ; (S"    -- c-addr u      run-time code for S"
01f1eb 2883
01f1ec 2273              .db      NFA|3,"(s",0x22
                 XSQUOTE:
01f1ed 91ff              m_pop_zh
01f1ee d06c              rcall   RFETCH
01f1ef 0f88              lsl     tosl
01f1f0 1f99              rol     tosh
                         add_pflash_tos
01f1f1 d2f2              rcall   CFETCHPP
01f1f2 d53d              rcall   DUP
01f1f3 d0b7              rcall   ONEPLUS
01f1f4 df10              rcall   ALIGNED
01f1f5 9596              lsr     tosh
01f1f6 9587              ror     tosl
01f1f7 d058              rcall   RFROM
01f1f8 d074              rcall   PLUS
01f1f9 01fc              movw    zl, tosl
01f1fa d029              rcall   DROP
01f1fb 9419              mijmp
                 
01f1fc e3ba              fdw     TYPE_L
                 SQUOTE_L:
01f1fd 73d2
01f1fe 0022              .db      NFA|IMMED|COMPILE|2,"s",0x22,0
                 SQUOTE:
01f1ff de81              rcall   DOCOMMAXT
01f200 e3da              fdw     XSQUOTE
01f201 deb5              rcall   ROM_
01f202 d005              rcall   CQUOTE
01f203 940d f0c5         jmp     FRAM
                 
01f205 e3fa              fdw     SQUOTE_L
                 CQUOTE_L:
01f206 2c82
01f207 0022              .db     NFA|2,",",0x22,0
                 CQUOTE: 
01f208 d51d              rcall   DOLIT
01f209 0022              .dw     0x22
01f20a d297              rcall   PARSE
01f20b ded0              rcall   HERE
01f20c d028              rcall   OVER
01f20d d09d              rcall   ONEPLUS
01f20e def6              rcall   ALIGNED
01f20f d00d              rcall   ALLOT
01f210 940d f4db         jmp     PLACE
                 
                 
01f212 e40c              fdw     CQUOTE_L
                 DOTQUOTE_L:
01f213 2ed2
01f214 0022              .db      NFA|IMMED|COMPILE|2,".",0x22,0
                 DOTQUOTE:
01f215 dfe9              rcall   SQUOTE
01f216 de6a              rcall   DOCOMMAXT
01f217 e3c0              fdw     TYPE
01f218 9508              ret
                 
01f219 e426              fdw     DOTQUOTE_L
                 ALLOT_L:
01f21a 6185
01f21b 6c6c
01f21c 746f              .db     NFA|5,"allot"
                 ALLOT:
01f21d deae              rcall   DP
01f21e 940d f2cc         jmp     PLUSSTORE
                 
01f220 e434              fdw     ALLOT_L
                 DROP_L:
01f221 64a4
01f222 6f72
01f223 0070              .db     NFA|INLINE|4,"drop",0
                 DROP:
01f224 9189
01f225 9199              poptos
01f226 9508              ret
                 
01f227 e442              fdw     DROP_L
                 SWOP_L:
01f228 7384
01f229 6177
01f22a 0070              .db     NFA|INLINE5|4,"swap",0
                 SWOP:
01f22b 9109              ld      t0, y+
01f22c 9119              ld      t1, y+
01f22d 939a
01f22e 938a              pushtos
01f22f 01c8              movw    tosl, t0
01f230 9508              ret
                 
01f231 e450              fdw     SWOP_L
                 OVER_L:
01f232 6f84
01f233 6576
01f234 0072              .db     NFA|INLINE4|4,"over",0
                 OVER:
01f235 939a
01f236 938a              pushtos
01f237 818a              ldd     tosl, y+2
01f238 819b              ldd     tosh, y+3
01f239 9508              ret
                 
01f23a e464              fdw     OVER_L
                 ROT_L:
01f23b 7283
01f23c 746f              .db     NFA|3, "rot"
                 ROT:
01f23d d007              rcall   TOR
01f23e dfec              rcall   SWOP
01f23f d010              rcall   RFROM
01f240 940d f22b         jmp     SWOP
                 
01f242 e476              fdw     ROT_L
                 TOR_L:
01f243 3e92
01f244 0072              .db     NFA|COMPILE|2,">r",0
                 TOR:
01f245 91ff              m_pop_zh
01f246 91ff              pop     zh
01f247 91ef              pop     zl
01f248 938f              push    tosl
01f249 939f              push    tosh
01f24a 9189
01f24b 9199              poptos
01f24c 9419              mijmp
                 
01f24d e486              fdw     TOR_L
                 RFROM_L:
01f24e 7292
01f24f 003e              .db     NFA|COMPILE|2,"r>",0
                 RFROM:
01f250 91ff              m_pop_zh
01f251 91ff              pop     zh
01f252 91ef              pop     zl
01f253 939a
01f254 938a              pushtos
01f255 919f              pop     tosh
01f256 918f              pop     tosl
01f257 9419              mijmp
                 
01f258 e49c              fdw     RFROM_L
                 RFETCH_L:
01f259 7292
01f25a 0040              .db     NFA|COMPILE|2,"r@",0
                 RFETCH:
01f25b 91ff              m_pop_zh
01f25c 91ff              pop     zh
01f25d 91ef              pop     zl
01f25e 939a
01f25f 938a              pushtos
01f260 919f              pop     tosh
01f261 918f              pop     tosl
01f262 938f              push    tosl
01f263 939f              push    tosh
01f264 9419              mijmp
                 
                 
                 ;   ABS     n   --- n1      absolute value of n
01f265 ee5c              fdw     DUP_L
                 ABS_L:
01f266 6183
01f267 7362              .db     NFA|3,"abs"
                 ABS_:
01f268 d4c7              rcall   DUP
01f269 940d f3ab         jmp     QNEGATE
                 
01f26b e4cc              fdw     ABS_L
                 PLUS_L:
01f26c 2b81              .db     NFA|INLINE4|1, "+"
                 
                 PLUS:
01f26d 9109              ld      t0, Y+        
01f26e 9119              ld      t1, Y+
01f26f 0f80              add     tosl, t0
01f270 1f91              adc     tosh, t1
01f271 9508              ret
                 
                 ; m+  ( d n -- d1 )
01f272 e4d8              fdw     PLUS_L
                 MPLUS_L:
01f273 6d82
01f274 002b              .db     NFA|2, "m+",0
                 MPLUS:
01f275 d797              rcall   STOD
01f276 940d fa2f         jmp     DPLUS
                 
01f278 e4e6              fdw     MPLUS_L
                 MINUS_L:
01f279 2d81              .db     NFA|INLINE5|1, "-"
                 MINUS:
01f27a 9109              ld      t0, Y+
01f27b 9119              ld      t1, Y+
01f27c 1b08              sub     t0, tosl
01f27d 0b19              sbc     t1, tosh
01f27e 01c8              movw    tosl, t0
01f27f 9508              ret
                 
01f280 e4f2              fdw     MINUS_L
                 AND_L:
01f281 6183
01f282 646e              .db     NFA|INLINE4|3, "and"
                 AND_:
01f283 9109              ld      t0, Y+
01f284 9119              ld      t1, Y+
01f285 2380              and     tosl, t0
01f286 2391              and     tosh, t1
01f287 9508              ret
                 
01f288 e502              fdw     AND_L
                 OR_L:
01f289 6f82
01f28a 0072              .db     NFA|INLINE4|2, "or",0
                 OR_:
01f28b 9109              ld      t0, Y+
01f28c 9119              ld      t1, Y+
01f28d 2b80              or      tosl, t0
01f28e 2b91              or      tosh, t1
01f28f 9508              ret
                 
01f290 e512              fdw     OR_L
                 XOR_L:
01f291 7883
01f292 726f              .db     NFA|INLINE4|3, "xor"
                 XOR_:
01f293 9109              ld      t0, Y+
01f294 9119              ld      t1, Y+
01f295 2780              eor     tosl, t0
01f296 2791              eor     tosh, t1
01f297 9508              ret
                 
01f298 e522              fdw     XOR_L
                 INVERT_L:
01f299 69a6
01f29a 766e
01f29b 7265
01f29c 0074              .db     NFA|INLINE|6, "invert",0
                 INVERT:
01f29d 9580              com     tosl
01f29e 9590              com     tosh
01f29f 9508              ret
                 
01f2a0 e532              fdw     INVERT_L
                 NEGATE_L:
01f2a1 6e86
01f2a2 6765
01f2a3 7461
01f2a4 0065              .db     NFA|6, "negate",0
                 NEGATE:
01f2a5 dff7              rcall   INVERT
01f2a6 940d f2ab         jmp     ONEPLUS
                 
01f2a8 e542              fdw     NEGATE_L
                 ONEPLUS_L:
01f2a9 31a2
01f2aa 002b              .db     NFA|INLINE|2, "1+",0
                 ONEPLUS:
01f2ab 9601              adiw    tosl, 1
01f2ac 9508              ret
                 
01f2ad e552              fdw     ONEPLUS_L
                 ONEMINUS_L:
01f2ae 31a2
01f2af 002d              .db     NFA|INLINE|2, "1-",0
                 ONEMINUS:
01f2b0 9701              sbiw    tosl, 1
01f2b1 9508              ret
                 
01f2b2 e55c              fdw     ONEMINUS_L
                 TWOPLUS_L:
01f2b3 32a2
01f2b4 002b              .db     NFA|INLINE|2, "2+",0
                 TWOPLUS:
01f2b5 9602              adiw    tosl, 2
01f2b6 9508              ret
                 
01f2b7 e566              fdw     TWOPLUS_L
                 TOBODY_L:
01f2b8 3ea5
01f2b9 6f62
01f2ba 7964              .db     NFA|INLINE|5, ">body"
                 TOBODY:
01f2bb 9604              adiw    tosl, 4
01f2bc 9508              ret
                 
01f2bd e570              fdw     TOBODY_L
                 TWOSTAR_L:
01f2be 32a2
01f2bf 002a              .db     NFA|INLINE|2, "2*",0
                 TWOSTAR:
01f2c0 0f88              lsl     tosl
01f2c1 1f99              rol     tosh
01f2c2 9508              ret
                 
01f2c3 e57c              fdw     TWOSTAR_L
                 TWOSLASH_L:
01f2c4 32a2
01f2c5 002f              .db     NFA|INLINE|2, "2/",0
                 TWOSLASH:
01f2c6 9595              asr     tosh
01f2c7 9587              ror     tosl
01f2c8 9508              ret
                 
01f2c9 e588              fdw     TWOSLASH_L
                 PLUSSTORE_L:
01f2ca 2b82
01f2cb 0021              .db     NFA|2,"+!",0
                 PLUSSTORE:
01f2cc df5e              rcall   SWOP
01f2cd df67              rcall   OVER
01f2ce d39a              rcall   FETCH_A
01f2cf df9d              rcall   PLUS
01f2d0 df5a              rcall   SWOP
01f2d1 940d fe8a         jmp     STORE
                 
01f2d3 e594              fdw     PLUSSTORE_L
                 WITHIN_L:
01f2d4 7786
01f2d5 7469
01f2d6 6968
01f2d7 006e              .db     NFA|6,"within",0
                 WITHIN:
01f2d8 df5c              rcall   OVER
01f2d9 dfa0              rcall   MINUS
01f2da df6a              rcall   TOR
01f2db df9e              rcall   MINUS
01f2dc df73              rcall   RFROM
01f2dd 940d f2fa         jmp     ULESS
                 
01f2df e5a8              fdw     WITHIN_L
                 NOTEQUAL_L:
01f2e0 3c82
01f2e1 003e              .db     NFA|2,"<>",0
                 NOTEQUAL:
01f2e2 df97              rcall   MINUS           ; MINUS leaves a valid zero flag
01f2e3 ef9f              ser     tosh
01f2e4 ef8f              ser     tosl
01f2e5 f409              brne    NOTEQUAL1
01f2e6 9601              adiw    tosl,1
                 NOTEQUAL1:
01f2e7 9508              ret
                 
01f2e8 ee76              fdw     ZEROLESS_L
                 EQUAL_L:
01f2e9 3d81              .db     NFA|1, "="
                 EQUAL:
01f2ea df8f              rcall   MINUS
01f2eb 940d f736         jmp     ZEROEQUAL
                 
                 
01f2ed e5d2              fdw     EQUAL_L
                 LESS_L:
01f2ee 3c81              .db     NFA|1,"<"
                 LESS:
01f2ef df8a              rcall   MINUS
01f2f0 940d f73d         jmp     ZEROLESS
                 
01f2f2 e5dc              fdw     LESS_L
                 GREATER_L:
01f2f3 3e81              .db     NFA|1,">"
                 GREATER:
01f2f4 df36              rcall   SWOP
01f2f5 940d f2ef         jmp     LESS
                 
01f2f7 e5e6              fdw     GREATER_L
                 ULESS_L:
01f2f8 7582
01f2f9 003c              .db     NFA|2,"u<",0
                 ULESS:
01f2fa df7f              rcall   MINUS       ; Carry is valid after MINUS
01f2fb 0b88              sbc     tosl, tosl
01f2fc 0b99              sbc     tosh, tosh
01f2fd 9508              ret
                 
01f2fe e5f0              fdw     ULESS_L
                 UGREATER_L:
01f2ff 7582
01f300 003e              .db     NFA|2, "u>",0
                 UGREATER:
01f301 df29              rcall   SWOP
01f302 940d f2fa         jmp     ULESS
                 
01f304 e5fe              fdw     UGREATER_L
                 STORE_P_L:
01f305 2182
01f306 0070              .db     NFA|2,"!p",0
                 STORE_P:
01f307 01ac              movw    pl, tosl
01f308 9189
01f309 9199              poptos
01f30a 9508              ret
                 
01f30b e60a              fdw     STORE_P_L
                 STORE_P_TO_R_L:
01f30c 2194
01f30d 3e70
01f30e 0072              .db     NFA|COMPILE|4,"!p>r",0
                 STORE_P_TO_R:
01f30f 91ff              m_pop_zh
01f310 91ff              pop     zh
01f311 91ef              pop     zl
01f312 934f              push    pl
01f313 935f              push    ph
01f314 01ac              movw    pl, tosl
01f315 9189
01f316 9199              poptos
01f317 9419              mijmp
                 
01f318 e618              fdw     STORE_P_TO_R_L
                 R_TO_P_L:
01f319 7293
01f31a 703e              .db     NFA|COMPILE|3,"r>p"
                 R_TO_P:
01f31b 91ff              m_pop_zh
01f31c 91ff              pop     zh
01f31d 91ef              pop     zl
01f31e 915f              pop     ph
01f31f 914f              pop     pl
01f320 9419              mijmp
                 
01f321 e632              fdw     R_TO_P_L
                 PFETCH_L:
01f322 7082
01f323 0040              .db     NFA|2,"p@",0
                 PFETCH:
01f324 939a
01f325 938a              pushtos
01f326 01ca              movw    tosl, pl
01f327 940d fed5         jmp     FETCH
                 
01f329 e644              fdw     PFETCH_L
                 PSTORE_L:
01f32a 7082
01f32b 0021              .db     NFA|2,"p!",0
                 PSTORE:
01f32c 939a
01f32d 938a              pushtos
01f32e 01ca              movw    tosl, pl
01f32f 940d fe8a         jmp     STORE
                 
01f331 e654              fdw     PSTORE_L
                 PCSTORE_L:
01f332 7083
01f333 2163              .db     NFA|3,"pc!"
                 PCSTORE:
01f334 939a
01f335 938a              pushtos
01f336 01ca              movw    tosl, pl
01f337 940d ff25         jmp     CSTORE
                 
01f339 e664              fdw     PCSTORE_L
                 PPLUS_L:
01f33a 70a2
01f33b 002b              .db     NFA|INLINE|2,"p+",0
                 PPLUS:
01f33c 0d46              add     pl, r_one
01f33d 1d55              adc     ph, zero
01f33e 9508              ret   
                 
01f33f e674              fdw     PPLUS_L
                 PNPLUS_L:
01f340 7083
01f341 2b2b              .db     NFA|3,"p++"
                 PNPLUS:
01f342 0f48              add     pl, tosl
01f343 1f59              adc     ph, tosh
01f344 9189
01f345 9199              poptos
01f346 9508              ret
                 
01f347 e680              fdw     PNPLUS_L
                 UEMIT_L:
01f348 2785
01f349 6d65
01f34a 7469              .db     NFA|5,"'emit"
                 UEMIT_:
01f34b d12f              rcall   DOUSER
01f34c ffe8              .dw     uemit
                         
01f34d e690              fdw     UEMIT_L
                 UKEY_L:
01f34e 2784
01f34f 656b
01f350 0079              .db     NFA|4,"'key",0
                 UKEY_:
01f351 d129              rcall   DOUSER
01f352 ffea              .dw     ukey
                 
01f353 e69c              fdw     UKEY_L
                 UKEYQ_L:
01f354 2785
01f355 656b
01f356 3f79              .db     NFA|5,"'key?"
                 UKEYQ_:
01f357 d123              rcall   DOUSER
01f358 ffec              .dw     ukeyq
                 
01f359 3f83
01f35a 3d30              .db     NFA|3,"?0="
                 ZEROSENSE:
01f35b 9700              sbiw    tosl, 0
01f35c 9189
01f35d 9199              poptos
01f35e 9508              ret
                 
01f35f 6483
01f360 3d30              .db     NFA|3,"d0="
                 DUPZEROSENSE:
01f361 9700              sbiw    tosl, 0
01f362 9508              ret
                 
01f363 e6a8              fdw     UKEYQ_L
                 UMSTAR_L:
01f364 7583
01f365 2a6d              .db     NFA|3,"um*"
                 UMSTAR:
01f366 940d ffcf         jmp     umstar0
                 
01f368 e6c8              fdw     UMSTAR_L
                 UMSLASHMOD_L:
01f369 7586
01f36a 2f6d
01f36b 6f6d
01f36c 0064              .db     NFA|6,"um/mod",0
                 UMSLASHMOD:
01f36d 940d ef11         jmp     umslashmod0
                 
                 
01f36f e6d2              fdw     UMSLASHMOD_L
                 USLASHMOD_L:
01f370 7585
01f371 6d2f
01f372 646f              .db     NFA|5,"u/mod"
                 USLASHMOD:
01f373 d356              rcall   FALSE_
01f374 deb6              rcall   SWOP
01f375 940d ef11         jmp     umslashmod0
                 
01f377 e6e0              fdw     USLASHMOD_L
                 STAR_L:
01f378 2a81              .db     NFA|1,"*"
                 STAR: 
01f379 dfec              rcall   UMSTAR
01f37a 940d f224         jmp     DROP
                 
01f37c e6f0              fdw     STAR_L
                 USLASH_L:
01f37d 7582
01f37e 002f              .db     NFA|2,"u/",0
                 USLASH:
01f37f dff3              rcall   USLASHMOD
01f380 940d f39c         jmp     NIP
                 
01f382 e6fa              fdw     USLASH_L
                 USSMOD_L:
01f383 7586
01f384 2f2a
01f385 6f6d
01f386 0064              .db     NFA|6,"u*/mod",0
                 USSMOD:
01f387 debd              rcall   TOR
01f388 dfdd              rcall   UMSTAR
01f389 dec6              rcall   RFROM
01f38a 940d f36d         jmp     UMSLASHMOD
                 
                 
01f38c e706              fdw     USSMOD_L
                 SLASH_L:
01f38d 2f81              .db     NFA|1,"/"
                 SLASH: 
01f38e ddd7              rcall   TWODUP
01f38f df03              rcall   XOR_
01f390 deb4              rcall   TOR
01f391 ded6              rcall   ABS_
01f392 de98              rcall   SWOP
01f393 ded4              rcall   ABS_
01f394 de96              rcall   SWOP
01f395 dfe9              rcall   USLASH
01f396 deb9              rcall   RFROM
01f397 940d f3ab         jmp     QNEGATE
                 
01f399 e71a              fdw     SLASH_L
                 NIP_L:
01f39a 6ea3
01f39b 7069              .db     NFA|INLINE|3,"nip"
                 NIP:
01f39c 9109              ld      t0, y+
01f39d 9109              ld      t0, y+
01f39e 9508              ret
                     
01f39f e734              fdw     NIP_L
                 TUCK_L:
01f3a0 7484
01f3a1 6375
01f3a2 006b              .db     NFA|4,"tuck",0
                 TUCK:
01f3a3 de87              rcall   SWOP
01f3a4 940d f235         jmp     OVER
                 
01f3a6 e740              fdw     TUCK_L
                 QNEGATE_L:
01f3a7 3f87
01f3a8 656e
01f3a9 6167
01f3aa 6574              .db     NFA|7,"?negate"
                 QNEGATE:
01f3ab d391              rcall   ZEROLESS
01f3ac dfae              rcall   ZEROSENSE
01f3ad f009              breq    QNEGATE1
01f3ae def6              rcall   NEGATE
                 QNEGATE1:
01f3af 9508              ret
                 
01f3b0 e74e              fdw     QNEGATE_L
                 MAX_L:
01f3b1 6d83
01f3b2 7861              .db     NFA|3,"max"
01f3b3 ddb2      MAX:    rcall   TWODUP
01f3b4 df3a              rcall   LESS
01f3b5 cddc              rjmp    MINMAX
                 
01f3b6 e762              fdw     MAX_L
                 MIN_L:
01f3b7 6d83
01f3b8 6e69              .db     NFA|3,"min"
01f3b9 ddac      MIN:    rcall   TWODUP
01f3ba df39              rcall   GREATER
01f3bb cdd6              rjmp    MINMAX
                 
01f3bc 6382
01f3bd 0040              .db     NFA|2,"c@",0
                 CFETCH_A:       
01f3be 940d ff02         jmp     CFETCH
                 
01f3c0 6382
01f3c1 0021              .db     NFA|2,"c!",0
                 CSTORE_A:       
01f3c2 940d ff25         jmp     CSTORE
                 
01f3c4 e76e              fdw     MIN_L
                 UPTR_L:
01f3c5 7582
01f3c6 0070              .db     NFA|2,"up",0
01f3c7 dc9d      UPTR:   rcall   DOCREATE
01f3c8 0002              .dw     2 ; upl
                 
01f3c9 e78a              fdw     UPTR_L
                 HOLD_L:
01f3ca 6884
01f3cb 6c6f
01f3cc 0064              .db     NFA|4,"hold",0
01f3cd d304      HOLD:   rcall   TRUE_
01f3ce d092              rcall   HP
01f3cf defc              rcall   PLUSSTORE
01f3d0 d090              rcall   HP
01f3d1 d297              rcall   FETCH_A
01f3d2 940d ff25         jmp     CSTORE
                 
                 ; <#    --              begin numeric conversion
                 ;   PAD HP ! ;          (initialize Hold Pointer)
01f3d4 e794              fdw     HOLD_L
                 LESSNUM_L:
01f3d5 3c82
01f3d6 0023              .db     NFA|2,"<#",0
                 LESSNUM: 
01f3d7 d08e              rcall   PAD
01f3d8 d088              rcall   HP
01f3d9 940d fe8a         jmp     STORE
                 
                 ; digit   n -- c            convert to 0..9a..z
01f3db e7aa              fdw     LESSNUM_L
                 TODIGIT_L:
01f3dc 6485
01f3dd 6769
01f3de 7469              .db     NFA|5,"digit"
                 TODIGIT:
01f3df 308a              cpi     tosl, 0xa
01f3e0 f00c              brlt    TODIGIT1
01f3e1 9687              adiw    tosl, 0x27
                 TODIGIT1:
01f3e2 96c0              adiw    tosl, 0x30
01f3e3 9508              ret
                 
                 ; #     ud1 -- ud2     convert 1 digit of output
                 ;   base @ ud/mod rot >digit hold ;
01f3e4 e7b8              fdw     TODIGIT_L
                 NUM_L:
01f3e5 2381              .db     NFA|1,"#"
                 NUM:
01f3e6 d087              rcall   BASE
01f3e7 d281              rcall   FETCH_A
01f3e8 d185              rcall   UDSLASHMOD
01f3e9 de53              rcall   ROT
01f3ea dff4              rcall   TODIGIT
01f3eb 940d f3cd         jmp     HOLD
                 
                 ; #S    ud1 -- ud2      convert remaining digits
                 ;   begin # 2dup or 0= until ;
01f3ed e7ca              fdw     NUM_L
                 NUMS_L:
01f3ee 2382
01f3ef 0073              .db     NFA|2,"#s",0
                 NUMS:
01f3f0 dff5              rcall   NUM
01f3f1 dd74              rcall   TWODUP
01f3f2 de98              rcall   OR_
01f3f3 df67              rcall   ZEROSENSE
01f3f4 f7d9              brne    NUMS
01f3f5 9508              ret
                 
                 ; #>    ud1 -- c-addr u    end conv., get string
                 ;   2drop hp @ pad over - ;
01f3f6 e7dc              fdw     NUMS_L
                 NUMGREATER_L:
01f3f7 2382
01f3f8 003e              .db     NFA|2,"#>", 0
                 NUMGREATER:
01f3f9 dd65              rcall   TWODROP
01f3fa d066              rcall   HP
01f3fb d26d              rcall   FETCH_A
01f3fc d069              rcall   PAD
01f3fd de37              rcall   OVER
01f3fe 940d f27a         jmp     MINUS
                 
                 ; SIGN  n --               add minus sign if n<0
                 ;   0< IF 2D HOLD THEN ; 
01f400 e7ee              fdw     NUMGREATER_L
                 SIGN_L:
01f401 7384
01f402 6769
01f403 006e              .db     NFA|4,"sign",0
                 SIGN:
01f404 3090              cpi     tosh, 0
01f405 f41a              brpl    SIGN1
01f406 d31f              rcall   DOLIT
01f407 002d              .dw     0x2D
01f408 dfc4              rcall   HOLD
                 SIGN1:
01f409 940d f224         jmp     DROP
                 
                 ; U.    u --                  display u unsigned
                 ;   <# 0 #S #> TYPE SPACE ;
01f40b e802              fdw     SIGN_L
                 UDOT_L:
01f40c 7582
01f40d 002e              .db     NFA|2,"u.",0
                 UDOT:
01f40e dfc8              rcall   LESSNUM
01f40f d2ba              rcall   FALSE_
01f410 dfdf              rcall   NUMS
01f411 dfe7              rcall   NUMGREATER
01f412 ddcd              rcall   TYPE
01f413 940d f176         jmp     SPACE_
                 
                 
                 ; U.R    u +n --      display u unsigned in field of n. 1<n<=255 
                 ;    0 swap <# 1- for # next #s #> type space ;
01f415 e818              fdw     UDOT_L
                 UDOTR_L:
01f416 7583
01f417 722e              .db     NFA|3,"u.r"
                 UDOTR:
01f418 dfbe              rcall   LESSNUM
01f419 de96              rcall   ONEMINUS
01f41a de2a              rcall   TOR
01f41b d2ae              rcall   FALSE_
01f41c c001              rjmp    UDOTR2
                 UDOTR1:
01f41d dfc8              rcall   NUM
                 UDOTR2: 
01f41e d5ca              rcall   XNEXT
01f41f f7e8              brcc    UDOTR1
01f420 911f              pop     t1
01f421 910f              pop     t0
01f422 dfcd              rcall   NUMS
01f423 dfd5              rcall   NUMGREATER
01f424 ddbb              rcall   TYPE
01f425 940d f176         jmp     SPACE_
                 
                 ; .     n --                    display n signed
                 ;   <# DUP ABS #S SWAP SIGN #> TYPE SPACE ;
01f427 e82c              fdw     UDOTR_L
                 DOT_L:
01f428 2e81              .db     NFA|1,"."
01f429 dfad      DOT:    rcall   LESSNUM
01f42a d305              rcall   DUP
01f42b de3c              rcall   ABS_
01f42c d29d              rcall   FALSE_
01f42d dfc2              rcall   NUMS
01f42e de0e              rcall   ROT
01f42f dfd4              rcall   SIGN
01f430 dfc8              rcall   NUMGREATER
01f431 ddae              rcall   TYPE
01f432 940d f176         jmp     SPACE_
                 
01f434 e850              FDW     DOT_L
                 DECIMAL_L:
01f435 6487
01f436 6365
01f437 6d69
01f438 6c61              .db     NFA|7,"decimal"
                 DECIMAL: 
01f439 d268              rcall   TEN
01f43a d033              rcall   BASE
01f43b 940d fe8a         jmp     STORE
                 
                 ; HEX     --              set number base to hex
                 ;   #16 BASE ! ;
01f43d e86a              Fdw     DECIMAL_l
                 HEX_L:
01f43e 6883
01f43f 7865              .db     NFA|3,"hex"
                 HEX:
01f440 d2e5              rcall   DOLIT
01f441 0010              .dw     16
01f442 d02b              rcall   BASE
01f443 940d fe8a         jmp     STORE
                 
                 ; BIN     --              set number base to binary
                 ;   #2 BASE ! ;
01f445 e87c              Fdw     HEX_L
                 BIN_L:
01f446 6283
01f447 6e69              .db     NFA|3,"bin"
01f448 dca9      BIN:    rcall   CELL
01f449 d024              rcall   BASE
01f44a 940d fe8a         jmp     STORE
                 
                 ; RSAVE   -- a-addr     Saved return stack pointer
01f44c e88c              fdw     BIN_L
                 RSAVE_L:
01f44d 7285
01f44e 6173
01f44f 6576              .db     NFA|5,"rsave"
01f450 d02a      RSAVE_: rcall   DOUSER
01f451 fffe              .dw     ursave
                 
                 
                 ; ULINK   -- a-addr     link to next task
01f452 e89a              fdw     RSAVE_L
                 ULINK_L:
01f453 7585
01f454 696c
01f455 6b6e              .db     NFA|5,"ulink"
01f456 d024      ULINK_: rcall   DOUSER
01f457 fffc              .dw     ulink
                 
                 
                 ; TASK       -- a-addr              TASK pointer
01f458 e8a6              fdw     ULINK_L
                 TASK_L:
01f459 7484
01f45a 7361
01f45b 006b              .db     NFA|4,"task",0
01f45c d01e      TASK:   rcall   DOUSER
01f45d fff2              .dw     utask
                 
                 
                 ; HP       -- a-addr                HOLD pointer
01f45e e8b2              fdw     TASK_L
                 HP_L:
01f45f 6882
01f460 0070              .db     NFA|2,"hp",0
01f461 d019      HP:     rcall   DOUSER
01f462 0000              .dw     uhp
                 
                 ; PAD     -- a-addr        User Pad buffer
01f463 e8be              fdw     HP_L
                 PAD_L:
01f464 7083
01f465 6461              .db     NFA|3,"pad"
                 PAD:
01f466 d186              rcall   TIB
01f467 d17d              rcall   TIBSIZE
01f468 940d f26d         jmp     PLUS
                 
                 ; BASE    -- a-addr       holds conversion radix
01f46a e8c8              fdw     PAD_L
                 BASE_L:
01f46b 6284
01f46c 7361
01f46d 0065              .db     NFA|4,"base",0
                 BASE:
01f46e d00c              rcall   DOUSER
01f46f ffee              .dw     ubase
                 
                 ; USER   n --
01f470 e8d6              fdw     BASE_L
                 USER_L:
01f471 7584
01f472 6573
01f473 0072              .db     NFA|4,"user",0
                 USER:
01f474 d304              rcall   CREATE
01f475 dc7c              rcall   CELL
01f476 de2e              rcall   NEGATE
01f477 d4a1              rcall   IALLOT
01f478 940f ffa9         call    ICOMMA
01f47a d34e              rcall   XDOES
                 DOUSER:
01f47b 91ff              m_pop_zh
01f47c 91ff              pop     zh
01f47d 91ef              pop     zl
01f47e dbf9              rcall   FETCHLIT
01f47f 0d82              add     tosl, upl
01f480 1d93              adc     tosh, uph
01f481 9508              ret
                 
                 ; SOURCE   -- adr n         current input buffer
                 ;   'SOURCE 2@ ;        length is at higher adrs
01f482 e8e2              fdw     USER_L
                 SOURCE_L:
01f483 7386
01f484 756f
01f485 6372
01f486 0065              .db     NFA|6,"source",0
                 SOURCE:
01f487 d177              rcall   TICKSOURCE
01f488 940d f14c         jmp     TWOFETCH
                 
                 
                 ; /STRING  a u n -- a+n u-n          trim string
                 ;   swap over - >r + r>
01f48a e906              fdw      SOURCE_L
                 SLASHSTRING_L:
01f48b 2f87
01f48c 7473
01f48d 6972
01f48e 676e              .db     NFA|7,"/string"
                 SLASHSTRING:
01f48f dd9b              rcall   SWOP
01f490 dda4              rcall   OVER
01f491 dde8              rcall   MINUS
01f492 ddb2              rcall   TOR
01f493 ddd9              rcall   PLUS
01f494 ddbb              rcall   RFROM
01f495 9508              ret
                 
                 ; \     Skip the rest of the line
01f496 e916              fdw     SLASHSTRING_L
                 BSLASH_L:
01f497 5cc1              .db     NFA|IMMED|1,0x5c
                 BSLASH:
01f498 dfee              rcall   SOURCE
01f499 d15e              rcall   TOIN
01f49a d057              rcall   STORE_A
01f49b 6460              sbr     FLAGS1, (1<<noclear)  ; dont clear flags in case of \
01f49c 940d f224         jmp     DROP
                 
                 ; PARSE  char -- c-addr u
01f49e e92e              fdw     BSLASH_L
                 PARSE_L:
01f49f 7085
01f4a0 7261
01f4a1 6573              .db     NFA|5,"parse"
                 PARSE:
01f4a2 d28d              rcall   DUP             ; c c
01f4a3 dfe3              rcall   SOURCE          ; c c a u
01f4a4 d153              rcall   TOIN            ; c c a u a
01f4a5 d1c3              rcall   FETCH_A         ; c c a u n
01f4a6 dfe8              rcall   SLASHSTRING     ; c c a u   new tib addr/len
01f4a7 d288              rcall   DUP             ; c c a u u
01f4a8 dd9c              rcall   TOR             ; c c a u                  R: u (new tib len
01f4a9 dd93              rcall   ROT             ; c a u c
01f4aa db0d              rcall   SKIP            ; c a u        
01f4ab dd89              rcall   OVER            ; c a u a
01f4ac dd98              rcall   TOR             ; c a u                    R: u a (start of word
01f4ad dd8f              rcall   ROT             ; a u c
01f4ae db24              rcall   SCAN            ; a u      end of word, tib left       
01f4af deb1              rcall   DUPZEROSENSE
01f4b0 f009              breq    PARSE1
01f4b1 ddfe              rcall   ONEMINUS
01f4b2 dd9d      PARSE1: rcall   RFROM           ; a u a
01f4b3 dd9c              rcall   RFROM           ; a u a u
01f4b4 dd88              rcall   ROT             ; a a u u
01f4b5 ddc4              rcall   MINUS           ; a a n  ( addition to toin
01f4b6 d141              rcall   TOIN
01f4b7 de14              rcall   PLUSSTORE       ; aend astart
01f4b8 deea              rcall   TUCK            ; astart aend astart
01f4b9 940d f27a         jmp     MINUS           ; astart wlen
                      
                 
                 ; WORD   char -- c-addr        word delimited by char and/or TAB
01f4bb e93e              fdw     PARSE_L
                 WORD_L:
01f4bc 7784
01f4bd 726f
01f4be 0064              .db     NFA|4,"word",0
                 WORD:
01f4bf dfe2              rcall   PARSE           ; c-addr wlen
01f4c0 dd6a              rcall   SWOP
01f4c1 ddee              rcall   ONEMINUS
01f4c2 dee0              rcall   TUCK
01f4c3 940d ff25         jmp     CSTORE          ; Write the length into the TIB ! 
                 
                 ; CMOVE  src dst u --  copy u bytes from src to dst
                 ; cmove swap !p for c@+ pc! p+ next drop ;
01f4c5 e978              fdw     WORD_L
                 CMOVE_L:
01f4c6 6385
01f4c7 6f6d
01f4c8 6576              .db     NFA|5,"cmove"
                 CMOVE:
01f4c9 dd61              rcall   SWOP
01f4ca de44              rcall   STORE_P_TO_R
01f4cb dd79              rcall   TOR
01f4cc c003              rjmp    CMOVE2
                 CMOVE1:
01f4cd d016              rcall   CFETCHPP
01f4ce de65              rcall   PCSTORE
01f4cf de6c              rcall   PPLUS
                 CMOVE2:
01f4d0 d518              rcall   XNEXT
01f4d1 f7d8              brcc    CMOVE1
01f4d2 911f              pop     t1
01f4d3 910f              pop     t0
01f4d4 de46              rcall   R_TO_P
01f4d5 940d f224         jmp     DROP
                 
                 
                 ; place  src n dst --     place as counted str
01f4d7 e98c              fdw     CMOVE_L
                 PLACE_L:
01f4d8 7085
01f4d9 616c
01f4da 6563              .db     NFA|5,"place"
                 PLACE: 
01f4db dc8a              rcall   TWODUP
01f4dc dee5              rcall   CSTORE_A
01f4dd dc3d              rcall   CHARPLUS
01f4de dd4c              rcall   SWOP
01f4df 940d f4c9         jmp     CMOVE
                 
                 ; :     c@+ ( addr -- addr+1 n ) dup 1+ swap c@ ;
01f4e1 e9b0              fdw     PLACE_L
                 CFETCHPP_L:
01f4e2 6383
01f4e3 2b40              .db     NFA|3,"c@+"
                 CFETCHPP:
01f4e4 d24b              rcall   DUP
01f4e5 ddc5              rcall   ONEPLUS
01f4e6 dd44              rcall   SWOP
01f4e7 940d ff02         jmp     CFETCH
                 
                 ; :     @+ ( addr -- addr+2 n ) dup 2+ swap @ ;
01f4e9 e9c4              fdw     CFETCHPP_L
                 FETCHPP_L:
01f4ea 4082
01f4eb 002b              .db     NFA|2,"@+",0
                 FETCHPP:
01f4ec d243              rcall   DUP
01f4ed ddc7              rcall   TWOPLUS
01f4ee dd3c              rcall   SWOP
01f4ef 940d fed5         jmp     FETCH
                 
01f4f1 2181              .db     NFA|1,"!"
                 STORE_A:        
01f4f2 940d fe8a         jmp     STORE
                 
                 ; N>C   nfa -- cfa    name adr -> code field
01f4f4 e9d4              fdw    FETCHPP_L
                 NTOC_L:
01f4f5 6e83
01f4f6 633e              .db     NFA|3,"n>c"
                 NFATOCFA:
01f4f7 dfec              rcall   CFETCHPP
01f4f8 708f              andi    tosl, 0x0f
01f4f9 dd73              rcall   PLUS
01f4fa 940d f105         jmp     ALIGNED
                 
                 ; C>N   cfa -- nfa    code field addr -> name field addr
01f4fc e9ea              fdw    NTOC_L
                 CTON_L:
01f4fd 6383
01f4fe 6e3e              .db     NFA|3,"c>n"
                 CFATONFA:
01f4ff d33b              rcall   TWOMINUS
01f500 d22f              rcall   DUP
01f501 debc              rcall   CFETCH_A
01f502 940f fe83         call    TO_A
01f504 ff27              sbrs    al, 7
01f505 f3c9              breq    CFATONFA
01f506 9508              ret
                 
                 ; findi   c-addr nfa -- c-addr 0   if not found
                 ;                          xt  1      if immediate
                 ;                          xt -1      if "normal"
01f507 e9fa              fdw     CTON_L
                 BRACFIND_L:
01f508 2883
01f509 2966              .db     NFA|3,"(f)"
                 findi:
                 findi1:
                 FIND_1: 
01f50a dc5b              rcall   TWODUP
01f50b da89              rcall   NEQUAL
01f50c de54              rcall   DUPZEROSENSE
01f50d f021              breq    findi2
01f50e dd15              rcall   DROP
01f50f d32b              rcall   TWOMINUS ;;;      NFATOLFA
01f510 d158              rcall   FETCH_A
01f511 d21e              rcall   DUP
                 findi2:
01f512 de48              rcall   ZEROSENSE
01f513 f7b1              brne    findi1
01f514 de4c              rcall   DUPZEROSENSE
01f515 f041              breq    findi3
01f516 de85              rcall   NIP
01f517 d218              rcall   DUP
01f518 dfde              rcall   NFATOCFA
01f519 dd11              rcall   SWOP
01f51a d009              rcall   IMMEDQ
01f51b d21a              rcall   ZEROEQUAL
01f51c dc7c              rcall   ONE
01f51d dd6d              rcall   OR_
                 findi3: 
01f51e 9508              ret
                 ;        jmp     PAUSE
                 
                 ; IMMED?    nfa -- f        fetch immediate flag
01f51f ea10              fdw     BRACFIND_L
                 IMMEDQ_L:
01f520 6986
01f521 6d6d
01f522 6465
01f523 003f              .db     NFA|6,"immed?",0
                 IMMEDQ: 
01f524 de99              rcall   CFETCH_A
01f525 2e98              mov     wflags, tosl  ; COMPILE and INLINE flags for the compiler
01f526 7480              andi    tosl, IMMED
01f527 9508              ret
                 
                 ; FIND   c-addr -- c-addr 0   if not found
                 ;                  xt  1      if immediate
                 ;                  xt -1      if "normal"
01f528 ea40              fdw     IMMEDQ_L
                 FIND_L:
01f529 6684
01f52a 6e69
01f52b 0064              .db     NFA|4,"find",0
                 FIND:   
01f52c d1f9              rcall   DOLIT
01f52d f5be              fdw     kernellink
01f52e dfdb              rcall   findi
01f52f de31              rcall   DUPZEROSENSE
01f530 f421              brne    FIND1
01f531 dcf2              rcall   DROP
01f532 d320              rcall   LATEST_
01f533 d135              rcall   FETCH_A
01f534 dfd5              rcall   findi
                 FIND1:
01f535 9508              ret
                 
                 ; DIGIT?   c -- n -1   if c is a valid digit
01f536 ea52              fdw     FIND_L
                 DIGITQ_L:
01f537 6486
01f538 6769
01f539 7469
01f53a 003f              .db     NFA|6,"digit?",0
                 DIGITQ:
                                                 ; 1 = 31    A = 41
01f53b 3480              cpi     tosl, 0x40
01f53c f00c              brlt    DIGITQ1
01f53d 9787              sbiw    tosl, 0x27
                 DIGITQ1:        
01f53e 97c0              sbiw    tosl, 0x30      ; 1
01f53f d1f0              rcall   DUP             ; 1 1
01f540 df2d              rcall   BASE            ; 1 1 base
01f541 d127              rcall   FETCH_A         ; 1 1 10
01f542 ddac              rcall   LESS            ; 1 ffff
01f543 dcf1              rcall   OVER            ; 1 ffff 1
01f544 d1f8              rcall   ZEROLESS        ; 1 ffff 0
01f545 dd57              rcall   INVERT
01f546 940d f283         jmp     AND_
                 
                 ; SIGN?   adr n -- adr' n' f   get optional sign
                 ; + leaves $0000 flag
                 ; - leaves $0002 flag
01f548 ea6e              fdw     DIGITQ_L
                 SIGNQ_L:
01f549 7385
01f54a 6769
01f54b 3f6e              .db     NFA|5,"sign?"
                 SIGNQ:
01f54c dce8              rcall   OVER
01f54d de70              rcall   CFETCH_A
01f54e 978c              sbiw    tosl, ','
01f54f d1e0              rcall   DUP
01f550 dd17              rcall   ABS_
01f551 dc47              rcall   ONE
01f552 dd97              rcall   EQUAL
01f553 dd2f              rcall   AND_
01f554 de0c              rcall   DUPZEROSENSE
01f555 f029              breq    QSIGN1
01f556 dd54              rcall   ONEPLUS
01f557 dced              rcall   TOR
01f558 dc40              rcall   ONE
01f559 df35              rcall   SLASHSTRING
01f55a dcf5              rcall   RFROM
01f55b 9508      QSIGN1: ret
                 
                 ; UD*  ud u -- ud
01f55c ea92              fdw     SIGNQ_L
                 UDSTAR_L:
01f55d 7583
01f55e 2a64              .db     NFA|3,"ud*"
                 UDSTAR:
01f55f d1d0              rcall   DUP
01f560 dce4              rcall   TOR
01f561 de04              rcall   UMSTAR
01f562 dcc1              rcall   DROP
01f563 dcc7              rcall   SWOP
01f564 dceb              rcall   RFROM
01f565 de00              rcall   UMSTAR
01f566 dcd6              rcall   ROT
01f567 940d f26d         jmp     PLUS
                         
                 ; UD/MOD  ud u --u(rem) ud(quot)
01f569 eaba              fdw     UDSTAR_L
                 UDSLASHMOD_L:
01f56a 7586
01f56b 2f64
01f56c 6f6d
01f56d 0064              .db     NFA|6,"ud/mod",0
                 UDSLASHMOD:
01f56e dcd6              rcall   TOR             ; ud.l ud.h 
01f56f d15a              rcall   FALSE_          ; ud.l ud.h 0
01f570 dcea              rcall   RFETCH          ; ud.l ud.h 0 u
01f571 ddfb              rcall   UMSLASHMOD      ; ud.l r.h q.h
01f572 dcca              rcall   ROT             ; r.h q.h ud.l
01f573 dcc9              rcall   ROT             ; q.h ud.l r.h
01f574 dcdb              rcall   RFROM           ; q.h ud.l r.h u
01f575 ddf7              rcall   UMSLASHMOD      ; q.h r.l q.l
01f576 940d f23d         jmp     ROT             ; r.l q.l q.h
                         
                 ; >NUMBER  0 0 adr u -- ud.l ud.h adr' u'
                 ;                       convert string to number
01f578 ead4              fdw     UDSLASHMOD_L
                 TONUMBER_L:
01f579 3e87
01f57a 756e
01f57b 626d
01f57c 7265              .db     NFA|7,">number"
                 TONUMBER:
                 TONUM1:
01f57d dde3              rcall   DUPZEROSENSE      ; ud.l ud.h adr u
01f57e f0b1              breq    TONUM3
01f57f dcc5              rcall   TOR
01f580 d1af              rcall   DUP
01f581 dcc3              rcall   TOR             ; ud.l ud.h adr
01f582 de3b              rcall   CFETCH_A
01f583 dfb7              rcall   DIGITQ          ; ud.l ud.h digit flag
01f584 ddd6              rcall   ZEROSENSE
01f585 f421              brne    TONUM2
01f586 dc9d              rcall   DROP
01f587 dcc8              rcall   RFROM
01f588 dcc7              rcall   RFROM
01f589 c00b              rjmp    TONUM3
                 TONUM2: 
01f58a dcba              rcall   TOR             ; ud.l ud.h digit
01f58b dee2              rcall   BASE
01f58c d0dc              rcall   FETCH_A
01f58d dfd1              rcall   UDSTAR
01f58e dcc1              rcall   RFROM
01f58f dce5              rcall   MPLUS
01f590 dcbf              rcall   RFROM
01f591 dcbe              rcall   RFROM
                         
01f592 dc06              rcall   ONE
01f593 defb              rcall   SLASHSTRING
01f594 cfe8              rjmp    TONUM1
                 TONUM3: 
01f595 9508              ret
                 
                 BASEQV:   
01f596 e872              fdw     DECIMAL
01f597 e880              fdw     HEX
01f598 e890              fdw     BIN
                 
                 
                 ; NUMBER?  c-addr -- n 1
                 ;                 -- dl dh 2
                 ;                 -- c-addr 0  if convert error
01f599 eaf2              fdw     TONUMBER_L
                 NUMBERQ_L:
01f59a 6e87
01f59b 6d75
01f59c 6562
01f59d 3f72              .db     NFA|7,"number?"
                 NUMBERQ:
01f59e d191              rcall   DUP             ; a a
01f59f d12a              rcall   FALSE_          ; a a 0 0
01f5a0 d129              rcall   FALSE_          ; a a 0 0
01f5a1 dc9b              rcall   ROT             ; a 0 0 a
01f5a2 df41              rcall   CFETCHPP        ; a 0 0 a' u
01f5a3 dfa8              rcall   SIGNQ           ; a 0 0 a' u f
01f5a4 dca0              rcall   TOR             ; a 0 0 a' u
                 
01f5a5 dec8              rcall   BASE
01f5a6 d0c2              rcall   FETCH_A
01f5a7 dc9d              rcall   TOR             ; a 0 0 a' u
                         
01f5a8 dc8c              rcall   OVER
01f5a9 de14              rcall   CFETCH_A
                         
01f5aa 9783              sbiw    tosl, '#'
01f5ab 3083              cpi     tosl, 3
01f5ac f440              brsh    BASEQ1
                 
01f5ad db66              rcall   CELLS
01f5ae d177              rcall   DOLIT
01f5af eb2c              fdw     BASEQV
01f5b0 dcbc              rcall   PLUS
01f5b1 da7e              rcall   FEXECUTE
                 
01f5b2 dbe6              rcall   ONE
01f5b3 dedb              rcall   SLASHSTRING
01f5b4 c001              rjmp    BASEQ2
                 BASEQ1:
01f5b5 dc6e              rcall   DROP
                 BASEQ2:                         ; a 0 0 a' u
01f5b6 dfc6              rcall   TONUMBER        ; a ud.l ud.h  a' u
01f5b7 dc98              rcall   RFROM           ; a ud.l ud.h  a' u oldbase
01f5b8 deb5              rcall   BASE            ; a ud.l ud.h  a' u oldbase addr
01f5b9 df38              rcall   STORE_A         ; a ud.l ud.h  a' u
                 
01f5ba d175              rcall   DUP
01f5bb d27f              rcall   TWOMINUS
01f5bc d180              rcall   ZEROLESS        ; a ud.l ud.h  a' u f
01f5bd dd9d              rcall   ZEROSENSE       ; a ud.l ud.h  a' u
01f5be f431              brne    QNUMD
                 QNUM_ERR:                       ; Not a number
01f5bf dc90              rcall   RFROM           ; a ud.l ud.h a' u sign
01f5c0 dc63              rcall   DROP
01f5c1 db9d              rcall   TWODROP
                 QNUM_ERR1:      
01f5c2 db9c              rcall   TWODROP
01f5c3 d106              rcall   FALSE_          ; a 0           Not a number
01f5c4 c017              rjmp    QNUM3
                 QNUMD:                          ; Double number
                                                 ; a ud.l ud.h a' u
01f5c5 dba7              rcall   TWOSWAP         ; a a' u ud.l ud.h 
01f5c6 dc89              rcall   RFROM           ; a a' u ud.l ud.d sign
01f5c7 dd93              rcall   ZEROSENSE
01f5c8 f009              breq    QNUMD1
01f5c9 d44b              rcall   DNEGATE
                 QNUMD1: 
01f5ca dba2              rcall   TWOSWAP         ; a d.l d.h a' u
01f5cb dd8f              rcall   ZEROSENSE       ; a d.l d.h a'
01f5cc f061              breq    QNUM1
01f5cd 940f ff02         call    CFETCH
01f5cf d156              rcall   DOLIT
01f5d0 002e              .dw     '.'
01f5d1 dca8              rcall   MINUS
01f5d2 dd88              rcall   ZEROSENSE       ; a d.l d.h
01f5d3 f771              brne    QNUM_ERR1
01f5d4 dc68              rcall   ROT             ; d.l d.h a
01f5d5 dc4e              rcall   DROP            ; d.l d.h
01f5d6 d14f              rcall   DOLIT         ; 
01f5d7 0002              .dw     2               ; d.l ud.h 2    Double number
01f5d8 c003              rjmp    QNUM3
                 QNUM1:                          ; single precision dumber
                                                 ; a ud.l ud.h  a'
01f5d9 db85              rcall   TWODROP         ; a n
01f5da ddc1              rcall   NIP             ; n
01f5db dbbd              rcall   ONE             ; n 1           Single number
                 QNUM3:  
01f5dc 9508              ret
                 
                 
01f5dd 7384
01f5de 6177
01f5df 0070              .db     NFA|4,"swap",0
                 SWOP_A:
01f5e0 940d f22b         jmp     SWOP
                 
                 ; TI#  -- n                      size of TIB
                 ; : ti# task @ 8 + @ ;
01f5e2 eb34              fdw     NUMBERQ_L
                 TIBSIZE_L:
01f5e3 7483
01f5e4 2369              .db     NFA|3,"ti#"
                 TIBSIZE:
01f5e5 de76              rcall   TASK
01f5e6 d082              rcall   FETCH_A
01f5e7 9608              adiw    tosl, 8
01f5e8 940d fed5         jmp     FETCH
                 
                 ; TIB     -- a-addr        Terminal Input Buffer
01f5ea ebc6              fdw     TIBSIZE_L
                 TIB_L:
01f5eb 7483
01f5ec 6269              .db     NFA|3,"tib"
                 TIB:
01f5ed d005              rcall   TIU
01f5ee 940d fed5         jmp     FETCH
                         
                 ; TIU     -- a-addr        Terminal Input Buffer user variable 
01f5f0 ebd6              fdw     TIB_L
                 TIU_L:
01f5f1 7483
01f5f2 7569              .db     NFA|3,"tiu"
                 TIU:
01f5f3 de87              rcall   DOUSER
01f5f4 fff0              .dw     utib       ; pointer to Terminal input buffer
                 
                 ; >IN     -- a-addr        holds offset into TIB
                 ; In RAM
01f5f5 ebe2              fdw     TIU_L
                 TOIN_L:
01f5f6 3e83
01f5f7 6e69              .db     NFA|3,">in"
                 TOIN:
01f5f8 de82              rcall   DOUSER
01f5f9 fffa              .dw     utoin
                 
                 ; 'SOURCE  -- a-addr        two cells: len, adrs
                 ; In RAM ?
01f5fa ebec              fdw     TOIN_L
                 TICKSOURCE_L:
01f5fb 2787
01f5fc 6f73
01f5fd 7275
01f5fe 6563              .db     NFA|7,"'source"
                 TICKSOURCE:
01f5ff de7b              rcall   DOUSER
01f600 fff6              .dw     usource       ; two cells !!!!!!
                 
                 ;  INTERPRET  c-addr u --    interpret given buffer
01f601 ebf6              fdw     TICKSOURCE_L
                 INTERPRET_L:
01f602 6989
01f603 746e
01f604 7265
01f605 7270
01f606 7465              .db     NFA|9,"interpret"
                 INTERPRET: 
01f607 dff7              rcall   TICKSOURCE
01f608 db4c              rcall   TWOSTORE
01f609 d0c0              rcall   FALSE_
01f60a dfed              rcall   TOIN
01f60b dee6              rcall   STORE_A
                 IPARSEWORD:
01f60c d233              rcall   BL
01f60d deb1              rcall   WORD
                 
01f60e d121              rcall   DUP
01f60f ddae              rcall   CFETCH_A
01f610 dd4a              rcall   ZEROSENSE
01f611 f409              brne    IPARSEWORD1
01f612 c053              rjmp    INOWORD
                 IPARSEWORD1:
01f613 df18              rcall   FIND            ; sets also wflags
01f614 dd4c              rcall   DUPZEROSENSE    ; 0 = not found, -1 = normal, 1 = immediate
01f615 f1a1              breq    INUMBER         ; NUMBER?
01f616 dc94              rcall   ONEPLUS         ; 0 = normal 2 = immediate
01f617 d22f              rcall   STATE_
01f618 d11d              rcall   ZEROEQUAL
01f619 dc71              rcall   OR_
01f61a dd40              rcall   ZEROSENSE
01f61b f099              breq    ICOMPILE_1      ; Compile a word
                         
                                                 ; Execute a word
                                                 ; immediate&compiling or interpreting
01f61c fe94              sbrs    wflags, 4       ; Compile only check
01f61d c00a              rjmp    IEXECUTE        ; Not a compile only word
01f61e d228              rcall   STATE_          ; Compile only word check
01f61f dbcd              rcall   XSQUOTE
01f620 430c
01f621 4d4f
01f622 4950
01f623 454c
01f624 4f20
01f625 4c4e
01f626 0059              .db     12,"COMPILE ONLY",0
01f627 d0eb              rcall   QABORT
                 IEXECUTE:
01f628 7b6f              cbr     FLAGS1, (1<<noclear)
01f629 d9fc              rcall   EXECUTE
01f62a fd66              sbrc    FLAGS1, noclear ;  set by \ and by (
01f62b cfe0              rjmp    IPARSEWORD
01f62c 7e6f              cbr     FLAGS1, (1<<izeroeq) ; Clear 0= encountered in compilation
01f62d 7d6f              cbr     FLAGS1, (1<<idup)    ; Clear DUP encountered in compilation
01f62e cfdd              rjmp    IPARSEWORD
                 ICOMPILE_1:
01f62f 7e6f              cbr     FLAGS1, (1<<izeroeq) ; Clear 0= encountered in compilation
01f630 d0ff              rcall   DUP
01f631 d0f4              rcall   DOLIT
01f632 ee6c              fdw     ZEROEQUAL       ; Check for 0=, modifies IF and UNTIL to use bnz
01f633 dcb6              rcall   EQUAL
01f634 dd26              rcall   ZEROSENSE
01f635 f011              breq    ICOMPILE_2
01f636 6160              sbr     FLAGS1, (1<<izeroeq) ; Mark 0= encountered in compilation
01f637 c00d              rjmp    ICOMMAXT
                 ICOMPILE_2:
01f638 7d6f              cbr     FLAGS1, (1<<idup)    ; Clear DUP encountered in compilation
01f639 d0f6              rcall   DUP
01f63a d0eb              rcall   DOLIT
01f63b ee60              fdw     DUP             ; Check for DUP, modies IF and UNTIl to use DUPZEROSENSE
01f63c dcad              rcall   EQUAL
01f63d dd1d              rcall   ZEROSENSE
01f63e f009              breq    ICOMPILE
01f63f 6260              sbr     FLAGS1, (1<<idup)    ; Mark DUP encountered during compilation
                 ICOMPILE:
01f640 fe95              sbrs    wflags, 5       ; Inline check
01f641 c003              rjmp    ICOMMAXT
01f642 940f f9c0         call    INLINE0
01f644 cfc7              rjmp    IPARSEWORD
                 ICOMMAXT:
01f645 d122              rcall   COMMAXT_A
01f646 7f6d              cbr     FLAGS1, (1<<fTAILC)  ; Allow tailjmp  optimisation
01f647 fc94              sbrc    wflags, 4            ; Compile only ?
01f648 6062              sbr     FLAGS1, (1<<fTAILC)  ; Prevent tailjmp  optimisation
01f649 cfc2              rjmp    IPARSEWORD
                 INUMBER: 
01f64a 7e6f              cbr     FLAGS1, (1<<izeroeq) ; Clear 0= encountered in compilation
01f64b 7d6f              cbr     FLAGS1, (1<<idup)    ; Clear DUP encountered in compilation
01f64c dbd7              rcall   DROP
01f64d df50              rcall   NUMBERQ
01f64e dd12              rcall   DUPZEROSENSE
01f64f f081              breq    IUNKNOWN
01f650 d1f6              rcall   STATE_
01f651 dd09              rcall   ZEROSENSE
01f652 f059              breq    INUMBER1
01f653 2f08              mov     t0, tosl
01f654 9189
01f655 9199              poptos
01f656 ff01              sbrs    t0, 1
01f657 c003              rjmp    ISINGLE
                 IDOUBLE:
01f658 df87              rcall   SWOP_A
01f659 940f fe5c         call    LITERAL
                 ISINGLE:        
01f65b 940f fe5c         call    LITERAL
01f65d cfae              rjmp    IPARSEWORD
                 
                 INUMBER1:
01f65e dbc5              rcall   DROP
01f65f cfac              rjmp    IPARSEWORD
                 
                 IUNKNOWN:
01f660 dbc3              rcall   DROP 
01f661 d044              rcall   DP_TO_RAM
01f662 de81              rcall   CFETCHPP
01f663 db7c              rcall   TYPE
01f664 d065              rcall   FALSE_
01f665 d0a4              rcall   QABORTQ         ; Never returns & resets the stacks
                 INOWORD: 
01f666 940d f224         jmp     DROP
                 
01f668 4081              .db     NFA|1,"@"
                 FETCH_A:        
01f669 940d fed5         jmp     FETCH
                 
                 ;;;    bitmask -- 
01f66b ec04              fdw     INTERPRET_L
                 SHB_L:
01f66c 7383
01f66d 6268              .db     NFA|3,"shb"     ; Set header bit
                 SHB:
01f66e d1e4              rcall   LATEST_
01f66f dff9              rcall   FETCH_A
01f670 d0bf              rcall   DUP
01f671 dd4c              rcall   CFETCH_A
01f672 dbca              rcall   ROT
01f673 dc17              rcall   OR_
01f674 df6b              rcall   SWOP_A
01f675 940d ff25         jmp     CSTORE
                         
01f677 ecd8              fdw     SHB_L
                 IMMEDIATE_L:
01f678 6989
01f679 6d6d
01f67a 6465
01f67b 6169
01f67c 6574              .db     NFA|9,"immediate" ; 
                 IMMEDIATE:
01f67d d0a8              rcall   DOLIT
01f67e 0040              .dw     IMMED
01f67f 940d f66e         jmp     SHB
                 
                 ;***************************************************************
01f681 ecf0              fdw     IMMEDIATE_L
                 INLINED_L:
01f682 6987
01f683 6c6e
01f684 6e69
01f685 6465              .db     NFA|7,"inlined" ; 
                 INLINED:
01f686 d09f              rcall   DOLIT
01f687 0020              .dw     INLINE
01f688 940d f66e         jmp     SHB
                 
                 ;; .st ( -- ) output a string with current data section and current base info
                 ;;; : .st base @ dup decimal <#  [char] , hold #s  [char] < hold #> type 
                 ;;;     <# [char] > hold cse @ #s #> type base ! ;
01f68a ed04              fdw     INLINED_L
                 DOTSTATUS_L:
01f68b 2e83
01f68c 7473              .db     NFA|3,".st"
                 DOTSTATUS:
01f68d d098              rcall   DOLIT
01f68e 003c              .dw     '<'
01f68f d981              rcall   EMIT
01f690 940f ffbb         call    DOTBASE
01f692 d97e              rcall   EMIT
01f693 d092              rcall   DOLIT
01f694 002c              .dw     ','
01f695 d97b              rcall   EMIT
01f696 940f ef01         call    MEMQ
01f698 db47              rcall   TYPE
01f699 d08c              rcall   DOLIT
01f69a 003e              .dw     '>'
01f69b d975              rcall   EMIT
01f69c 940d f8d8         jmp     DOTS
                 
01f69e 3e82
01f69f 0072              .db     NFA|2,">r",0
01f6a0 940d f245 TOR_A:  jmp     TOR
                 
                 
                 ;;; TEN ( -- n ) Leave decimal 10 on the stack
                 ;        .db     NFA|1,"a"
                 TEN:
01f6a2 d9c2              rcall   DOCREATE
01f6a3 000a              .dw     10
                 
                 ; dp> ( -- ) Copy ini, dps and latest from eeprom to ram
                 ;        .dw     link
                 ; link    set     $
01f6a4 6483
01f6a5 3e70              .db     NFA|3,"dp>"
                 DP_TO_RAM:
01f6a6 d07f              rcall   DOLIT
01f6a7 2200              .dw     dp_start
01f6a8 d1b9              rcall   INI
01f6a9 dff8              rcall   TEN
01f6aa 940d f4c9         jmp     CMOVE
                 
                 ; >dp ( -- ) Copy only changed turnkey, dp's and latest from ram to eeprom
                 ;        .dw     link
                 ; link    set     $
01f6ac 3e83
01f6ad 7064              .db     NFA|3,">dp"
                 DP_TO_EEPROM:
01f6ae d077              rcall   DOLIT
01f6af 2200              .dw     dp_start
01f6b0 dc5e              rcall   STORE_P_TO_R
01f6b1 d1b0              rcall   INI
01f6b2 d073              rcall   DOLIT
01f6b3 0004              .dw     4
01f6b4 db90              rcall   TOR
                 DP_TO_EEPROM_0: 
01f6b5 de36              rcall   FETCHPP
01f6b6 d079              rcall   DUP
01f6b7 dc6c              rcall   PFETCH
01f6b8 dc29              rcall   NOTEQUAL
01f6b9 dca1              rcall   ZEROSENSE
01f6ba f011              breq    DP_TO_EEPROM_1
                 .if DEBUG_FLASH == 1
                 .endif
01f6bb dc70              rcall   PSTORE
01f6bc c001              rjmp    DP_TO_EEPROM_2
                 DP_TO_EEPROM_1:
01f6bd db66              rcall   DROP
                 DP_TO_EEPROM_2:
01f6be d422              rcall   PTWOPLUS
                 DP_TO_EEPROM_3:
01f6bf d329              rcall   XNEXT
01f6c0 f7a0              brcc    DP_TO_EEPROM_0
01f6c1 911f              pop     t1
01f6c2 910f              pop     t0
01f6c3 dc57              rcall   R_TO_P
01f6c4 940d f224         jmp     DROP
                 
01f6c6 ed16              fdw     DOTSTATUS_L
                 FALSE_L:
01f6c7 6685
01f6c8 6c61
01f6c9 6573              .db     NFA|5,"false"
                 FALSE_:                     ; TOS is 0000 (FALSE)
01f6ca d065              rcall DUP;pushtos
01f6cb 2788              clr     tosl
01f6cc 2799              clr     tosh
01f6cd 9508              ret
                 
01f6ce ed8e              fdw     FALSE_L
                 TRUE_L:
01f6cf 7484
01f6d0 7572
01f6d1 0065              .db     NFA|4,"true",0
                 TRUE_:                      ; TOS is ffff (TRUE)
01f6d2 d05d              rcall DUP;pushtos
01f6d3 ef8f              ser     tosl
01f6d4 ef9f              ser     tosh
01f6d5 9508              ret
                 
                 ; QUIT     --    R: i*x --    interpret from kbd
01f6d6 ed9e              fdw     TRUE_L
                 QUIT_L:
01f6d7 7184
01f6d8 6975
01f6d9 0074              .db     NFA|4,"quit",0
                 QUIT:
01f6da d9be              rcall   RPEMPTY
01f6db d109              rcall   LEFTBRACKET
01f6dc d9e8              rcall   FRAM
                 QUIT0:  
                         ;; Copy INI and DP's from eeprom to ram
01f6dd dfc8              rcall   DP_TO_RAM
                 QUIT1: 
01f6de d920              rcall   check_sp
01f6df d08d              rcall   CR
01f6e0 df0c              rcall   TIB
01f6e1 d04e              rcall   DUP
01f6e2 df02              rcall   TIBSIZE
01f6e3 dfbe              rcall   TEN                 ; Reserve 10 bytes for hold buffer
01f6e4 db95              rcall   MINUS
01f6e5 dabd              rcall   ACCEPT
01f6e6 da8f              rcall   SPACE_
01f6e7 df1f              rcall   INTERPRET
01f6e8 d15e              rcall   STATE_
01f6e9 dc71              rcall   ZEROSENSE
01f6ea f799              brne    QUIT1
01f6eb d69a              rcall   IFLUSH
01f6ec dfc1              rcall   DP_TO_EEPROM
                          
01f6ed daff              rcall    XSQUOTE
01f6ee 2003
01f6ef 6b6f              .db     3," ok"
01f6f0 daef              rcall    TYPE
01f6f1 d007              rcall   PROMPT_
01f6f2 940d f6dd         jmp     QUIT0
                 
                 
01f6f4 edae              fdw     QUIT_L
                 PROMPT_L:
01f6f5 7086
01f6f6 6f72
01f6f7 706d
01f6f8 0074              .db     NFA|6,"prompt",0
                 PROMPT_:
01f6f9 940f ff5f         call    DEFER_DOES
01f6fb 220a              .dw     prompt
                 
                 ; ABORT    i*x --   R: j*x --   clear stk & QUIT
01f6fc edea              fdw     PROMPT_L
                 ABORT_L:
01f6fd 6185
01f6fe 6f62
01f6ff 7472              .db     NFA|5,"abort"
                 ABORT:
01f700 d158              rcall   S0
01f701 df67              rcall   FETCH_A
01f702 d992              rcall   SPSTORE
01f703 940d f6da         jmp     QUIT            ; QUIT never rets
                 
                 ; ?ABORT   f --       abort & print ?
01f705 edfa              fdw     ABORT_L
                 QABORTQ_L:
01f706 3f87
01f707 6261
01f708 726f
01f709 3f74              .db     NFA|7,"?abort?"
                 QABORTQ:
01f70a dae2              rcall   XSQUOTE
01f70b 3f01              .db     1,"?"
01f70c 940d f713         jmp     QABORT
                 
                 
                 ; ?ABORT   f c-addr u --       abort & print msg if flag is false
01f70e ee0c              fdw     QABORTQ_L
                 QABORT_L:
01f70f 3f86
01f710 6261
01f711 726f
01f712 0074              .db     NFA|6,"?abort",0
                 QABORT:
01f713 db29              rcall   ROT
01f714 dc46              rcall   ZEROSENSE
01f715 f419              brne    QABO1
                 QABORT1:        
01f716 da5f              rcall   SPACE_
01f717 dac8              rcall   TYPE
01f718 dfe7              rcall   ABORT  ; ABORT never returns
01f719 940d f15f QABO1:  jmp     TWODROP
                 
                 ; ABORT"  i*x 0  -- i*x   R: j*x -- j*x  x1=0
                 ;         i*x x1 --       R: j*x --      x1<>0
01f71b ee1e              fdw     QABORT_L
                 ABORTQUOTE_L:
01f71c 61d6
01f71d 6f62
01f71e 7472
01f71f 0022              .db     NFA|IMMED|COMPILE|6,"abort",0x22,0
                 ABORTQUOTE:
01f720 dade              rcall   SQUOTE
01f721 d95f              rcall   DOCOMMAXT
01f722 ee26              fdw     QABORT
01f723 9508              ret
                 
                 ;***************************************************
                 ; LIT   -- x    fetch inline 16 bit literal to the stack
                 
                 DOLIT_L:
01f724 6c83
01f725 7469              .db     NFA|3, "lit"
                 DOLIT:
01f726 91ff              m_pop_zh
01f727 91ff              pop     zh
01f728 91ef              pop     zl
01f729 d94e              rcall   FETCHLIT
01f72a 95f7              ror     zh
01f72b 95e7              ror     zl
01f72c 9419              mijmp    ; (z)
                 
                 ; DUP must not be reachable from user code with rcall
01f72d e4b2              fdw     RFETCH_L
                 DUP_L:
01f72e 64a3
01f72f 7075              .db     NFA|INLINE|3, "dup"
                 DUP:
01f730 939a
01f731 938a              pushtos
01f732 9508              ret
                 
01f733 e5c0              fdw     NOTEQUAL_L
                 ZEROEQUAL_L:
01f734 3082
01f735 003d              .db     NFA|2, "0=",0
                 ZEROEQUAL:
01f736 9701              sbiw    tosl, 1
01f737 0b88              sbc     tosl, tosl
01f738 0b99              sbc     tosh, tosh
01f739 9508              ret
                 
01f73a ee68              fdw     ZEROEQUAL_L
                 ZEROLESS_L:
01f73b 3082
01f73c 003c              .db     NFA|2, "0<",0
                 ZEROLESS:
01f73d 0f99              lsl     tosh
01f73e 0b88              sbc     tosl, tosl
01f73f 0b99              sbc     tosh, tosh
01f740 9508              ret
                 
                 
                 ; '    -- xt             find word in dictionary
01f741 ee38              fdw     ABORTQUOTE_L
                 TICK_L:
01f742 2781              .db     NFA|1,0x27    ; 27h = '
                 TICK:
01f743 d0fc              rcall   BL
01f744 dd7a              rcall   WORD
01f745 dde6              rcall   FIND
01f746 940d f70a         jmp     QABORTQ
                 
                 ; CHAR   -- char           parse ASCII character
01f748 ee84              fdw     TICK_L
                 CHAR_L:
01f749 6384
01f74a 6168
01f74b 0072              .db     NFA|4,"char",0
                 CHAR:
01f74c d0f3              rcall   BL
01f74d dd54              rcall   PARSE
01f74e dad5              rcall   DROP
01f74f 940d ff02         jmp     CFETCH
                 
                 ; (    --                     skip input until )
01f751 ee92              fdw     CHAR_L
                 PAREN_L:
01f752 28c1              .db     NFA|IMMED|1,"("
                 PAREN:
01f753 dfd2              rcall   DOLIT
01f754 0029              .dw     ')'
01f755 dd4c              rcall   PARSE
01f756 6460              sbr     FLAGS1, (1<<noclear) ; dont clear flags in case of (
01f757 940d f15f         jmp     TWODROP
                 
                 ; IHERE    -- a-addr    ret Code dictionary ptr
                 ;   IDP @ ;
                 ;;;         .dw     link
                 ;;; link    set     $
01f759 6985
01f75a 6568
01f75b 6572              .db     NFA|5,"ihere"
                 IHERE:
01f75c d066              rcall   IDP
01f75d cf0b              rjmp    FETCH_A
                 
                 ; [CHAR]   --          compile character DOLITeral
01f75e eea4              fdw     PAREN_L
                 BRACCHAR_L:
01f75f 5bd6
01f760 6863
01f761 7261
01f762 005d              .db     NFA|IMMED|COMPILE|6,"[char]",0
                 BRACCHAR:
01f763 dfe8              rcall   CHAR
01f764 940d fe5c         jmp     LITERAL
                 
                 ; COMPILE,  xt --         append codefield
01f766 6383
01f767 2c66              .db     NFA|3,"cf,"
                 COMMAXT_A:
01f768 940d f125         jmp     COMMAXT
                 
                 ; CR      --                      output newline
01f76a eebe              fdw     BRACCHAR_L
                 CR_L:
01f76b 6382
01f76c 0072              .db     NFA|2,"cr",0
                 CR:
01f76d dfb8              rcall   DOLIT
01f76e 000d              .dw     0x0d       ; CR \r
01f76f d8a1              rcall   EMIT
01f770 dfb5              rcall   DOLIT
01f771 000a              .dw     0x0a       ; LF \n
                 EMIT_A:
01f772 940d f011         jmp     EMIT
                 
                 ; CREATE   --         create an empty definition
                 ; Create a definition header and append 
                 ; doCREATE and the current data space dictionary pointer
                 ; in FLASH.
                 ;  Examples :   
                 ; : table create 10 cells allot does> swap cells + ;
                 ; ram table table_a     flash table table_b    eeprom table table_c
                 ; ram variable  qqq
                 ; eeprom variable www ram
                 ; flash variable  rrr ram 
                 ; eeprom create calibrationtable 30 allot ram
                 ; 
01f774 eed6              fdw     CR_L
                 CREATE_L:
01f775 6386
01f776 6572
01f777 7461
01f778 0065              .db     NFA|6,"create",0
                 CREATE:
01f779 d0c6              rcall   BL
01f77a dd44              rcall   WORD            ; Parse a word
                 
01f77b dfb4              rcall   DUP             ; Remember parsed word at rhere
01f77c ddaf              rcall   FIND
01f77d dc1e              rcall   NIP
01f77e dfb7              rcall   ZEROEQUAL
01f77f da6d              rcall   XSQUOTE
01f780 410f
01f781 524c
01f782 4145
01f783 5944
01f784 4420
01f785 4645
01f786 4e49
01f787 4445              .db     15,"ALREADY DEFINED"
01f788 df8a              rcall   QABORT         ; ABORT if word has already been defined
01f789 dfa6              rcall   DUP             ; Check the word length 
01f78a dc33              rcall   CFETCH_A
01f78b da0d              rcall   ONE
01f78c df99              rcall   DOLIT
01f78d 0010              .dw     16
01f78e db49              rcall   WITHIN
01f78f df7a              rcall   QABORTQ          ; Abort if there is no name for create
                 
01f790 d0c2              rcall   LATEST_
01f791 ded7              rcall   FETCH_A
01f792 940f ffa9         call    ICOMMA          ; Link field
01f794 dd4f              rcall   CFETCHPP        ; str len
01f795 dfc6              rcall   IHERE
01f796 df99              rcall   DUP             
01f797 d0bb              rcall   LATEST_         ; new 'latest' link
01f798 dd59              rcall   STORE_A         ; str len ihere
01f799 dd41              rcall   PLACE           ; 
01f79a dfc1              rcall   IHERE           ; ihere
01f79b dc22              rcall   CFETCH_A
01f79c df89              rcall   DOLIT
01f79d 0080              .dw     NFA
01f79e decf              rcall   SHB
01f79f db0b              rcall   ONEPLUS
01f7a0 d964              rcall   ALIGNED
01f7a1 d177              rcall   IALLOT          ; The header has now been created
01f7a2 df83              rcall   DOLIT             
01f7a3 e0ca              fdw     DOCREATE        ; compiles the runtime routine to fetch the next dictionary cell to the parameter stack
01f7a4 d989              rcall   STORECFF1       ; Append an exeution token, CALL !
01f7a5 d955              rcall   ALIGN
01f7a6 d935              rcall   HERE            ; compiles the current dataspace dp into the dictionary
01f7a7 d92a              rcall   CSE_
01f7a8 dbb2              rcall   ZEROSENSE
01f7a9 f409              brne    CREATE2
01f7aa db0a              rcall   TWOPLUS
                 CREATE2:
01f7ab 940d ffa9         jmp     ICOMMA          ; dp now points to a free cell
                 
                 ;***************************************************************
                 ; POSTPONE
01f7ad eeea              fdw    CREATE_L
                 POSTPONE_L:
01f7ae 70d8
01f7af 736f
01f7b0 7074
01f7b1 6e6f
01f7b2 0065              .db     NFA|IMMED|COMPILE|8,"postpone",0
                 POSTPONE:
01f7b3 d08c              rcall   BL
01f7b4 dd0a              rcall   WORD
01f7b5 dd76              rcall   FIND
01f7b6 df79              rcall   DUP
01f7b7 df52              rcall   QABORTQ
01f7b8 df84              rcall   ZEROLESS
01f7b9 dba1              rcall   ZEROSENSE
01f7ba f021              breq    POSTPONE1
01f7bb d8c5              rcall   DOCOMMAXT
01f7bc e102              fdw     DOCOMMAXT
01f7bd 940d ffa9         jmp     ICOMMA
                 POSTPONE1:
01f7bf 940d f125         jmp     COMMAXT
                 
                 
                 IDP_L:
01f7c1 6983
01f7c2 7064              .db     NFA|3,"idp"
                 IDP:
01f7c3 d8a1              rcall   DOCREATE
01f7c4 03ba              .dw     dpFLASH
                 
                 ;***************************************************************
                 ; (DOES>)  --      run-time action of DOES>
                 ;        .dw    link
                 ;link   set     $
01f7c5 2887
01f7c6 6f64
01f7c7 7365
01f7c8 293e              .db     NFA|7,"(does>)"
                 XDOES:
01f7c9 91ff              m_pop_zh
01f7ca da85              rcall   RFROM
01f7cb d087              rcall   LATEST_
01f7cc de9c              rcall   FETCH_A
01f7cd dd29              rcall   NFATOCFA
01f7ce dff4              rcall   IDP
01f7cf de99              rcall   FETCH_A
01f7d0 decf              rcall   TOR_A
01f7d1 dff1              rcall   IDP
01f7d2 dd1f              rcall   STORE_A
01f7d3 0f88              lsl     tosl
01f7d4 1f99              rol     tosh
01f7d5 d958              rcall   STORECFF1 ; Always stores a 4 byte call
01f7d6 da79              rcall   RFROM
01f7d7 dfeb              rcall   IDP
01f7d8 940d fe8a         jmp     STORE
                 
                 
                 ; DOES>    --      change action of latest def'n
01f7da ef5c              fdw     POSTPONE_L
                 DOES_L:
01f7db 64d5
01f7dc 656f
01f7dd 3e73              .db     NFA|IMMED|COMPILE|5,"does>"
01f7de d8a2      DOES:   rcall   DOCOMMAXT
01f7df ef92              fdw     XDOES
01f7e0 d8a0              rcall   DOCOMMAXT
01f7e1 e0de              fdw     DODOES
01f7e2 9508              ret
                 
                 
                 ;*****************************************************************
                 ; [        --      enter interpretive state
01f7e3 efb6              fdw     DOES_L
                 LEFTBRACKET_L:
01f7e4 5bc1              .db     NFA|IMMED|1,"["
                 LEFTBRACKET:
01f7e5 7000              cbr     t0, 0xff
01f7e6 9300 03c7         sts     state, t0
01f7e8 9508              ret
                 
                 
                 ; ]        --      enter compiling state
01f7e9 efc8              fdw     LEFTBRACKET_L
                 RIGHTBRACKET_L:
01f7ea 5d81              .db     NFA|1,"]"
                 RIGHTBRACKET:
01f7eb 6f0f              sbr     t0, 0xff
01f7ec 9300 03c7         sts     state, t0
01f7ee 9508              ret
                 
                 ; :        --           begin a colon definition
01f7ef efd4              fdw     RIGHTBRACKET_L
                 COLON_L:
01f7f0 3a81              .db     NFA|1,":"
                 COLON:
01f7f1 df87              rcall   CREATE
01f7f2 dff8              rcall   RIGHTBRACKET
01f7f3 940d f145         jmp     STORCOLON
                 
                 ; :noname        -- a          define headerless forth code
01f7f5 efe0              fdw     COLON_L
                 NONAME_L:
01f7f6 3a87
01f7f7 6f6e
01f7f8 616e
01f7f9 656d              .db     NFA|7,":noname"
                 NONAME:
01f7fa df61              rcall   IHERE
01f7fb 940d f7eb         jmp     RIGHTBRACKET
                 
                 ; ;        --             end a colon definition
01f7fd efec              fdw     NONAME_L
                 SEMICOLON_L:
01f7fe 3bd1              .db     NFA|IMMED|COMPILE|1,";"
                 SEMICOLON:
01f7ff dfe5              rcall   LEFTBRACKET
01f800 fd61              sbrc    FLAGS1, fTAILC
01f801 c025              rjmp    ADD_RETURN_1
01f802 df59              rcall   IHERE
01f803 d02a              rcall   MINUS_FETCH
01f804 018c              movw    t0, tosl
01f805 7f10              andi    t1, 0xf0
01f806 5d10              subi    t1, 0xd0
01f807 f059              breq    RCALL_TO_JMP
01f808 9189
01f809 9199              poptos
01f80a d023              rcall   MINUS_FETCH
                 .ifdef EIND
01f80b 508f              subi    tosl, 0x0f
                 .else
                 .endif
01f80c 4994              sbci    tosh, 0x94
01f80d f4c1              brne    ADD_RETURN
                 CALL_TO_JMP:
                 .ifdef EIND
01f80e e08d              ldi     tosl, 0x0d
                 .else
                 .endif
01f80f e994              ldi     tosh, 0x94
01f810 da1a              rcall   SWOP
01f811 940d fe8a         jmp     STORE
                 RCALL_TO_JMP:
01f813 db88              rcall   NIP
01f814 709f              andi    tosh, 0x0f
01f815 fd93              sbrc    tosh, 3
01f816 6f90              ori     tosh, 0xf0
01f817 daa8              rcall   TWOSTAR
01f818 df43              rcall   IHERE
01f819 da53              rcall   PLUS
01f81a df0b              rcall   DOLIT
01f81b fffe              .dw     -2
01f81c d0fc              rcall   IALLOT
01f81d df08              rcall   DOLIT
                 .ifdef EIND
01f81e 940d              .dw     0x940d
                 .else
                 .endif
01f81f 940f ffa9         call    ICOMMA
                         sub_pflash_tos
01f821 9408              rampv_to_c
01f822 9597              ror     tosh
01f823 9587              ror     tosl
01f824 940d ffa9         jmp     ICOMMA
                 ADD_RETURN:
01f826 d938              rcall   TWODROP
                 ADD_RETURN_1:
01f827 defe              rcall   DOLIT   ; Compile a ret
01f828 9508              .dw     0x9508
01f829 940d ffa9         jmp    ICOMMA
                 
                 
                 
01f82b effc              fdw     SEMICOLON_L
                 MINUS_FETCH_L:
01f82c 2d82
01f82d 0040              .db     NFA|2,"-@",0
                 MINUS_FETCH:
01f82e d00c              rcall   TWOMINUS
01f82f df00              rcall   DUP
01f830 940d fed5         jmp     FETCH
                 
                 ; [']  --         find word & compile as DOLITeral
01f832 f058              fdw     MINUS_FETCH_L
                 BRACTICK_L:
01f833 5bd3
01f834 5d27              .db     NFA|IMMED|COMPILE|3,"[']"
                 BRACTICK:
01f835 df0d              rcall   TICK       ; get xt of 'xxx'
01f836 940d fe5c         jmp     LITERAL
                 
                 ; 2-    n -- n-2
01f838 f066              fdw     BRACTICK_L
                 TWOMINUS_L:
01f839 32a2
01f83a 002d              .db     NFA|INLINE|2,"2-",0
                 TWOMINUS:
01f83b 9702              sbiw    tosl, 2
01f83c 9508              ret
                 
                         
                 ; BL      -- char                 an ASCII space
01f83d f072              fdw     TWOMINUS_L
                 BL_l:
01f83e 6282
01f83f 006c              .db     NFA|2,"bl",0
                 BL:
01f840 940f f065         call    DOCREATE
01f842 0020              .dw     ' '
                 
                 ; STATE   -- flag                 holds compiler state
01f843 f07c              fdw     BL_L
                 STATE_L:
01f844 7385
01f845 6174
01f846 6574              .db     NFA|5,"state"
                 STATE_:
01f847 939a
01f848 938a              pushtos
01f849 9180 03c7         lds     tosl, state
01f84b 9190 03c7         lds     tosh, state
01f84d 9508              ret
                 
                 ; LATEST    -- a-addr           
01f84e f088              fdw     STATE_L
                 LATEST_L:
01f84f 6c86
01f850 7461
01f851 7365
01f852 0074              .db     NFA|6,"latest",0
                 LATEST_:
01f853 940f f065         call    DOCREATE
01f855 03c0              .dw     dpLATEST
                 
                 ; S0       -- a-addr      start of parameter stack
01f856 f09e              fdw     LATEST_L
                 S0_L:
01f857 7382
01f858 0030              .db     NFA|2,"s0",0
                 S0:
01f859 dc21              rcall   DOUSER
01f85a ffe4              .dw     us0
                         
                 ; R0       -- a-addr      start of parameter stack
01f85b f0ae              fdw     S0_L
                 R0_L:
01f85c 7282
01f85d 0030              .db     NFA|2,"r0",0
                 R0_:
01f85e dc1c              rcall   DOUSER
01f85f ffe6              .dw     ur0
                         
                 ; ini -- a-addr       ini variable contains the user-start xt
                 ; In RAM
                 ;        .dw     link
                 ;link    set     $
01f860 6983
01f861 696e              .db     NFA|3,"ini"
                 INI:
01f862 940f f065          call   DOCREATE
01f864 03b8              .dw     dpSTART
                 
                 ; ticks  -- u      system ticks (0-ffff) in milliseconds
01f865 f0b8              fdw     R0_L
                 TICKS_L:
01f866 7485
01f867 6369
01f868 736b              .db     NFA|5,"ticks"
                 TICKS:  
01f869 939a
01f86a 938a              pushtos
01f86b b70f              in_     t0, SREG
01f86c 94f8              cli
01f86d 2d8e              mov     tosl, ms_count
01f86e 2d9f              mov     tosh, ms_count1
01f86f bf0f              out_    SREG, t0
01f870 9508              ret
                 
                         
                 ; ms  +n --      Pause for n millisconds
                 ; : ms ( +n -- )     
                 ;   ticks -
                 ;   begin
                 ;     pause dup ticks - 0<
                 ;   until drop ;
                 ;
01f871 f0cc              fdw     TICKS_L
                 MS_L:
01f872 6d82
01f873 0073              .db     NFA|2,"ms",0
                 MS:
01f874 dff4              rcall   TICKS
01f875 d9f7              rcall   PLUS
                 MS1:    
01f876 d712              rcall   PAUSE
01f877 deb8              rcall   DUP
01f878 dff0              rcall   TICKS
01f879 da00              rcall   MINUS
01f87a dec2              rcall   ZEROLESS
01f87b dadf              rcall   ZEROSENSE
01f87c f3c9              breq    MS1
01f87d 940d f224         jmp     DROP
                 
                 ;  .id ( nfa -- ) 
01f87f f0e4              fdw     MS_L
                 DOTID_L:
01f880 2e83
01f881 6469              .db     NFA|3,".id"
                 DOTID:
01f882 dc61              rcall   CFETCHPP
01f883 dea2              rcall   DOLIT
01f884 000f              .dw     0x0f
01f885 d9fd              rcall   AND_
01f886 d9be              rcall   TOR
01f887 c003              rjmp    DOTID3
                 DOTID1:
01f888 dc5b              rcall   CFETCHPP
01f889 d00a              rcall   TO_PRINTABLE
01f88a dee7              rcall   EMIT_A
                 DOTID3:
01f88b d15d              rcall   XNEXT
01f88c f7d8              brcc    DOTID1  
01f88d 911f              pop     t1
01f88e 910f              pop     t0
01f88f 940d f224         jmp     DROP
                 
                  ; >pr   c -- c      Filter a character to printable 7-bit ASCII
01f891 f100              fdw     DOTID_L
                 TO_PRINTABLE_L:
01f892 3e83
01f893 7270              .db     NFA|3,">pr"
                 TO_PRINTABLE:
01f894 2799              clr     tosh   
01f895 3080              cpi     tosl, 0
01f896 f012              brmi    TO_PRINTABLE1
01f897 3280              cpi     tosl, 0x20
01f898 f40a              brpl    TO_PRINTABLE2
                 TO_PRINTABLE1:
01f899 e28e              ldi     tosl, '.'
                 TO_PRINTABLE2:
01f89a 9508              ret
                 
                 ;;;;;;;;;;;;;;
                 LIKEQ:
01f89b dc48              rcall   CFETCHPP
01f89c de89              rcall   DOLIT
01f89d 000f              .dw     0x0f
01f89e d9e4              rcall   AND_
01f89f d98b              rcall   SWOP
01f8a0 da66              rcall   STORE_P
01f8a1 d989              rcall   SWOP
01f8a2 dc41              rcall   CFETCHPP
01f8a3 d999              rcall   ROT
01f8a4 d990              rcall   OVER
01f8a5 d9d4              rcall   MINUS
01f8a6 da04              rcall   ONEPLUS
01f8a7 de22              rcall   FALSE_
01f8a8 db0a              rcall   MAX
01f8a9 d99b              rcall   TOR
01f8aa c009              rjmp    LIKEQ3
                 LIKEQ1:
01f8ab d8ba              rcall   TWODUP
01f8ac d225              rcall   FETCH_P
01f8ad da8e              rcall   PPLUS
01f8ae d97c              rcall   SWOP
01f8af 940f 7f00         call    CMP
01f8b1 f011              breq    LIKEQ3
                 TWODROPNZ:
01f8b2 9498              clz
01f8b3 c003              rjmp    LIKEQ4
                 LIKEQ3:
01f8b4 d134              rcall   XNEXT
01f8b5 f7a8              brcc    LIKEQ1
                 TWODROPZ:
01f8b6 9418              sez
                 LIKEQ4:
01f8b7 911f              pop     t1
01f8b8 910f              pop     t0
01f8b9 c00a              rjmp    TWODROP__
                 
                 ;;;;;;;;;;;;;;;;;;;;
                 LIKES:
01f8ba d8ab              rcall   TWODUP
01f8bb dfdf              rcall   LIKEQ
01f8bc f019              breq    LIKES1
01f8bd de72              rcall   DUP
01f8be dfc3              rcall   DOTID
01f8bf d8b6              rcall   SPACE_
                 LIKES1:
01f8c0 df7a              rcall   TWOMINUS
01f8c1 dda7              rcall   FETCH_A
01f8c2 da9e              rcall   DUPZEROSENSE
01f8c3 f7b1              brne    LIKES
                 TWODROP__:
01f8c4 940d f15f         jmp     TWODROP
                 
                  ; WORDS    -- filter
01f8c6 f124              fdw     TO_PRINTABLE_L
                 WORDS_L:
01f8c7 7785
01f8c8 726f
01f8c9 7364              .db     NFA|5,"words"
01f8ca df75              rcall   BL
01f8cb dbf3              rcall   WORD
01f8cc de63              rcall   DUP
01f8cd de58              rcall   DOLIT
01f8ce f5be              fdw     kernellink
01f8cf d002              rcall   WDS1
01f8d0 df82              rcall   LATEST_
01f8d1 dd97              rcall   FETCH_A
01f8d2 de9a      WDS1:   rcall   CR
01f8d3 940d f8ba         jmp     LIKES
                 
                 ; .S      --           print stack contents
                 ; : .s space sp@ s0 @ 2- begin 2dup < while -@ u. repeat 2drop ;
01f8d5 f18e              fdw     WORDS_L
                 DOTS_L:
01f8d6 2e82
01f8d7 0073              .db     NFA|2,".s",0
                 DOTS:
01f8d8 d89d              rcall   SPACE_
01f8d9 de56              rcall   DUP          ; push tosl:tosh to memory
01f8da 940f f08e         call    SPFETCH
01f8dc df7c              rcall   S0
01f8dd dd8b              rcall   FETCH_A
01f8de df5c              rcall   TWOMINUS
                 DOTS1:
01f8df d886              rcall   TWODUP
01f8e0 da0e              rcall   LESS
01f8e1 da79              rcall   ZEROSENSE
01f8e2 f019              breq    DOTS2
01f8e3 df4a              rcall   MINUS_FETCH
01f8e4 db29              rcall   UDOT
01f8e5 cff9              rjmp    DOTS1
                 DOTS2:  
01f8e6 d93d              rcall   DROP
01f8e7 940d f15f         jmp     TWODROP
                 
                 ;   DUMP  ADDR U --       DISPLAY MEMORY
01f8e9 f1ac              fdw     DOTS_L
                 DUMP_L:
01f8ea 6484
01f8eb 6d75
01f8ec 0070              .db     NFA|4,"dump",0
                 DUMP:
01f8ed de38              rcall   DOLIT
01f8ee 0010              .dw     16
01f8ef da8f              rcall   USLASH
01f8f0 d954              rcall   TOR
01f8f1 c020              rjmp    DUMP7
                 DUMP1:  
01f8f2 de7a              rcall   CR
01f8f3 de3c              rcall   DUP
01f8f4 de31              rcall   DOLIT
01f8f5 0004              .dw     4
01f8f6 db21              rcall   UDOTR
01f8f7 de2e              rcall   DOLIT
01f8f8 003a              .dw     ':'
01f8f9 de78              rcall   EMIT_A
01f8fa de2b              rcall   DOLIT
01f8fb 000f              .dw     15
01f8fc d948              rcall   TOR
                 DUMP2:
01f8fd dbe6              rcall   CFETCHPP
01f8fe de27              rcall   DOLIT
01f8ff 0002              .dw     2
01f900 db17              rcall   UDOTR
01f901 d0e7              rcall   XNEXT
01f902 f7d0              brcc    DUMP2
01f903 911f              pop     t1
01f904 910f              pop     t0
                 
01f905 de20              rcall   DOLIT
01f906 0010              .dw     16
01f907 d972              rcall   MINUS
01f908 de1d              rcall   DOLIT
01f909 000f              .dw     15
01f90a d93a              rcall   TOR
                 DUMP4:  
01f90b dbd8              rcall   CFETCHPP
01f90c df87              rcall   TO_PRINTABLE
01f90d de64              rcall   EMIT_A
01f90e d0da              rcall   XNEXT
01f90f f7d8              brcc    DUMP4
01f910 911f              pop     t1
01f911 910f              pop     t0
                 DUMP7:
01f912 d0d6              rcall   XNEXT
01f913 f6f0              brcc    DUMP1
01f914 911f              pop     t1
01f915 910f              pop     t0
01f916 940d f224         jmp     DROP
                 
                 ; IALLOT   n --    allocate n bytes in ROM
                 ;       .dw     link
                 ;link   set     $
01f918 2081              .db     NFA|1," "
                 IALLOT:
01f919 dea9              rcall   IDP
01f91a 940d f2cc         jmp     PLUSSTORE
                     
                 
                 ;***************************************************************
                 ;  Store the execcution vector addr to the return stack
                 ; leave the updated return stack pointer on the data stack
                 ; x>r ( addr rsp -- rsp' )
01f91c f1d4              fdw     DUMP_L
                 X_TO_R_L:
01f91d 7883
01f91e 723e              .db     NFA|3,"x>r"
                 X_TO_R:
01f91f 01fc              movw    zl, tosl
01f920 9189
01f921 9199              poptos
01f922 d00a              rcall   TO_XA
01f923 9631              adiw    zl, 1
01f924 9382              st      -z, tosl
01f925 9392              st      -z, tosh
                 .ifdef EIND
01f926 9262              st      -z, r_one
                 .endif
01f927 9252              st      -z, zero
01f928 01cf              movw    tosl, zl
01f929 9508              ret
                 ;***************************************************************
01f92a f23a              fdw     X_TO_R_L
                 TO_XA_L:
01f92b 3e83
01f92c 6178              .db NFA|3,">xa"
                 TO_XA:
                          sub_pflash_tos
01f92d 9408               rampv_to_c
01f92e 9597               ror tosh
01f92f 9587               ror tosl
01f930 9508               ret
                 
01f931 f256               fdw     TO_XA_L
                 XA_FROM_L:
01f932 7883
01f933 3e61              .db NFA|3,"xa>"
                 XA_FROM:
01f934 0f88               lsl     tosl
01f935 1f99               rol     tosh
                          add_pflash_tos
01f936 9508               ret
                 ;***************************************************************
01f937 f264               fdw    XA_FROM_L
                 PFL_L:
01f938 7083
01f939 6c66              .db     NFA|3,"pfl"
                 PFL:
01f93a 940f f065          call   DOCREATE
01f93c 3200              .dw     OFLASH
                 ;***************************************************************
01f93d f270              fdw    PFL_L
                 ZFL_L:
01f93e 7a83
01f93f 6c66              .db     NFA|3, "zfl"
                 ZFL:
01f940 940f f065          call   DOCREATE
01f942 0003              .dw     RAMPZV
                 ;***************************************************************
                 ; ,?0=    -- addr  Compile ?0= and make make place for a branch instruction
01f943 2c84
01f944 303f
01f945 003d              .db     NFA|4, ",?0=",0    ; Just for see to work !
                 COMMAZEROSENSE:
01f946 fd65              sbrc    FLAGS1, idup
01f947 c003              rjmp    COMMAZEROSENSE1
01f948 dddd              rcall   DOLIT
01f949 e6b6              fdw     ZEROSENSE
01f94a c003              rjmp    COMMAZEROSENSE2
                 COMMAZEROSENSE1:
01f94b d004              rcall   IDPMINUS
01f94c ddd9              rcall   DOLIT
01f94d e6c2              fdw     DUPZEROSENSE
                 COMMAZEROSENSE2:
01f94e 7d6f              cbr     FLAGS1, (1<<idup)
01f94f c070              rjmp    INLINE0
                 
                 IDPMINUS:
01f950 ddd5              rcall   DOLIT
01f951 fffc              .dw     -4
01f952 cfc6              rjmp    IALLOT
                 
                 ;       rjmp, ( rel-addr -- )
                 RJMPC:
01f953 d972              rcall   TWOSLASH
01f954 709f              andi    tosh, 0x0f
01f955 6c90              ori     tosh, 0xc0
01f956 940d ffa9         jmp     ICOMMA
                 
                 
                 BRCCC:
01f958 ddcd              rcall   DOLIT
01f959 f008              .dw     0xf008      ; brcc pc+2
01f95a 940d ffa9         jmp     ICOMMA
                 ;BREQC:
                 ;        rcall   DOLIT
                 ;        .dw     0xf009      ; breq pc+2
                 ;        sbrc    FLAGS1, izeroeq
                 ;        ori     tosh, 4     ; brne pc+2
                 ;        jmp     ICOMMA
                 BRNEC:
01f95c ddc9              rcall   DOLIT
01f95d f409              .dw     0xf409      ; brne pc+2
01f95e fd64              sbrc    FLAGS1, izeroeq
01f95f 7f9b              andi    tosh, ~4
01f960 940d ffa9         jmp     ICOMMA
                 
                 ; IF       -- adrs   conditional forward branch
                 ; Leaves address of branch instruction 
                 ; and compiles the condition byte
01f962 f27c              fdw     ZFL_L
                 IF_L:
01f963 69d2
01f964 0066              .db     NFA|IMMED|COMPILE|2,"if",0
                 IF_:
01f965 fd64              sbrc    FLAGS1, izeroeq
01f966 dfe9              rcall   IDPMINUS
01f967 dfde              rcall   COMMAZEROSENSE
01f968 dff3              rcall   BRNEC
01f969 7e6f              cbr     FLAGS1, (1<<izeroeq)
01f96a ddf1              rcall   IHERE
01f96b dd5e              rcall   FALSE_
01f96c 940d f953         jmp     RJMPC           ; Dummy, replaced by THEN with rjmp 
                 
                 ; ELSE     adrs1 -- adrs2    branch for IF..ELSE
                 ; Leave adrs2 of bra instruction and store bz in adrs1
                 ; Leave adress of branch instruction and FALSE flag on stack
01f96e f2c6              fdw     IF_L
                 ELSE_L:
01f96f 65d4
01f970 736c
01f971 0065              .db     NFA|IMMED|COMPILE|4,"else",0
                 ELSE_:
01f972 dde9              rcall   IHERE
01f973 dd56              rcall   FALSE_
01f974 dfde              rcall   RJMPC
01f975 dc6a              rcall   SWOP_A      ; else-addr  if-addr 
01f976 940d f97c         jmp     THEN_
                 
                 ; THEN     adrs  --        resolve forward branch
01f978 f2de              fdw     ELSE_L
                 THEN_L:
01f979 74d4
01f97a 6568
01f97b 006e              .db     NFA|IMMED|COMPILE|4,"then",0
                 THEN_:
01f97c 6062              sbr     FLAGS1, (1<<fTAILC)  ; Prevent tailjmp  optimisation
01f97d ddde              rcall   IHERE
01f97e d8b6              rcall   OVER
01f97f d8fa              rcall   MINUS
01f980 deba              rcall   TWOMINUS
01f981 d944              rcall   TWOSLASH
01f982 dda3              rcall   DOLIT
01f983 c000              .dw     0xc000      ;  back-addr mask 
01f984 d906              rcall   OR_
01f985 dc5a              rcall   SWOP_A
01f986 940d fe8a         jmp     STORE
                 
                 ; BEGIN    -- adrs        target for bwd. branch
01f988 f2f2              fdw     THEN_L
                 BEGIN_L:
01f989 62d5
01f98a 6765
01f98b 6e69              .db     NFA|IMMED|COMPILE|5,"begin"
                 BEGIN:
01f98c 940d f75c         jmp     IHERE
                 
                 ; UNTIL    adrs --   Branch bakwards if true
01f98e f312              fdw     BEGIN_L
                 UNTIL_L:
01f98f 75d5
01f990 746e
01f991 6c69              .db     NFA|IMMED|COMPILE|5,"until"
                 UNTIL:
01f992 6062              sbr     FLAGS1, (1<<fTAILC)  ; Prevent tailjmp  optimisation
01f993 fd64              sbrc    FLAGS1, izeroeq
01f994 dfbb              rcall   IDPMINUS
01f995 dfb0              rcall   COMMAZEROSENSE
01f996 dfc5              rcall   BRNEC
01f997 7e6f              cbr     FLAGS1, (1<<izeroeq)
01f998 940d f99e         jmp     AGAIN_
                 
                                                 ; AGAIN    adrs --      uncond'l backward branch
                 ;   unconditional backward branch
01f99a f31e              fdw     UNTIL_L
                 AGAIN_L:
01f99b 61d5
01f99c 6167
01f99d 6e69              .db     NFA|IMMED|COMPILE|5,"again"
                 AGAIN_:
01f99e 6062              sbr     FLAGS1, (1<<fTAILC)  ; Prevent tailjmp  optimisation
01f99f ddbc              rcall   IHERE
01f9a0 d8d9              rcall   MINUS
01f9a1 de99              rcall   TWOMINUS
01f9a2 940d f953         jmp     RJMPC
                 
                 ; WHILE    addr1 -- addr2 addr1         branch for WHILE loop
                 ; addr1 : address of BEGIN
                 ; addr2 : address where to store bz instruction
01f9a4 f336              fdw     AGAIN_L
                 WHILE_L:
01f9a5 77d5
01f9a6 6968
01f9a7 656c              .db     NFA|IMMED|COMPILE|5,"while"
                 WHILE_:
01f9a8 dfbc              rcall   IF_
01f9a9 940d f22b         jmp     SWOP
                 
                 ; REPEAT   addr2 addr1 --     resolve WHILE loop
01f9ab f34a              fdw     WHILE_L
                 REPEAT_L:
01f9ac 72d6
01f9ad 7065
01f9ae 6165
01f9af 0074              .db     NFA|IMMED|COMPILE|6,"repeat",0
                 REPEAT_:
01f9b0 dfed              rcall   AGAIN_
01f9b1 940d f97c         jmp     THEN_
                 
01f9b3 f358              fdw     REPEAT_L
                 INLINE_L:
01f9b4 69d6
01f9b5 6c6e
01f9b6 6e69
01f9b7 0065              .db      NFA|IMMED|COMPILE|6,"inline",0
01f9b8 7e6f              cbr      FLAGS1, (1<<izeroeq)
01f9b9 7d6f              cbr      FLAGS1, (1<<idup)
01f9ba dd88              rcall    TICK
01f9bb 940d f9c0         jmp      INLINE0
                 ; in, ( addr -- ) begin @+ dup $9508 <> while i, repeat 2drop ;
01f9bd f368              fdw      INLINE_L
                 INLINEC_L:
01f9be 6983
01f9bf 2c6e              .db      NFA|3,"in,"
                 INLINE0:        
01f9c0 db2b              rcall   FETCHPP
01f9c1 dd6e              rcall   DUP
01f9c2 dd63              rcall   DOLIT
01f9c3 9508              .dw     0x9508
01f9c4 d91d              rcall   NOTEQUAL
01f9c5 d995              rcall   ZEROSENSE
01f9c6 f011              breq    INLINE1
01f9c7 d5e1              rcall   ICOMMA
01f9c8 cff7              rjmp    INLINE0
                 INLINE1:
01f9c9 940d f15f         jmp     TWODROP
                 
                 ; FOR   -- bc-addr bra-addr
01f9cb f37c              fdw     INLINEC_L
                 FOR_L:
01f9cc 66d3
01f9cd 726f              .db     NFA|IMMED|COMPILE|3,"for"
                 FOR:
01f9ce 940f f081         call    DOCOMMAXT
01f9d0 e48a              fdw     TOR
01f9d1 dd8a              rcall   IHERE
01f9d2 dcf7              rcall   FALSE_
01f9d3 df7f              rcall   RJMPC
01f9d4 dd87              rcall   IHERE
01f9d5 940d f22b         jmp     SWOP
                 
                 ; NEXT bra-addr bc-addr --
01f9d7 f398              fdw     FOR_L
                 NEXT_L:
01f9d8 6ed4
01f9d9 7865
01f9da 0074              .db     NFA|IMMED|COMPILE|4,"next", 0
                 NEXT:
01f9db dfa0              rcall   THEN_
01f9dc 940f f081         call    DOCOMMAXT
01f9de f3d2              fdw     XNEXT
01f9df df78              rcall   BRCCC
                 
01f9e0 dfbd              rcall   AGAIN_
                 
01f9e1 dd44              rcall   DOLIT
01f9e2 f3e6              fdw     XNEXT1
01f9e3 940d f9c0         jmp     INLINE0
                 ; (next) decrement top of return stack
01f9e5 2887
01f9e6 656e
01f9e7 7478
01f9e8 2029              .db     NFA|7,"(next) "
                 XNEXT:  
01f9e9 91ff              m_pop_zh
01f9ea 91ff              pop     zh
01f9eb 91ef              pop     zl
01f9ec 91bf              pop     xh
01f9ed 91af              pop     xl
01f9ee 9711              sbiw    xl, 1
01f9ef 93af              push    xl
01f9f0 93bf              push    xh
01f9f1 9419              mijmp
01f9f2 9508              ret
                 XNEXT1:
01f9f3 911f              pop     t1
01f9f4 910f              pop     t0
01f9f5 9508              ret
                 
                 ; leave clear top of return stack
01f9f6 f3b0              fdw     NEXT_L
                 LEAVE_L:
01f9f7 6595
01f9f8 646e
01f9f9 7469              .db     NFA|COMPILE|5,"endit"
                 LEAVE:
01f9fa 91ff              m_pop_zh
01f9fb 91ff              pop     zh
01f9fc 91ef              pop     zl
01f9fd 911f              pop     t1
01f9fe 910f              pop     t0
01f9ff 925f              push    zero
01fa00 925f              push    zero
01fa01 9419              mijmp
                 ;***************************************************
                 ; RDROP compile a pop
01fa02 f3ee              fdw      LEAVE_L
                 RDROP_L:
01fa03 72d5
01fa04 7264
01fa05 706f              .db      NFA|IMMED|COMPILE|5,"rdrop"
                 RDROP:
01fa06 dd1f              rcall   DOLIT
01fa07 f3e6              fdw     XNEXT1
01fa08 940d f9c0         jmp     INLINE0
                 ;***************************************************
01fa0a f406              fdw     RDROP_L
                 STOD_L:
01fa0b 7383
01fa0c 643e              .db     NFA|3,"s>d"
                 STOD:
01fa0d ff97              sbrs    tosh, 7
01fa0e ccbb              rjmp    FALSE_
01fa0f ccc2              rjmp    TRUE_
                 ;***************************************************
01fa10 f416              fdw     STOD_L
                 DNEGATE_L:
01fa11 6487
01fa12 656e
01fa13 6167
01fa14 6574              .db     NFA|7,"dnegate"
                 DNEGATE:
01fa15 d049              rcall   DINVERT
01fa16 940f f199         call    ONE
01fa18 940d f275         jmp     MPLUS
                 ;***************************************************
01fa1a f422              fdw     DNEGATE_L
                 QDNEGATE_L:
01fa1b 3f88
01fa1c 6e64
01fa1d 6765
01fa1e 7461
01fa1f 0065              .db     NFA|8,"?dnegate",0
                 QDNEGATE:
01fa20 dd1c              rcall   ZEROLESS
01fa21 d939              rcall   ZEROSENSE
01fa22 f009              breq    QDNEGATE1
01fa23 dff1              rcall   DNEGATE
                 QDNEGATE1:
01fa24 9508              ret
                 
                 ;***************************************************
01fa25 f436              fdw     QDNEGATE_L
                 DABS_L:
01fa26 6484
01fa27 6261
01fa28 0073              .db     NFA|4,"dabs",0
                 DABS:
01fa29 dd06              rcall   DUP
01fa2a 940d fa20         jmp     QDNEGATE
                 ;***************************************************
01fa2c f44c              fdw     DABS_L
                 DPLUS_L:
01fa2d 6482
01fa2e 002b              .db     NFA|2,"d+",0
                 DPLUS:
01fa2f 91a9              ld      xl, Y+
01fa30 91b9              ld      xh, Y+
01fa31 91e9              ld      t6, Y+
01fa32 91f9              ld      t7, Y+
01fa33 9109              ld      t0, Y+
01fa34 9119              ld      t1, Y+
01fa35 0fa0              add     xl, t0
01fa36 1fb1              adc     xh, t1
01fa37 1f8e              adc     tosl, t6
01fa38 1f9f              adc     tosh, t7
01fa39 93ba              st      -Y, xh
01fa3a 93aa              st      -Y, xl
01fa3b 9508              ret
                 
                 ;***************************************************
01fa3c f45a              fdw     DPLUS_L
                 DMINUS_L:
01fa3d 6482
01fa3e 002d              .db     NFA|2,"d-",0
                 DMINUS:
01fa3f dfd5              rcall   DNEGATE
01fa40 940d fa2f         jmp     DPLUS
                 ;***************************************************
01fa42 f47a              fdw     DMINUS_L
                 DTWOSLASH_L:
01fa43 6483
01fa44 2f32              .db     NFA|3,"d2/"
01fa45 9109              ld      t0, y+
01fa46 9119              ld      t1, y+
01fa47 9595              asr     tosh
01fa48 9587              ror     tosl
01fa49 9517              ror     t1
01fa4a 9507              ror     t0
01fa4b 931a              st      -y, t1
01fa4c 930a              st      -y, t0
01fa4d 9508              ret
                 ;***************************************************
01fa4e f486              fdw     DTWOSLASH_L
                 DTWOSTAR_L:
01fa4f 6483
01fa50 2a32              .db     NFA|3,"d2*"
01fa51 9109              ld      t0, y+
01fa52 9119              ld      t1, y+
01fa53 0f00              lsl     t0
01fa54 1f11              rol     t1
01fa55 1f88              rol     tosl
01fa56 1f99              rol     tosh
01fa57 931a              st      -y, t1
01fa58 930a              st      -y, t0
01fa59 9508              ret
                 ;***************************************************
01fa5a f49e              fdw     DTWOSTAR_L
                 DINVERT_L:
01fa5b 6487
01fa5c 6e69
01fa5d 6576
01fa5e 7472              .db     NFA|7,"dinvert"
                 DINVERT:
01fa5f 9109              ld      t0, y+
01fa60 9119              ld      t1, y+
01fa61 9500              com     t0
01fa62 9510              com     t1
01fa63 9580              com     tosl
01fa64 9590              com     tosh
01fa65 931a              st      -y, t1
01fa66 930a              st      -y, t0
01fa67 9508              ret
                 ;***************************************************
01fa68 f4b6              fdw     DINVERT_L
                 DZEROEQUAL_L:
01fa69 6483
01fa6a 3d30              .db     NFA|3,"d0="
                 DZEROEQUAL:
01fa6b 91a9              ld      xl, y+
01fa6c 91b9              ld      xh, y+
01fa6d 2b89              or      tosl, tosh
01fa6e 2b8a              or      tosl, xl
01fa6f 2b8b              or      tosl, xh
01fa70 f451              brne    DZEROLESS_FALSE
                 DZEROEQUAL_TRUE:
01fa71 ef8f              ser     tosl
01fa72 ef9f              ser     tosh
01fa73 9508              ret
                 
                 ;***************************************************
01fa74 f4d2              fdw     DZEROEQUAL_L
                 DZEROLESS_L:
01fa75 6483
01fa76 3c30              .db     NFA|3,"d0<"
                 DZEROLESS:
01fa77 91a9              ld      xl, y+
01fa78 91b9              ld      xh, y+
01fa79 3090              cpi     tosh, 0
01fa7a f3b2              brmi    DZEROEQUAL_TRUE
                 DZEROLESS_FALSE:
01fa7b 2788              clr     tosl
01fa7c 2799              clr     tosh
01fa7d 9508              ret
                 ;***************************************************
01fa7e f4ea              fdw     DZEROLESS_L
                 DEQUAL_L:
01fa7f 6482
01fa80 003d              .db     NFA|2,"d=",0
01fa81 dfbd              rcall   DMINUS
01fa82 940d fa6b         jmp     DZEROEQUAL
                 ;***************************************************
01fa84 f4fe              fdw     DEQUAL_L
                 DLESS_L:
01fa85 6482
01fa86 003c              .db     NFA|2,"d<",0
                 DLESS:
01fa87 dfb7              rcall   DMINUS
01fa88 940d fa77         jmp     DZEROLESS
                 ;***************************************************
01fa8a f50a              fdw     DLESS_L
                 DGREATER_L:
01fa8b 6482
01fa8c 003e              .db     NFA|2,"d>",0
                 DGREATER:
01fa8d 940f f16d         call    TWOSWAP
01fa8f 940d fa87         jmp     DLESS
                 ;***************************************************
01fa91 f516              fdw     DGREATER_L
                 UDDOT_L:
01fa92 7583
01fa93 2e64              .db     NFA|3,"ud."
01fa94 d942              rcall   LESSNUM
01fa95 d95a              rcall   NUMS
01fa96 d962              rcall   NUMGREATER
01fa97 940f f1e0         call    TYPE
01fa99 940d f176         jmp     SPACE_
                 ;***************************************************
01fa9b f524              fdw     UDDOT_L
                 DDOT_L:
01fa9c 6482
01fa9d 002e              .db     NFA|2,"d.",0
01fa9e d938              rcall   LESSNUM
01fa9f 940f f730         call    DUP
01faa1 940f f245         call    TOR
01faa3 df85              rcall   DABS
01faa4 d94b              rcall   NUMS
01faa5 940f f250         call    RFROM
01faa7 d95c              rcall   SIGN
01faa8 d950              rcall   NUMGREATER
01faa9 940f f1e0         call    TYPE
01faab 940d f176         jmp     SPACE_
                 ;****************************************************
01faad f538              fdw      DDOT_L
                 MEMHI_L:
01faae 6882
01faaf 0069              .db     NFA|2,"hi",0
                 MEMHI:
01fab0 dc75              rcall   DOLIT
01fab1 f570              fdw     FLASHHI
01fab2 940f f0d2         call    CSE_
01fab4 940f f26d         call    PLUS
01fab6 940d fed5         jmp     FETCH
                 FLASHHI:
01fab8 ddff              .dw      FLASH_HI
01fab9 31ff              .dw      EEPROM_HI
01faba 21ff              .dw      RAM_HI
                 
                 .if FLASHEND > 0x3fff
                 ;;; x@ ( addrl addru -- x )
01fabb fd98              fdw     A_FROM_L
                 XFETCH_L:
01fabc 7882
01fabd 0040              .db     NFA|2, "x@",0
                 .ifdef RAMPZ
01fabe bf8b      	out_    RAMPZ, tosl
                 .endif
01fabf 9189
01fac0 9199      	poptos
01fac1 01fc              movw    z, tosl
01fac2 9187              lpm_    tosl, z+     ; Fetch from Flash directly
01fac3 9197              lpm_    tosh, z+
                 .ifdef RAMPZ
01fac4 e003              ldi     t0, RAMPZV
01fac5 bf0b              out_    RAMPZ, t0
                 .endif
01fac6 9508      	ret
                 	
                 ;;; x! ( x addrl addru -- )
01fac7 f578              fdw     XFETCH_L
                 XSTORE_L:
01fac8 7882
01fac9 0021              .db     NFA|2, "x!",0
01faca 2f08          	mov     t0, tosl
01facb 940f f224         call    DROP
01facd d241              rcall   XUPDATEBUF
01face c3a3              rjmp    ISTORE1
                 .endif
                 
                 ;***************************************************
                 
01facf f55c              fdw      MEMHI_L
                 L_FETCH_P:
01fad0 40a2
01fad1 0070              .db      NFA|INLINE|2,"@p", 0
                 FETCH_P:
01fad2 939a
01fad3 938a              pushtos
01fad4 01ca              movw    tosl, pl
01fad5 9508              ret
                 ;***************************************************
01fad6 f5a0              fdw     L_FETCH_P
                 L_PCFETCH:
01fad7 7083
01fad8 4063              .db     NFA|3,"pc@" ; ( -- c ) Fetch char from pointer
                 PCFETCH:
01fad9 939a
01fada 938a              pushtos
01fadb 01ca              movw    tosl, pl
01fadc 940d ff02         jmp     CFETCH
                 ;***************************************************
01fade f5ae              fdw      L_PCFETCH
                 L_PTWOPLUS:
                 kernellink:
01fadf 70a3
01fae0 2b32              .db     NFA|INLINE|3,"p2+" ; ( n -- ) Add 2 to p
                 PTWOPLUS:
01fae1 0d47              add     pl, r_two
01fae2 1d55              adc     ph, zero
01fae3 9508              ret
                 
                 ;***************************************************
                 ; marker --- name
01fae4 0000              .dw     0
                 L_MARKER:
                 lastword:
01fae5 6d86
01fae6 7261
01fae7 656b
01fae8 0072              .db     NFA|6,"marker",0
                 MARKER:
01fae9 940f f0b7         call    ROM_
01faeb dc8d              rcall   CREATE
01faec dc39              rcall   DOLIT
01faed 2200              .dw     dp_start
01faee 940f f0dc         call    HERE
01faf0 dbb1              rcall   TEN
01faf1 d9d7              rcall   CMOVE
01faf2 dbaf              rcall   TEN
01faf3 940f f21d         call    ALLOT
01faf5 940f f0c5         call    FRAM
01faf7 dcd1              rcall   XDOES
01faf8 940f f06f         call    DODOES
01fafa dd67              rcall   INI
01fafb dba6              rcall   TEN
01fafc 940d f4c9         jmp     CMOVE
                 
                 .if IDLE_MODE == 1
                 .if CPU_LOAD_LED == 1
                 ;;; Enable load led
01fafe dea4              fdw     BUSY_L
                 LOADON_L:
01faff 6c85
01fb00 616f
01fb01 2b64              .db     NFA|5,"load+"
01fb02 6170              sbr     FLAGS2, (1<<fLOADled)
01fb03 9508              ret
                 
                 ;;; Disable load led
01fb04 f5fe              fdw     LOADON_L
                 LOADOFF_L:
01fb05 6c85
01fb06 616f
01fb07 2d64              .db     NFA|5,"load-"
01fb08 7e7f              cbr     FLAGS2, (1<<fLOADled)
                 .if CPU_LOAD_LED == 1
01fb09 9827              cbi_    CPU_LOAD_DDR, CPU_LOAD_BIT
                 .if CPU_LOAD_LED_POLARITY == 1
01fb0a 982f              cbi_    CPU_LOAD_PORT, CPU_LOAD_BIT
                 .else
                 .endif
                 .endif
01fb0b 9508              ret
                 .endif
                 ;;; 
                 .if CPU_LOAD == 1
                 .if CPU_LOAD_LED == 1
                 .else
                 .endif
                 .endif
                 .endif
                 ;;; *************************************************
                 ;;; WARM user area data
                 .equ warmlitsize= 28
                 WARMLIT:
01fb0c 0200              .dw      0x0200                ; cse, state
01fb0d 0462              .dw      utibbuf-4             ; S0
01fb0e 0425              .dw      usbuf-1               ; R0
01fb0f f96e              fdw      OP_TX_
01fb10 f9bc              fdw      OP_RX_
01fb11 f9fc              fdw      OP_RXQ
01fb12 000a              .dw      BASE_DEFAULT          ; BASE
01fb13 0466              .dw      utibbuf               ; TIB
01fb14 de8c              fdw      OPERATOR_AREA         ; TASK
01fb15 0000              .dw      0                     ; ustatus & uflg
01fb16 0000              .dw      0                     ; source
01fb17 0000              .dw      0                     ; source
01fb18 0000              .dw      0                     ; TOIN
01fb19 03e4              .dw      up0                   ; Task link
                 
                 .ifdef UCSR1A
                 ;***************************************************
                 ; TX1   c --    output character to UART 1
01fb1a f9f6              fdw     RX0Q_L
                 TX1_L:
01fb1b 7483
01fb1c 3178              .db     NFA|3,"tx1"
                 TX1_:
01fb1d 3181              cpi     tosl, XON
01fb1e f061              breq    XXON_TX1_TOS
01fb1f 3183              cpi     tosl, XOFF
01fb20 f091              breq    XXOFF_TX1_TOS
                 TX1_LOOP:
01fb21 d467              rcall   PAUSE
01fb22 9100 00c8         in_     t0, UCSR1A
01fb24 ff05              sbrs    t0, UDRE1
01fb25 cffb              rjmp    TX1_LOOP
01fb26 9380 00ce         out_    UDR1, tosl
01fb28 9189
01fb29 9199              poptos
01fb2a 9508              ret
                 
                 XXON_TX1_TOS:
01fb2b 9189
01fb2c 9199              poptos
01fb2d c002              rjmp    XXON_TX1_1
                 XXON_TX1:
01fb2e ff71              sbrs    FLAGS2, ixoff_tx1
01fb2f 9508              ret
                 XXON_TX1_1:
01fb30 7f7d              cbr     FLAGS2, (1<<ixoff_tx1)
01fb31 e1f1              ldi     zh, XON
01fb32 c007              rjmp    TX1_SEND
                 
                 XXOFF_TX1_TOS:
01fb33 9189
01fb34 9199              poptos
01fb35 c002              rjmp    XXOFF_TX1_1
                 XXOFF_TX1:
01fb36 fd71              sbrc    FLAGS2, ixoff_tx1
01fb37 9508              ret     
                 XXOFF_TX1_1:
01fb38 6072              sbr     FLAGS2, (1<<ixoff_tx1)
01fb39 e1f3              ldi     zh, XOFF
                 TX1_SEND:
01fb3a 91e0 00c8         in_     zl, UCSR1A
01fb3c ffe5              sbrs    zl, UDRE1
01fb3d cffc              rjmp    TX1_SEND
01fb3e 93f0 00ce         out_    UDR1, zh
01fb40 9508              ret
                 ;***************************************************
                 ; RX1    -- c    get character from the serial line
01fb41 f636              fdw     TX1_L
                 RX1_L:
01fb42 7283
01fb43 3178              .db     NFA|3,"rx1"
                 RX1_:
01fb44 d444              rcall   PAUSE
01fb45 d01e              rcall   RX1Q
01fb46 940f f35b         call    ZEROSENSE
01fb48 f3d9              breq    RX1_
01fb49 939a
01fb4a 938a              pushtos
01fb4b e9e8              ldi     zl, low(rbuf1)
01fb4c e0f3              ldi     zh, high(rbuf1)
01fb4d 91a0 0396         lds     xl, rbuf1_rd
01fb4f 0fea              add     zl, xl
01fb50 1df5              adc     zh, zero
01fb51 8180              ld      tosl, z
01fb52 2799              clr     tosh
01fb53 b70f              in_     t0, SREG
01fb54 94f8              cli
01fb55 95a3              inc     xl
01fb56 71af              andi    xl, (RX1_BUF_SIZE-1)
01fb57 93a0 0396         sts     rbuf1_rd, xl
01fb59 91a0 0397         lds     xl, rbuf1_lv
01fb5b 95aa              dec     xl
01fb5c 93a0 0397         sts     rbuf1_lv, xl
01fb5e bf0f              out_    SREG, t0
01fb5f 9508              ret
                 ;***************************************************
                 ; RX1?  -- n    return the number of characters in queue
01fb60 f684              fdw     RX1_L
                 RX1Q_L:
01fb61 7284
01fb62 3178
01fb63 003f              .db     NFA|4,"rx1?",0
                 RX1Q:
01fb64 91a0 0397         lds     xl, rbuf1_lv
01fb66 11a5              cpse    xl, zero
01fb67 940d f6d2         jmp     TRUE_
                 .if U1FC_TYPE == 1
01fb69 dfc4              rcall   XXON_TX1
                 .endif
                 .if U1FC_TYPE == 2
                 .endif
01fb6a 940d f6ca         jmp     FALSE_
                 
                 ;****************************************************
                 RX1_ISRR:
01fb6c e9e8              ldi     zl, low(rbuf1)
01fb6d e0f3              ldi     zh, high(rbuf1)
01fb6e 91a0 0395         lds     xl, rbuf1_wr
01fb70 0fea              add     zl, xl
01fb71 1df5              adc     zh, zero
01fb72 91b0 00ce         in_     xh, UDR1
                 .if OPERATOR_UART == 1
                 .if CTRL_O_WARM_RESET == 1
                 .endif
                 .endif
01fb74 83b0              st      z, xh
01fb75 95a3              inc     xl
01fb76 71af              andi    xl, (RX1_BUF_SIZE-1)
01fb77 93a0 0395         sts     rbuf1_wr, xl
01fb79 91a0 0397         lds     xl, rbuf1_lv
01fb7b 95a3              inc     xl
01fb7c 93a0 0397         sts     rbuf1_lv, xl
01fb7e 31ae              cpi     xl, RX1_BUF_SIZE-2
01fb7f f409              brne    PC+2
01fb80 d004              rcall   RX1_OVF
01fb81 30a4              cpi     xl, RX0_OFF_FILL
01fb82 f00a              brmi    RX1_ISR_SKIP_XOFF
                 .if U1FC_TYPE == 1
01fb83 dfb4              rcall   XXOFF_TX1_1
                 .endif
                 .if U1FC_TYPE == 2
                 .endif
                 RX1_ISR_SKIP_XOFF:
01fb84 c0ec              rjmp    FF_ISR_EXIT
                 RX1_OVF:
01fb85 e7fc              ldi     zh, '|'
01fb86 cfb3              rjmp    TX1_SEND
                 TX1_ISR:
                 .endif
                 ;***************************************************
                 RQ_EMIT:
01fb87 fe00              sbrs    t2, PORF
01fb88 c003              rjmp    RQ_EXTR
01fb89 db9c              rcall   DOLIT
01fb8a 0050              .dw     'P'
01fb8b dbe6              rcall   EMIT_A
                 RQ_EXTR:
01fb8c fe01              sbrs    t2, EXTRF
01fb8d c003              rjmp    RQ_BORF
01fb8e db97              rcall   DOLIT
01fb8f 0045              .dw     'E'
01fb90 dbe1              rcall   EMIT_A
                 RQ_BORF:
01fb91 fe02              sbrs    t2, BORF
01fb92 c003              rjmp    RQ_WDRF
01fb93 db92              rcall   DOLIT
01fb94 0042              .dw     'B'
01fb95 dbdc              rcall   EMIT_A
                 RQ_WDRF:
01fb96 fe03              sbrs    t2, WDRF
01fb97 c003              rjmp    RQ_DIVZERO
01fb98 db8d              rcall   DOLIT
01fb99 0057              .dw     'W'
01fb9a dbd7              rcall   EMIT_A
                 RQ_DIVZERO:
01fb9b fe16              sbrs    t3, 6 ; T bit MATH error
01fb9c c003              rjmp    RQ_END
01fb9d db88              rcall   DOLIT
01fb9e 004d              .dw     'M'
01fb9f dbd2              rcall   EMIT_A
                 RQ_END: 
01fba0 940d f176         jmp    SPACE_
                 
                 ;*****************************************************
                 .if IDLE_MODE == 1
                 IDLE_LOAD:
                 .if CPU_LOAD == 1       
                 .endif
                 .if CPU_LOAD_LED == 1
01fba2 ff74              sbrs    FLAGS2, fLOADled
01fba3 c002              rjmp    LOAD_LED_END
01fba4 9a27              sbi_    CPU_LOAD_DDR, CPU_LOAD_BIT
                 .if CPU_LOAD_LED_POLARITY == 1
01fba5 982f              cbi_    CPU_LOAD_PORT, CPU_LOAD_BIT
                 .else
                 .endif
                 LOAD_LED_END:
                 .endif
01fba6 ff76              sbrs    FLAGS2, fIDLE
01fba7 c007              rjmp    IDLE_LOAD1
01fba8 ee04              ldi     t0, low(up0)
01fba9 1620              cp      upl, t0
01fbaa f421              brne    IDLE_LOAD1
                 .ifdef SMCR
01fbab e001              ldi     t0, (1<<SE)
01fbac bf03              out_    SMCR, t0
                 .else
                 .endif
                 .if CPU_LOAD == 1
                 .endif
01fbad 9588              sleep               ; IDLE mode
                 .ifdef SMCR
01fbae be53              out_    SMCR, zero
                 .else
                 .endif
                 IDLE_LOAD1:
                 .if CPU_LOAD_LED == 1
01fbaf fd74              sbrc    FLAGS2, fLOADled
                 .if CPU_LOAD_LED_POLARITY == 1
01fbb0 9a2f              sbi_    CPU_LOAD_PORT, CPU_LOAD_BIT
                 .else
                 .endif
                 .endif
01fbb1 9508              ret
                 .endif
                 end_of_dict:
                 
                 ;FF_DP code:
                 dpcode:
                 ;****************************************************
                 ;        org h'f00000'
                 ;        de  h'ff', h'ff'
                 ;        de  dp_user_dictionary&0xff, (dp_user_dictionary>>8)&0xff
                 ;        de  dpeeprom&0xff, (dpeeprom>>8)&0xff
                 ;        de  (dpdata)&0xff, ((dpdata)>>8)&0xff
                 ;        de  lastword_lo, lastword_hi
                 ;        de  DOTSTATUS;&0xff;, (DOTSTATUS>>8)&0xff
                 
                 ; .end
                 ;********************************************************** 
                 .cseg
                 .org BOOT_START
01fc00 940d fd9b RESET_:     jmp  WARM_
                 .org BOOT_START + 0x02
01fc02 d079                  rcall FF_ISR
                 .org BOOT_START + 0x04
01fc04 d077                  rcall FF_ISR
                 .org BOOT_START + 0x06
01fc06 d075                  rcall FF_ISR
                 .org BOOT_START + 0x08
                 .if MS_TIMER_ADDR == 0x08
                 .else
01fc08 d073                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x0a
01fc0a d071                  rcall FF_ISR
                 .org BOOT_START + 0x0c
01fc0c d06f                  rcall FF_ISR
                 .org BOOT_START + 0x0e
                 .if MS_TIMER_ADDR == 0x0e
                 .else
01fc0e d06d                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x10
01fc10 d06b                  rcall FF_ISR
                 .org BOOT_START + 0x12
                 .if MS_TIMER_ADDR == 0x12
                 .else
01fc12 d069                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x14
                 .if MS_TIMER_ADDR == 0x14
                 .else
01fc14 d067                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x16
                 .if MS_TIMER_ADDR == 0x16
                 .else
01fc16 d065                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x18
                 .if MS_TIMER_ADDR == 0x18
                 .else
01fc18 d063                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x1a
                 .if MS_TIMER_ADDR == 0x1a
                 .else
01fc1a d061                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x1c
                 .if MS_TIMER_ADDR == 0x1c
                 .else
01fc1c d05f                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x1e
                 .if MS_TIMER_ADDR == 0x1e
                 .else
01fc1e d05d                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x20
                 .if MS_TIMER_ADDR == 0x20
                 .else
01fc20 d05b                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x22
                 .if MS_TIMER_ADDR == 0x22
                 .else
01fc22 d059                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x24
01fc24 d057                  rcall FF_ISR
                 .if 0x26 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x26
01fc26 d055                  rcall FF_ISR
                 .endif
                 .if 0x28 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x28
01fc28 d053                  rcall FF_ISR
                 .endif
                 .if 0x2a < INT_VECTORS_SIZE
                 .org BOOT_START + 0x2a
                 .if MS_TIMER_ADDR == 0x2a
01fc2a c063                  rjmp  MS_TIMER_ISR
                 .else
                 .endif
                 .endif
                 .if 0x2c < INT_VECTORS_SIZE
                 .org BOOT_START + 0x2c
01fc2c d04f                  rcall FF_ISR
                 .endif
                 .if 0x2e < INT_VECTORS_SIZE
                 .org BOOT_START + 0x2e
01fc2e d04d                  rcall FF_ISR
                 .endif
                 .if 0x30 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x30
01fc30 d04b                  rcall FF_ISR
                 .endif
                 .if 0x32 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x32
01fc32 d049                  rcall FF_ISR
                 .endif
                 .if 0x34 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x34
01fc34 d047                  rcall FF_ISR
                 .endif
                 .if 0x36 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x36
01fc36 d045                  rcall FF_ISR
                 .endif
                 .if 0x38 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x38
01fc38 d043                  rcall FF_ISR
                 .endif
                 .if 0x3a < INT_VECTORS_SIZE
                 .org BOOT_START + 0x3a
01fc3a d041                  rcall FF_ISR
                 .endif
                 .if 0x3c < INT_VECTORS_SIZE
                 .org BOOT_START + 0x3c
01fc3c d03f                  rcall FF_ISR
                 .endif
                 .if 0x3e < INT_VECTORS_SIZE
                 .org BOOT_START + 0x3e
01fc3e d03d                  rcall FF_ISR
                 .endif
                 .if 0x40 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x40
01fc40 d03b                  rcall FF_ISR
                 .endif
                 .if 0x42 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x42
01fc42 d039                  rcall FF_ISR
                 .endif
                 .if 0x44 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x44
01fc44 d037                  rcall FF_ISR
                 .endif
                 .if 0x46 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x46
01fc46 d035                  rcall FF_ISR
                 .endif
                 .if 0x48 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x48
01fc48 d033                  rcall FF_ISR
                 .endif
                 .if 0x4a < INT_VECTORS_SIZE
                 .org BOOT_START + 0x4a
01fc4a d031                  rcall FF_ISR
                 .endif
                 .if 0x4c < INT_VECTORS_SIZE
                 .org BOOT_START + 0x4c
01fc4c d02f                  rcall FF_ISR
                 .endif
                 .if 0x4e < INT_VECTORS_SIZE
                 .org BOOT_START + 0x4e
01fc4e d02d                  rcall FF_ISR
                 .endif
                 .if 0x50 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x50
01fc50 d02b                  rcall FF_ISR
                 .endif
                 .if 0x52 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x52
01fc52 d029                  rcall FF_ISR
                 .endif
                 .if 0x54 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x54
01fc54 d027                  rcall FF_ISR
                 .endif
                 .if 0x56 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x56
01fc56 d025                  rcall FF_ISR
                 .endif
                 .if 0x58 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x58
01fc58 d023                  rcall FF_ISR
                 .endif
                 .if 0x5a < INT_VECTORS_SIZE
                 .org BOOT_START + 0x5a
01fc5a d021                  rcall FF_ISR
                 .endif
                 .if 0x5c < INT_VECTORS_SIZE
                 .org BOOT_START + 0x5c
01fc5c d01f                  rcall FF_ISR
                 .endif
                 .if 0x5e < INT_VECTORS_SIZE
                 .org BOOT_START + 0x5e
01fc5e d01d                  rcall FF_ISR
                 .endif
                 .if 0x60 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x60
01fc60 d01b                  rcall FF_ISR
                 .endif
                 .if 0x62 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x62
01fc62 d019                  rcall FF_ISR
                 .endif
                 .if 0x64 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x64
01fc64 d017                  rcall FF_ISR
                 .endif
                 .if 0x66 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x66
01fc66 d015                  rcall FF_ISR
                 .endif
                 .if 0x68 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x68
01fc68 d013                  rcall FF_ISR
                 .endif
                 .if 0x6a < INT_VECTORS_SIZE
                 .org BOOT_START + 0x6a
01fc6a d011                  rcall FF_ISR
                 .endif
                 .if 0x6c < INT_VECTORS_SIZE
                 .org BOOT_START + 0x6c
01fc6c d00f                  rcall FF_ISR
                 .endif
                 .if 0x6e < INT_VECTORS_SIZE
                 .org BOOT_START + 0x6e
01fc6e d00d                  rcall FF_ISR
                 .endif
                 .if 0x70 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x70
01fc70 d00b                  rcall FF_ISR
                 .endif
                 
                 .org BOOT_START + INT_VECTORS_SIZE - 1
                 FF_ISR_EXIT:
01fc71 919f              pop     tosh
01fc72 918f              pop     tosl
01fc73 911f              pop     t1
01fc74 910f              pop     t0
01fc75 91ff              pop     zh
01fc76 91ef              pop     zl
                 MS_TIMER_ISR_EXIT:
01fc77 91a9              ld      xl, y+
01fc78 91b9              ld      xh, y+
01fc79 bfbf              out_    SREG, xh
01fc7a 91b9              ld      xh, y+
01fc7b 9518              reti
                         
                 FF_ISR:
                 .if IDLE_MODE == 1
                 .if CPU_LOAD == 1
                 .endif
                 .endif
01fc7c 93ba              st      -y, xh
01fc7d b7bf              in_     xh, SREG
01fc7e 93ba              st      -y, xh
01fc7f 93aa              st      -y, xl
01fc80 91bf              m_pop_xh
01fc81 91bf              pop     xh
01fc82 91af              pop     xl
01fc83 93ef              push    zl
01fc84 93ff              push    zh
01fc85 930f              push    t0
01fc86 931f              push    t1
01fc87 938f              push    tosl
01fc88 939f              push    tosh
                 .if low(ivec) == 0x80
                 .else
01fc89 50a1              subi    xl, 1
                 .endif
01fc8a e0b3              ldi     xh, high(ivec)
01fc8b 91ed              ld      zl, x+
01fc8c 91fd              ld      zh, x+
01fc8d 9419              mijmp   ;(z)
                 
                 ;;; *************************************************
                 MS_TIMER_ISR:
                 .if IDLE_MODE == 1
                 .if CPU_LOAD == 1
                 .endif
                 .endif
01fc8e 93ba              st      -y, xh
01fc8f b7bf              in_     xh, SREG
01fc90 93ba              st      -y, xh
01fc91 93aa              st      -y, xl
01fc92 0ce6              add     ms_count,  r_one
01fc93 1cf5              adc     ms_count1, zero
                 .if CPU_LOAD == 1
                 .endif
01fc94 cfe2              rjmp    MS_TIMER_ISR_EXIT
                 ;;; ***************************************************
                 RX0_ISR:
01fc95 e7e5              ldi     zl, low(rbuf0)
01fc96 e0f3              ldi     zh, high(rbuf0)
01fc97 91a0 0372         lds     xl, rbuf0_wr
01fc99 0fea              add     zl, xl
01fc9a 1df5              adc     zh, zero
01fc9b 91b0 00c6         in_     xh, UDR0_
                 .if OPERATOR_UART == 0
                 .if CTRL_O_WARM_RESET == 1
01fc9d 30bf              cpi     xh, 0xf
01fc9e f409              brne    pc+2
01fc9f cf60              rjmp    RESET_
                 .endif
                 .endif
01fca0 83b0              st      z, xh
01fca1 95a3              inc     xl
01fca2 71af              andi    xl, (RX0_BUF_SIZE-1)
01fca3 93a0 0372         sts     rbuf0_wr, xl
01fca5 91a0 0374         lds     xl, rbuf0_lv
01fca7 95a3              inc     xl
01fca8 93a0 0374         sts     rbuf0_lv, xl
01fcaa 31ae              cpi     xl, RX0_BUF_SIZE-2
01fcab f409              brne    PC+2
01fcac d004              rcall   RX0_OVF
01fcad 30a4              cpi     xl, RX0_OFF_FILL
01fcae f00a              brmi    RX0_ISR_SKIP_XOFF
                 .if U0FC_TYPE == 1
01fcaf d022              rcall   XXOFF_TX0_1
                 .endif
                 .if U0FC_TYPE == 2
                 .endif
                 RX0_ISR_SKIP_XOFF:
01fcb0 cfc0              rjmp    FF_ISR_EXIT
                 RX0_OVF:
01fcb1 e7fc              ldi     zh, '|'
01fcb2 c021              rjmp    TX0_SEND
                 TX0_ISR:
                 
                 .ifdef UCSR1A
01fcb3 ceb8      RX1_ISR: rjmp   RX1_ISRR
                 .endif
                 ;***************************************************
                 ; TX0   c --    output character to UART 0
                 .if IDLE_MODE == 1
                 .if CPU_LOAD == 1
                 .else
                 .if CPU_LOAD_LED == 1
01fcb4 f60a              fdw(LOADOFF_L)
                 .else
                 .endif
                 .endif
                 .else
                 .endif
                 TX0_L:
01fcb5 7483
01fcb6 3078              .db     NFA|3,"tx0"
                 TX0_:
                 .if U0FC_TYPE == 1
01fcb7 3181              cpi     tosl, XON
01fcb8 f061              breq    XXON_TX0_TOS
01fcb9 3183              cpi     tosl, XOFF
01fcba f091              breq    XXOFF_TX0_TOS
                 .endif
                 TX0_LOOP:
01fcbb d2cd              rcall   PAUSE
01fcbc 9100 00c0         in_     t0, UCSR0A
01fcbe ff05              sbrs    t0, 5        ; UDRE0, UDRE USART Data Register Empty
01fcbf cffb              rjmp    TX0_LOOP
01fcc0 9380 00c6         out_    UDR0_, tosl
01fcc2 9189
01fcc3 9199              poptos
01fcc4 9508              ret
                 
                 .if U0FC_TYPE == 1
                 XXON_TX0_TOS:
01fcc5 9189
01fcc6 9199              poptos
01fcc7 c002              rjmp    XXON_TX0_1
                 XXON_TX0:
01fcc8 ff70              sbrs    FLAGS2, ixoff_tx0
01fcc9 9508              ret
                 XXON_TX0_1:
01fcca 7f7e              cbr     FLAGS2, (1<<ixoff_tx0)
01fccb e1f1              ldi     zh, XON
01fccc c007              rjmp    TX0_SEND
                 
                 XXOFF_TX0_TOS:
01fccd 9189
01fcce 9199              poptos
01fccf c002              rjmp    XXOFF_TX0_1
                 XXOFF_TX0:
01fcd0 fd70              sbrc    FLAGS2, ixoff_tx0
01fcd1 9508              ret     
                 XXOFF_TX0_1:
01fcd2 6071              sbr     FLAGS2, (1<<ixoff_tx0)
01fcd3 e1f3              ldi     zh, XOFF
                 .endif
                 TX0_SEND:
01fcd4 91e0 00c0         in_     zl, UCSR0A
01fcd6 ffe5              sbrs    zl, 5        ; UDRE0, UDRE USART Data Register Empty
01fcd7 cffc              rjmp    TX0_SEND
01fcd8 93f0 00c6         out_    UDR0_, zh
01fcda 9508              ret
                 ;***************************************************
                 ; RX0    -- c    get character from the UART 0 buffer
01fcdb f96a              fdw(TX0_L)
                 RX0_L:
01fcdc 7283
01fcdd 3078              .db     NFA|3,"rx0"
                 RX0_:
01fcde d2aa              rcall   PAUSE
01fcdf d01e              rcall   RX0Q
01fce0 940f f35b         call    ZEROSENSE
01fce2 f3d9              breq    RX0_
01fce3 939a
01fce4 938a              pushtos
01fce5 e7e5              ldi     zl, low(rbuf0)
01fce6 e0f3              ldi     zh, high(rbuf0)
01fce7 91a0 0373         lds     xl, rbuf0_rd
01fce9 0fea              add     zl, xl
01fcea 1df5              adc     zh, zero
01fceb 8180              ld      tosl, z
01fcec 2799              clr     tosh
01fced b70f              in_     t0, SREG
01fcee 94f8              cli
01fcef 95a3              inc     xl
01fcf0 71af              andi    xl, (RX0_BUF_SIZE-1)
01fcf1 93a0 0373         sts     rbuf0_rd, xl
01fcf3 91a0 0374         lds     xl, rbuf0_lv
01fcf5 95aa              dec     xl
01fcf6 93a0 0374         sts     rbuf0_lv, xl
01fcf8 bf0f              out_    SREG, t0
01fcf9 9508              ret
                 ;***************************************************
                 ; RX0?  -- n    return the number of characters in queue
01fcfa f9b8              fdw     RX0_L
                 RX0Q_L:
01fcfb 7284
01fcfc 3078
01fcfd 003f              .db     NFA|4,"rx0?",0
                 RX0Q:
01fcfe 91a0 0374         lds     xl, rbuf0_lv
01fd00 11a5              cpse    xl, zero
01fd01 940d f6d2         jmp     TRUE_
                 .if U0FC_TYPE == 1
01fd03 dfc4              rcall   XXON_TX0
                 .endif
                 .if U0FC_TYPE == 2
                 .endif
01fd04 940d f6ca         jmp     FALSE_
                 
                 
                 ;*************************************************************
                  ISTORERR:
01fd06 dbd1              rcall   DOTS
01fd07 940f f1ed         call    XSQUOTE
01fd09 4103
01fd0a 3f44              .db     3,"AD?"
01fd0b 940f f1e0         call    TYPE
01fd0d c9f2              rjmp    ABORT
                         
                 ; Coded for max 256 byte pagesize !
                 ;if (ibaselo != (iaddrlo&(~(PAGESIZEB-1))))(ibaseh != iaddrh)(ibaseu != iaddru)
                 ;   if (idirty)
                 ;       writebuffer_to_imem
                 ;   endif
                 ;   fillbuffer_from_imem
                 ;   ibaselo = iaddrlo&(~(PAGESIZEB-1))
                 ;   ibasehi = iaddrhi
                 ;endif
                 IUPDATEBUF:
                 	sub_pflash_tos
                 .ifdef  RAMPZ
01fd0e e003      	ldi     t0, RAMPZV
                 .endif
                 XUPDATEBUF:
01fd0f 9380 03c2         sts     iaddrl, tosl
01fd11 9390 03c3         sts     iaddrh, tosh
                 .ifdef RAMPZ
01fd13 9300 03c4         sts     iaddru, t0
01fd15 3003      	cpi     t0, RAMPZV
01fd16 f411      	brne    XUPDATEBUF2
                 .endif
01fd17 3d9e              cpi     tosh, high(FLASH_HI-PFLASH+1) ; Dont allow kernel writes
01fd18 f768              brcc    ISTORERR
                 XUPDATEBUF2:	
01fd19 9100 03c2 	lds     t0, iaddrl
01fd1b 7000              andi    t0, ~(PAGESIZEB-1)
01fd1c 110a              cpse    t0, ibasel
01fd1d c00b              rjmp    IFILL_BUFFER
01fd1e 9100 03c3         lds     t0, iaddrh
01fd20 110b              cpse    t0, ibaseh
01fd21 c007              rjmp    IFILL_BUFFER
                 .ifdef RAMPZ
01fd22 9100 03c4         lds     t0, iaddru
01fd24 9110 03c5 	lds     t1, ibaseu
01fd26 1301              cpse    t0, t1
01fd27 c001              rjmp    IFILL_BUFFER
                 .endif
01fd28 9508              ret
                 
                 IFILL_BUFFER:
01fd29 d05c              rcall   IFLUSH
01fd2a 9100 03c2         lds     t0, iaddrl
01fd2c 7000              andi    t0, ~(PAGESIZEB-1)
01fd2d 2ea0              mov     ibasel, t0
01fd2e 90b0 03c3         lds     ibaseh, iaddrh
                 .ifdef RAMPZ
01fd30 9100 03c4 	lds     t0, iaddru
01fd32 9300 03c5 	sts     ibaseu, t0
01fd34 bf0b      	out_    RAMPZ, t0
                 .endif
                 IFILL_BUFFER_1:
01fd35 e000              ldi     t0, PAGESIZEB&0xff ; 0x100 max PAGESIZEB
01fd36 01f5              movw    zl, ibasel
01fd37 e0a0              ldi     xl, low(ibuf)
01fd38 e0b2              ldi     xh, high(ibuf)
                 IFILL_BUFFER_2:
01fd39 9117              lpm_    t1, z+
01fd3a 931d              st      x+, t1
01fd3b 950a              dec     t0
01fd3c f7e1              brne    IFILL_BUFFER_2
                 .ifdef RAMPZ
01fd3d e003              ldi     t0, RAMPZV
01fd3e bf0b              out_    RAMPZ, t0
                 .endif
01fd3f 9508              ret
                 
                 IWRITE_BUFFER:
                 .if OPERATOR_UART == 0
                 .if U0FC_TYPE == 1
01fd40 d9e5              rcall   DOLIT
01fd41 0013              .dw     XOFF
01fd42 940f f011         call    EMIT
                 .endif
                 .if U0FC_TYPE == 2
                 .endif
                 .else  ;; UART1
                 .if U1FC_TYPE == 1
                 .endif
                 .if U1FC_TYPE == 2
                 .endif
                 .endif
01fd44 d9e1              rcall   DOLIT
01fd45 000a              .dw     10
01fd46 db2d              rcall   MS
                         ; Disable interrupts
01fd47 94f8              cli
01fd48 01f5              movw    zl, ibasel
                 .ifdef RAMPZ
01fd49 9100 03c5 	lds     t0, ibaseu
01fd4b bf0b      	out_    RAMPZ, t0
                 .endif
01fd4c e013              ldi     t1, (1<<PGERS) | (1<<SPMEN) ; Page erase
01fd4d d02d              rcall   DO_SPM
01fd4e e111              ldi     t1, (1<<RWWSRE) | (1<<SPMEN); re-enable the RWW section
01fd4f d02b              rcall   DO_SPM
                 
                         ; transfer data from RAM to Flash page buffer
01fd50 e000              ldi     t0, low(PAGESIZEB);init loop variable
01fd51 e0a0              ldi     xl, low(ibuf)
01fd52 e0b2              ldi     xh, high(ibuf)
                 IWRITE_BUFFER1:
01fd53 900d              ld      r0, x+
01fd54 901d              ld      r1, x+
01fd55 e011              ldi     t1, (1<<SPMEN)
01fd56 d024              rcall   DO_SPM
01fd57 9632              adiw    zl, 2
01fd58 5002              subi    t0, 2
01fd59 f7c9              brne    IWRITE_BUFFER1
                 
                         ; execute page write
01fd5a 50e0              subi    zl, low(PAGESIZEB) ;restore pointer
01fd5b 40f1              sbci    zh, high(PAGESIZEB)
01fd5c e015              ldi     t1, (1<<PGWRT) | (1<<SPMEN)
01fd5d d01d              rcall   DO_SPM
                         ; re-enable the RWW section
01fd5e d016              rcall   IWRITE_BUFFER3
                 
                         ; read back and check, optional
01fd5f e000              ldi     t0, low(PAGESIZEB);init loop variable
01fd60 50a0              subi    xl, low(PAGESIZEB) ;restore pointer
01fd61 40b1              sbci    xh, high(PAGESIZEB)
                 IWRITE_BUFFER2:
01fd62 9007              lpm_    r0, z+
01fd63 901d              ld      r1, x+
01fd64 1001              cpse    r0, r1
01fd65 c035              rjmp    WARM_     ; reset
01fd66 5001              subi    t0, 1
01fd67 f7d1              brne    IWRITE_BUFFER2
01fd68 ef0f      	ser     t0
01fd69 2eb0      	mov     ibaseh, t0
                 .ifdef RAMPZ
01fd6a 9300 03c5 	sts     ibaseu, t0
                 .endif
                 .ifdef RAMPZ
01fd6c e003              ldi     t0, RAMPZV
01fd6d bf0b              out_    RAMPZ, t0
                 .endif
01fd6e 7f6e              cbr     FLAGS1, (1<<idirty)
                         // reenable interrupts
01fd6f 9478              sei
                 .if OPERATOR_UART == 0
                 .if U0FC_TYPE == 1
01fd70 d9b5              rcall   DOLIT
01fd71 0011              .dw     XON
01fd72 940f f011         call    EMIT
                 .endif
                 .if U0FC_TYPE == 2
                 .endif
                 .else
                 .if U1FC_TYPE == 1
                 .endif
                 .if U1FC_TYPE == 2
                 .endif
                 .endif
                 .if DEBUG_FLASH == 1
                 .endif
01fd74 9508               ret
                         ; ret to RWW section
                         ; verify that RWW section is safe to read
                 IWRITE_BUFFER3:
01fd75 b687              in_     t8, SPMCSR
01fd76 fe86              sbrs    t8, RWWSB ; If RWWSB is set, the RWW section is not ready yet
01fd77 9508              ret
                         ; re-enable the RWW section
01fd78 e111              ldi     t1, (1<<RWWSRE) | (1<<SPMEN)
01fd79 d001              rcall   DO_SPM
01fd7a cffa              rjmp    IWRITE_BUFFER3
                 
                 DO_SPM:
01fd7b b687              in_     t8, SPMCSR
01fd7c fc80              sbrc    t8, SPMEN
01fd7d cffd              rjmp    DO_SPM       ; Wait for previous write to complete
01fd7e bf17              out_    SPMCSR, t1
01fd7f 95e8              spm
01fd80 9508              ret
                 
01fd81 ff0c              fdw     PAUSE_L
                 IFLUSH_L:
01fd82 6986
01fd83 6c66
01fd84 7375
01fd85 0068              .db     NFA|6,"iflush",0
                 IFLUSH:
01fd86 fd60              sbrc    FLAGS1, idirty
01fd87 cfb8              rjmp    IWRITE_BUFFER
01fd88 9508              ret
                 
                 ;***************************************************
                 .ifdef UCSR1A
01fd89 f6c2              fdw     RX1Q_L
                 .else
                 .endif
                 EMPTY_L:
01fd8a 6585
01fd8b 706d
01fd8c 7974              .db     NFA|5,"empty"
                 EMPTY:
01fd8d d998              rcall   DOLIT
01fd8e ffd0              fdw     COLDLIT
01fd8f d996              rcall   DOLIT
01fd90 2200              .dw     dp_start
01fd91 d994              rcall   DOLIT
01fd92 000c              .dw     coldlitsize
01fd93 940f f4c9         call    CMOVE
01fd95 940d f6a6         jmp     DP_TO_RAM
                         
                 ;*******************************************************
01fd97 fb14              fdw     EMPTY_L
                 WARM_L:
01fd98 7784
01fd99 7261
01fd9a 006d              .db     NFA|4,"warm",0
                 WARM_:
                 ; Zero memory
01fd9b 94f8              cli           ; Disable interrupts
01fd9c 27aa              clr     xl
01fd9d 27bb              clr     xh
01fd9e e1c9              ldi     yl, 25
01fd9f e0d0              ldi     yh, 0
                 WARM_1:
01fda0 93dd              st      x+, yh
01fda1 50c1              subi    yl, 1
01fda2 f7e9              brne    WARM_1
                 
01fda3 b61f              in_     t3, SREG
                 .ifdef MCUCSR
                 .endif
                 .ifdef MCUSR
01fda4 b604              in_     t2, MCUSR
01fda5 9250 0034         sts     MCUSR, zero
                 .endif
01fda7 e1ac              ldi     xl, 0x1C  ; clear ram from y register upwards
                 WARM_2:
01fda8 925d              st      x+, zero
01fda9 31b0              cpi     xh, 0x10  ; up to 0xfff, 4 Kbytes 
01fdaa f7e9              brne    WARM_2
                 
                 ; Init empty flash buffer
01fdab 94ba      	dec     ibaseh
                 .ifdef RAMPZ
01fdac 92b0 03c5 	sts     ibaseu, ibaseh
                 .endif
                 
                 ; Init constant registers
01fdae e0c1              ldi     yl, 1
01fdaf 2e6c              mov     r_one, yl
01fdb0 e0c2              ldi     yl, 2
01fdb1 2e7c              mov     r_two, yl
                 ; Init Stack pointer
01fdb2 e6c2              ldi     yl, low(utibbuf-4)
01fdb3 e0d4              ldi     yh, high(utibbuf-4)
                 
                 ; Init Return stack pointer
01fdb4 e205              ldi     t0, low(usbuf-1)
01fdb5 e014              ldi     t1, high(usbuf-1)
01fdb6 bf0d              out     spl, t0
01fdb7 bf1e              out     sph, t1
                 ; Init user pointer
01fdb8 ee04              ldi     t0, low(up0)
01fdb9 e013              ldi     t1, high(up0)
01fdba 0118              movw    upl, t0
                 ; Set RAMPZ for correct flash addressing
                 .ifdef RAMPZ
01fdbb e003              ldi     t0, RAMPZV
01fdbc bf0b              out_    RAMPZ, t0
                 .endif
                 .ifdef EIND
01fdbd be6c              out_    EIND, r_one
                 .endif
                 ; init warm literals
01fdbe d967              rcall   DOLIT
01fdbf f618              fdw     WARMLIT
01fdc0 d965              rcall   DOLIT
01fdc1 03c6              .dw     cse
01fdc2 d963              rcall   DOLIT
01fdc3 001c              .dw     warmlitsize
01fdc4 940f f4c9         call    CMOVE
                 ; init cold data to eeprom
01fdc6 d95f              rcall   DOLIT
01fdc7 2200              .dw     dp_start
01fdc8 d10c              rcall   FETCH
01fdc9 d908              rcall   TRUE_
01fdca 940f f2ea         call    EQUAL
01fdcc 940f f35b         call    ZEROSENSE
01fdce f009              breq    WARM_3  
01fdcf dfbd              rcall   EMPTY
                 WARM_3:
                 ; Move interrupts to boot flash section
01fdd0 be65              out_    MCUCR, r_one   ; (1<<IVCE)
01fdd1 be75              out_    MCUCR, r_two   ; (1<<IVSEL)
                 
                 
                 .if MS_TIMER == 0
                 .ifdef TIMSK0
01fdd2 bc74              out_    TCCR0A, r_two  ; CTC
01fdd3 e003              ldi     t0, ms_pre_tmr0
01fdd4 bd05              out_    TCCR0B, t0
01fdd5 ef09              ldi     t0, ms_value_tmr0
01fdd6 bd07              out_    OCR0A, t0
01fdd7 9270 006e         out_    TIMSK0, r_two ; (1<<OCIE0A)
                 .endif
                 .ifdef TIMSK
                 .endif
                 .endif
                 .if MS_TIMER == 1
                 .ifdef TIMSK
                 .endif
                 .ifdef TIMSK1
                 .endif
                 .endif
                 .if MS_TIMER == 2
                 .ifdef TIMSK2
                 .endif
                 .ifdef TIMSK
                 .endif
                 .endif
                 
                 ; Init UART 0
                 .ifdef UBRR0L
01fdd9 d94c              rcall   DOLIT
01fdda fc95              .dw     RX0_ISR
01fddb d94a              rcall   DOLIT
                 .ifdef URXC0addr
01fddc 0332              .dw     URXC0addr+ivec
                 .else
                 .endif
01fddd d0ac              rcall   STORE
                 ;;;     Set baud rate
                 ;        out_    UBRR0H, zero
01fdde e607              ldi     t0, ubrr0val
01fddf 9300 00c4         out_    UBRR0L, t0
                         ; Enable receiver and transmitter, rx1 interrupts
01fde1 e908              ldi     t0, (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0)
01fde2 9300 00c1         out_    UCSR0B,t0
                         ; Set frame format: 8data, 1stop bit
01fde4 e006              ldi     t0, (3<<UCSZ00)|URSEL_
01fde5 9300 00c2         out_    UCSR0C,t0
                 .if U0FC_TYPE == 1
01fde7 6071              sbr     FLAGS2, (1<<ixoff_tx0)
                 .endif
                 .if U0FC_TYPE == 2
                 .endif
                 .endif
                 ; Init UART 1
                 .ifdef UBRR1L
01fde8 d93d              rcall   DOLIT
01fde9 fcb3              .dw     RX1_ISR
01fdea d93b              rcall   DOLIT
01fdeb 0348              .dw     URXC1addr+ivec
01fdec d09d              rcall   STORE
                         ; Set baud rate
                 ;        out_    UBRR1H, zero
01fded e109              ldi     t0, ubrr1val
01fdee 9300 00cc         out_    UBRR1L, t0
                         ; Enable receiver and transmitter, rx1 interrupts
01fdf0 e908              ldi     t0, (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1)
01fdf1 9300 00c9         out_    UCSR1B,t0
                         ; Set frame format: 8data, 1stop bit
01fdf3 e006              ldi     t0, (3<<UCSZ10)
01fdf4 9300 00ca         out_    UCSR1C,t0
                 .if U1FC_TYPE == 1
01fdf6 6072              sbr     FLAGS2, (1<<ixoff_tx1)
                 .endif
                 .if U1FC_TYPE == 2
                 .endif
                 .endif
01fdf7 d8ae              rcall   DP_TO_RAM
01fdf8 9478              sei
                 
01fdf9 dd8d              rcall   RQ_EMIT
01fdfa d023              rcall   VER
                 ; Turnkey ?
01fdfb d186              rcall   TURNKEY
01fdfc 940f f35b         call    ZEROSENSE
01fdfe f0d1              breq    STARTQ2
01fdff 940f f1ed         call    XSQUOTE
01fe01 4503
01fe02 4353              .db     3,"ESC"
01fe03 940f f1e0         call    TYPE
01fe05 d920              rcall   DOLIT
01fe06 07d0              .dw     TURNKEY_DELAY
01fe07 da6c              rcall   MS
01fe08 940f f01e         call    KEYQ
01fe0a 940f f35b         call    ZEROSENSE
01fe0c f049              breq    STARTQ1
01fe0d 940f f017         call    KEY
01fe0f d916              rcall   DOLIT
01fe10 001b              .dw     0x1b
01fe11 940f f2ea         call    EQUAL
01fe13 940f f35b         call    ZEROSENSE
01fe15 f419              brne    STARTQ2
                 STARTQ1:
01fe16 d16b              rcall   TURNKEY
01fe17 940f f026         call    EXECUTE
                 STARTQ2:
01fe19 940d f700         jmp     ABORT
                 
                 .equ partlen = strlen(partstring)
                 .equ datelen = strlen(DATE)
                 
01fe1b fb30              fdw     WARM_L
                 VER_L:
01fe1c 7683
01fe1d 7265              .db     NFA|3,"ver"
                 VER:
01fe1e 940f f1ed         call    XSQUOTE
                          ;      1234567890123456789012345678901234567890
                         ;.db 34,"FlashForth Atmega 5.0 ",DATE,0xd,0xa,0
01fe20 4624
01fe21 616c
01fe22 6873
01fe23 6f46
01fe24 7472
01fe25 2068
01fe26 2035
01fe27 5441
01fe28 656d
01fe29 6167
01fe2a 3532
01fe2b 3036
01fe2c 3120
01fe2d 2e31
01fe2e 3131
01fe2f 322e
01fe30 3130
01fe31 0d36
avr/src/ff-atmega.asm(5423): warning: .cseg .db misalignment - padding zero byte
01fe32 000a              .db     partlen+datelen+16,"FlashForth 5 ",partstring," ", DATE,0xd,0xa
01fe33 940d f1e0         jmp     TYPE
                 
                 ; ei  ( -- )    Enable interrupts
01fe35 fc38              fdw     VER_L
                 EI_L:
01fe36 65a2
01fe37 0069              .db     NFA|INLINE|2,"ei",0
01fe38 9478              sei
01fe39 9508              ret
                         
                 ; di  ( -- )    Disable interrupts
01fe3a fc6c              fdw     EI_L
                 DI_L:
01fe3b 64a2
01fe3c 0069              .db     NFA|INLINE|2,"di",0
01fe3d 94f8              cli
01fe3e 9508              ret
                 ;*******************************************************
                 ; ;i  ( -- )    End definition of user interrupt routine
01fe3f fc76              fdw     DI_L
                 IRQ_SEMI_L:
01fe40 3bc2
01fe41 0069              .db     NFA|IMMED|2,";i",0
                 IRQ_SEMI:
01fe42 d8e3              rcall   DOLIT
                 .ifdef EIND
01fe43 940d              .dw     0x940D     ; jmp
                 .else
                 .endif
01fe44 d164              rcall   ICOMMA
01fe45 d8e0              rcall   DOLIT
01fe46 fc71              .dw     FF_ISR_EXIT
01fe47 d161              rcall   ICOMMA
01fe48 940d f7e5         jmp     LEFTBRACKET
                 
                 
                 ; int!  ( addr n  --  )   store to interrupt vector number
01fe4a fc80              fdw     IRQ_SEMI_L
                 IRQ_V_L:
01fe4b 6984
01fe4c 746e
01fe4d 0021              .db     NFA|4,"int!",0
                 IRQ_V:
01fe4e 01fc              movw    zl, tosl
01fe4f 9731              sbiw    zl, 1
01fe50 0fee              lsl     zl
                 .if low(ivec) == 0x80
                 .endif
01fe51 e0f3              ldi     zh, high(ivec)
01fe52 9189
01fe53 9199              poptos
01fe54 dad8              rcall   TO_XA
01fe55 940d fe8f         jmp     STORE_RAM_2
                 
                 ; DOLITERAL  x --           compile DOLITeral x as native code
01fe57 fc96              fdw     IRQ_V_L
                 LITERAL_L:
01fe58 6cc7
01fe59 7469
01fe5a 7265
01fe5b 6c61              .db     NFA|IMMED|7,"literal"
                 LITERAL:
01fe5c d8c9              rcall   DOLIT
01fe5d ee60              fdw     DUP
01fe5e db61              rcall   INLINE0
01fe5f 940f f730         call    DUP
01fe61 2f98              mov     tosh, tosl
01fe62 9592              swap    tosh
01fe63 709f              andi    tosh, 0xf
01fe64 708f              andi    tosl, 0xf
01fe65 6e90              ori     tosh, 0xe0
01fe66 6880              ori     tosl, 0x80
01fe67 d141              rcall   ICOMMA
01fe68 2f89              mov     tosl, tosh
01fe69 9592              swap    tosh
01fe6a 709f              andi    tosh, 0xf
01fe6b 708f              andi    tosl, 0xf
01fe6c 6e90              ori     tosh, 0xe0
01fe6d 6980              ori     tosl, 0x90
01fe6e 940d ffa9         jmp     ICOMMA
                 
                 #if 0
                 #endif
                 
                 ;*****************************************************************
                 ISTORE:
01fe70 d03b              rcall   LOCKEDQ
01fe71 de9c              rcall   IUPDATEBUF
                 ISTORE1:
01fe72 9189
01fe73 9199              poptos
01fe74 e0a0              ldi     xl, low(ibuf)
01fe75 e0b2              ldi     xh, high(ibuf)
01fe76 9100 03c2         lds     t0, iaddrl
01fe78 7f0f              andi    t0, (PAGESIZEB-1)
01fe79 0fa0              add     xl, t0
01fe7a 938d              st      x+, tosl
01fe7b 939d              st      x+, tosh
01fe7c 9189
01fe7d 9199              poptos
01fe7e 6061              sbr     FLAGS1, (1<<idirty)
01fe7f 9508              ret
                 
01fe80 fcb0              fdw     LITERAL_L
                 TO_A_L:
01fe81 3e82
01fe82 0061              .db     NFA|2, ">a",0
                 TO_A:
01fe83 2f28              mov     al, tosl
01fe84 2f39              mov     ah, tosh
01fe85 9189
01fe86 9199              poptos
01fe87 9508              ret
                 
01fe88 fd02              fdw     TO_A_L
                 STORE_L:
01fe89 2181              .db     NFA|1, "!"
                 STORE:
01fe8a 3292              cpi     tosh, high(PEEPROM)
01fe8b f440              brcc    STORE1
                 STORE_RAM:
01fe8c 01fc              movw    zl, tosl
01fe8d 9189
01fe8e 9199              poptos
                 STORE_RAM_2:
01fe8f 8391              std     Z+1, tosh
01fe90 8380              std     Z+0, tosl
01fe91 9189
01fe92 9199              poptos
01fe93 9508              ret
                 STORE1:
01fe94 3392              cpi     tosh, high(OFLASH)
01fe95 f6d0              brcc    ISTORE
                 ESTORE:
01fe96 d015              rcall   LOCKEDQ
01fe97 99f9              sbic    eecr, eewe
01fe98 cffd              rjmp    ESTORE
01fe99 5292              subi    tosh, high(PEEPROM)
01fe9a bd81              out     eearl, tosl
01fe9b bd92              out     eearh, tosh
01fe9c 9189
01fe9d 9199              poptos
01fe9e bd80              out     eedr, tosl
01fe9f 9afa              sbi     eecr, eemwe
01fea0 9af9              sbi     eecr, eewe
                 
                 ESTORE1:
01fea1 99f9              sbic    eecr, eewe
01fea2 cffe              rjmp    ESTORE1
                 
01fea3 b581              in      tosl, eearl
01fea4 9583              inc     tosl
01fea5 bd81              out     eearl, tosl
                 
01fea6 bd90              out     eedr, tosh
01fea7 9afa              sbi     eecr, eemwe
01fea8 9af9              sbi     eecr, eewe
                 
01fea9 9189
01feaa 9199              poptos
01feab 9508              ret
                 LOCKEDQ:
01feac ff62              sbrs    FLAGS1, fLOCK
01fead 9508              ret
01feae da29              rcall   DOTS
01feaf 940f f1ed         call    XSQUOTE
01feb1 4103
01feb2 3f44              .db     3,"AD?"
01feb3 940f f1e0         call    TYPE
01feb5 cf63              rjmp    STARTQ2        ; goto    ABORT
                         
                 ;***********************************************************
                 IFETCH:
01feb6 01fc              movw    z, tosl
                         sub_pflash_z
                 .ifdef RAMPZ
01feb7 9100 03c5 	lds     t0, ibaseu
01feb9 3003      	cpi     t0, RAMPZV
01feba f469      	brne    IIFETCH
                 .endif
01febb 11fb              cpse    zh, ibaseh
01febc c00b              rjmp    IIFETCH
01febd 2f0e              mov     t0, zl
01febe 7000              andi    t0, ~(PAGESIZEB-1)
01febf 150a              cp      t0, ibasel
01fec0 f439              brne    IIFETCH
01fec1 e0a0              ldi     xl, low(ibuf)
01fec2 e0b2              ldi     xh, high(ibuf)
01fec3 7fef              andi    zl, (PAGESIZEB-1)
01fec4 0fae              add     xl, zl
01fec5 918d              ld      tosl, x+
01fec6 919d              ld      tosh, x+
01fec7 9508              ret
                 IIFETCH:
01fec8 9187              lpm_    tosl, z+     ; Fetch from Flash directly
01fec9 9197              lpm_    tosh, z+
01feca 9508              ret
                                 
01fecb fd12              fdw     STORE_L
                 A_FROM_L:
01fecc 6182
01fecd 003e              .db     NFA|2, "a>",0
01fece 939a
01fecf 938a              pushtos
01fed0 2f82              mov     tosl, al
01fed1 2f93              mov     tosh, ah
01fed2 9508              ret
                 
                 .if FLASHEND > 0x3fff
01fed3 f590              fdw     XSTORE_L
                 .else
                 .endif
                 FETCH_L:
01fed4 4081              .db     NFA|1, "@"
                 FETCH:
01fed5 3292              cpi     tosh, high(PEEPROM)
01fed6 f420              brcc    FETCH1
                 FETCH_RAM:
01fed7 01fc              movw    zl, tosl
                 FETCH_RAM_2:
01fed8 9181              ld      tosl, z+
01fed9 9191              ld      tosh, z+
01feda 9508              ret
                 FETCH1:
01fedb 3392              cpi     tosh, high(OFLASH)
01fedc f6c8              brcc    IFETCH
                 EFETCH:
01fedd 99f9              sbic    eecr, eewe
01fede cffe              rjmp    EFETCH
01fedf 5292              subi    tosh, high(PEEPROM)
01fee0 bd81              out     eearl, tosl
01fee1 bd92              out     eearh, tosh
01fee2 9af8              sbi     eecr, eere
01fee3 b580              in      tosl, eedr
01fee4 b591              in      tosh, eearl
01fee5 9593              inc     tosh
01fee6 bd91              out     eearl, tosh
01fee7 9af8              sbi     eecr, eere
01fee8 b590              in      tosh, eedr
01fee9 9508              ret
                 
                 ICFETCH:
01feea 01fc              movw    z, tosl
                         sub_pflash_z
                 .ifdef RAMPZ
01feeb 9100 03c5 	lds     t0, ibaseu
01feed 3003      	cpi     t0, RAMPZV
01feee f469      	brne    IICFETCH
                 .endif
01feef 11fb              cpse    zh, ibaseh
01fef0 c00b              rjmp    IICFETCH
01fef1 2f0e              mov     t0, zl
01fef2 7000              andi    t0, ~(PAGESIZEB-1)
01fef3 150a              cp      t0, ibasel
01fef4 f439              brne    IICFETCH
01fef5 e0a0              ldi     xl, low(ibuf)
01fef6 e0b2              ldi     xh, high(ibuf)
01fef7 7fef              andi    zl, (PAGESIZEB-1)
01fef8 0fae              add     xl, zl
01fef9 918d              ld      tosl, x+
01fefa 2799              clr     tosh
01fefb 9508              ret
                 IICFETCH:
01fefc 9187              lpm_    tosl, z+     ; Fetch from Flash directly
01fefd 2799              clr     tosh
01fefe 9508              ret
                 
01feff fda8              fdw     FETCH_L
                 CFETCH_L:
01ff00 6382
01ff01 0040              .db     NFA|2, "c@",0
                 CFETCH:
01ff02 3292              cpi     tosh, high(PEEPROM)
01ff03 f420              brcc    CFETCH1
                 CFETCH_RAM:
01ff04 01fc              movw    zl, tosl
01ff05 9181              ld      tosl, z+
01ff06 2799              clr     tosh
01ff07 9508              ret
                 CFETCH1:
01ff08 3392              cpi     tosh, high(OFLASH)
01ff09 f700              brcc    ICFETCH
                 ECFETCH:
01ff0a 99f9              sbic    eecr, eewe
01ff0b cffe              rjmp    ECFETCH
01ff0c 5292              subi    tosh, high(PEEPROM)
01ff0d bd81              out     eearl, tosl
01ff0e bd92              out     eearh, tosh
01ff0f 9af8              sbi     eecr, eere
01ff10 b580              in      tosl, eedr
01ff11 2799              clr     tosh
01ff12 9508              ret
                 
                 ICSTORE:
01ff13 df98              rcall   LOCKEDQ
01ff14 ddf9              rcall   IUPDATEBUF
01ff15 9189
01ff16 9199              poptos
01ff17 e0a0              ldi     xl, low(ibuf)
01ff18 e0b2              ldi     xh, high(ibuf)
01ff19 9100 03c2         lds     t0, iaddrl
01ff1b 7f0f              andi    t0, (PAGESIZEB-1)
01ff1c 0fa0              add     xl, t0
01ff1d 938d              st      x+, tosl
01ff1e 9189
01ff1f 9199              poptos
01ff20 6061              sbr     FLAGS1, (1<<idirty)
01ff21 9508              ret
                 
01ff22 fe00              fdw     CFETCH_L
                 CSTORE_L:
01ff23 6382
01ff24 0021              .db     NFA|2, "c!",0
                 CSTORE:
01ff25 3292              cpi     tosh, high(PEEPROM)
01ff26 f438              brcc    CSTORE1
                 CSTORE_RAM:
01ff27 01fc              movw zl, tosl
01ff28 9189
01ff29 9199              poptos
01ff2a 8380              std Z+0, tosl
01ff2b 9189
01ff2c 9199              poptos
01ff2d 9508              ret
                 CSTORE1:
01ff2e 3392              cpi     tosh, high(OFLASH)
01ff2f f718              brcc    ICSTORE
                 ECSTORE:
01ff30 df7b              rcall   LOCKEDQ
01ff31 99f9              sbic    eecr, eewe
01ff32 cffd              rjmp    ECSTORE
01ff33 5292              subi    tosh, high(PEEPROM)
01ff34 bd81              out     eearl, tosl
01ff35 bd92              out     eearh, tosh
01ff36 9189
01ff37 9199              poptos
01ff38 bd80              out     eedr, tosl
01ff39 9afa              sbi     eecr, eemwe
01ff3a 9af9              sbi     eecr, eewe
01ff3b 9189
01ff3c 9199              poptos
01ff3d 9508              ret
                 
                 ;;; Disable writes to flash and eeprom
01ff3e fe46              fdw     CSTORE_L
                 
                 FLOCK_L:
01ff3f 6683
01ff40 2d6c              .db     NFA|3,"fl-"
01ff41 6064              sbr     FLAGS1, (1<<fLOCK)
01ff42 9508              ret
                 
                 ;;; Enable writes to flash and eeprom
01ff43 fe7e              fdw     FLOCK_L
                 FUNLOCK_L:
01ff44 6683
01ff45 2b6c              .db     NFA|3,"fl+"
01ff46 7f6b              cbr     FLAGS1, (1<<fLOCK)
01ff47 9508              ret
                 
                 
                 
01ff48 fe88              fdw     FUNLOCK_L
                 VALUE_L:
01ff49 7685
01ff4a 6c61
01ff4b 6575              .db     NFA|5,"value"
                 VALUE:
01ff4c d82c              rcall   CREATE
01ff4d 940f f0e1         call    COMMA
01ff4f d879              rcall   XDOES
                 VALUE_DOES:
01ff50 940f f06f         call    DODOES
01ff52 940d fed5         jmp     FETCH
                 
01ff54 fe92              fdw     VALUE_L
                 DEFER_L:
01ff55 6485
01ff56 6665
01ff57 7265              .db     NFA|5,"defer"
                 DEFER:
01ff58 d820              rcall   CREATE
01ff59 940f f726         call    DOLIT
01ff5b ee00              fdw     ABORT
01ff5c 940f f0e1         call    COMMA
01ff5e d86a              rcall   XDOES
                 DEFER_DOES:
01ff5f 940f f06f         call    DODOES
01ff61 940d f030         jmp     FEXECUTE
                 
01ff63 feaa              fdw     DEFER_L
                 IS_L:
01ff64 69c2
01ff65 0073              .db     NFA|IMMED|2,"is",0
                 IS:
01ff66 940f f743         call    TICK
01ff68 940f f2b5         call    TWOPLUS
01ff6a 940f f2b5         call    TWOPLUS
01ff6c df68              rcall   FETCH
01ff6d d8d9              rcall   STATE_
01ff6e 940f f35b         call    ZEROSENSE
01ff70 f029              breq    IS1
01ff71 deea              rcall   LITERAL
01ff72 940f f081         call    DOCOMMAXT
01ff74 fd14              fdw     STORE
01ff75 c001              rjmp    IS2
                 IS1:
01ff76 df13              rcall   STORE
                 IS2:
01ff77 9508              ret
                 
01ff78 fec8              fdw     IS_L
                 TO_L:
01ff79 74c2
01ff7a 006f              .db     NFA|IMMED|2,"to",0
                 TO:
01ff7b 940d ff66         jmp     IS
                 
01ff7d fef2              fdw     TO_L
                 TURNKEY_L:
01ff7e 7487
01ff7f 7275
01ff80 6b6e
01ff81 7965              .db     NFA|7,"turnkey"
                 TURNKEY:
01ff82 940f ff50         call    VALUE_DOES      ; Must be call for IS to work.
01ff84 03b8              .dw     dpSTART
                 
                 
                 ;;; *******************************************************
                 ; PAUSE  --     switch task
01ff85 fefc              fdw     TURNKEY_L
                 PAUSE_L:
01ff86 7085
01ff87 7561
01ff88 6573              .db     NFA|5,"pause"
                 PAUSE:
                 .if IDLE_MODE == 1
01ff89 dc18              rcall   IDLE_LOAD
                 .endif
01ff8a b71f              in_     t1, SREG
01ff8b 94f8              cli
01ff8c 93df              push    yh        ; SP
01ff8d 93cf              push    yl
01ff8e 939f              push    tosh      ; TOS
01ff8f 938f              push    tosl
01ff90 935f              push    ph        ; P
01ff91 934f              push    pl
01ff92 01f1              movw    zl, upl
01ff93 b70e              in      t0, sph
01ff94 9302              st      -z, t0
01ff95 b70d              in      t0, spl
01ff96 9302              st      -z, t0
01ff97 91b2              ld      xh, -z     ; UP
01ff98 91a2              ld      xl, -z
01ff99 011d              movw    upl, xl
01ff9a 910e              ld      t0, -x
01ff9b bf0e              out     sph, t0
01ff9c 910e              ld      t0, -x
01ff9d bf0d              out     spl, t0
01ff9e 914f              pop     pl
01ff9f 915f              pop     ph
01ffa0 918f              pop     tosl
01ffa1 919f              pop     tosh
01ffa2 91cf              pop     yl
01ffa3 91df              pop     yh
01ffa4 bf1f              out_    SREG, t1
01ffa5 9508              ret
                 
                 
01ffa6 de7c              fdw     OPERATOR_L
                 ICOMMA_L:
01ffa7 6982
01ffa8 002c              .db     NFA|2, "i,",0
                 ICOMMA:
01ffa9 940f f75c         call    IHERE
01ffab dede              rcall   STORE
01ffac 940f f0f2         call    CELL
01ffae 940d f919         jmp     IALLOT
                 
                 
                 ;   IHERE ! 1 CHARS IALLOT ;
01ffb0 ff4e              fdw     ICOMMA_L
                 ICCOMMA_L:
01ffb1 6983
01ffb2 2c63              .db     NFA|3,"ic,"
                 ICCOMMA:
01ffb3 940f f75c         call    IHERE
01ffb5 df6f              rcall   CSTORE
01ffb6 940f f199         call    ONE
01ffb8 940d f919         jmp     IALLOT
                 
                 L_DOTBASE:
01ffba 2081              .db      NFA|1," "
                 DOTBASE:
01ffbb 940f f46e         call    BASE
01ffbd df17              rcall   FETCH
01ffbe 3180              cpi     tosl, 0x10
01ffbf f411              brne    DOTBASE1
01ffc0 e284              ldi     tosl,'$'
01ffc1 c009              rjmp    DOTBASEEND
                 DOTBASE1:
01ffc2 308a              cpi     tosl, 0xa
01ffc3 f411              brne    DOTBASE2
01ffc4 e283              ldi     tosl, '#'
01ffc5 c005              rjmp    DOTBASEEND
                 DOTBASE2:
01ffc6 3082              cpi     tosl, 0x2
01ffc7 f411              brne    DOTBASE3
01ffc8 e285              ldi     tosl, '%'
01ffc9 c001              rjmp    DOTBASEEND
                 DOTBASE3:
01ffca e38f              ldi     tosl, '?'
                 DOTBASEEND:
01ffcb 9508              ret
                 
                 MEMQADDR_N:
01ffcc e168              fdw     ROM_N
01ffcd e176              fdw     EROM_N
01ffce e186              fdw     FRAM_N
                 ;*******************************************************
                 umstar0:
01ffcf 920f              push t2
01ffd0 921f              push t3
01ffd1 9109              ld  t0, Y+
01ffd2 9119              ld  t1, Y+
01ffd3 9f80              mul tosl,t0
01ffd4 01d0              movw t4, r0 ; r0=t2, r1=t3
01ffd5 27ee              clr t6
01ffd6 27ff              clr t7
01ffd7 9f90              mul tosh, t0
01ffd8 0db0              add t5, r0
01ffd9 1de1              adc t6, r1
01ffda 1df5              adc t7, zero
01ffdb 9f81              mul tosl, t1
01ffdc 0db0              add t5, r0
01ffdd 1de1              adc t6, r1
01ffde 1df5              adc t7, zero
01ffdf 9f91              mul tosh, t1
01ffe0 0de0              add t6, r0
01ffe1 1df1              adc t7, r1
01ffe2 93ba              st -Y, t5
01ffe3 93aa              st -Y, t4
01ffe4 01cf              movw tosl, t6
01ffe5 901f              pop t3
01ffe6 900f              pop t2
01ffe7 9508              ret
                 
                 ;;; *************************************
                 ;;; EMPTY dictionary data
                 ; *******************************************************************
                 .equ coldlitsize=12
                 COLDLIT:
01ffe8 0000      STARTV: .dw      0
01ffe9 3200      DPC:    .dw      OFLASH
01ffea 220c      DPE:    .dw      ehere
01ffeb 04c0      DPD:    .dw      dpdata
01ffec f5ca      LW:     fdw      lastword
01ffed ed1a      STAT:   fdw      DOTSTATUS
                 ;*******************************************************************
                 ; BOOT sector END **************************************************
                 
                 KERNEL_END:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega2560 register use summary:
r0 :  16 r1 :  17 r2 :   5 r3 :   1 r4 :   0 r5 :  19 r6 :   6 r7 :   6 
r8 :   4 r9 :   4 r10:   6 r11:   7 r12:   0 r13:   0 r14:   2 r15:   2 
r16: 165 r17:  57 r18:   3 r19:   2 r20:  14 r21:   7 r22:  34 r23:  17 
r24: 241 r25: 181 r26:  77 r27:  44 r28:   9 r29:   5 r30:  76 r31:  64 
x  :  17 y  : 181 z  :  38 
Registers used: 32 out of 35 (91.4%)

ATmega2560 instruction use summary:
.lds  :   0 .sts  :   0 adc   :  18 add   :  18 adiw  :  12 and   :   4 
andi  :  24 asr   :   2 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :  21 brcs  :   1 break :   0 breq  :  46 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   2 brmi  :   6 
brne  :  40 brpl  :   2 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   4 bst   :   0 call  :  99 cbi   :   3 cbr   :  20 
clc   :   0 clh   :   0 cli   :   7 cln   :   0 clr   :  18 cls   :   0 
clt   :   1 clv   :   0 clz   :   1 com   :   7 cp    :   4 cpc   :   2 
cpi   :  34 cpse  :   8 dec   :   5 eicall:   0 eijmp :  14 elpm  :   9 
eor   :   2 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  19 inc   :   9 jmp   : 164 ld    : 137 ldd   :   2 ldi   :  75 
lds   :  31 lpm   :   0 lsl   :  11 lsr   :   2 mov   :  20 movw  :  40 
mul   :   4 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   6 
ori   :   7 out   :  40 pop   : 103 push  :  29 rcall :1005 ret   : 137 
reti  :   1 rjmp  : 102 rol   :  14 ror   :  18 sbc   :   8 sbci  :   3 
sbi   :  11 sbic  :   5 sbis  :   0 sbiw  :  13 sbr   :  18 sbrc  :  13 
sbrs  :  20 sec   :   0 seh   :   0 sei   :   3 sen   :   0 ser   :   7 
ses   :   0 set   :   1 sev   :   0 sez   :   1 sleep :   1 spm   :   2 
st    :  76 std   :   3 sts   :  31 sub   :   2 subi  :  12 swap  :   2 
tst   :   2 wdr   :   0 
Instructions used: 75 out of 116 (64.7%)

ATmega2560 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x02fe00 0x03ffdc   5938   2498   8436  262144   3.2%
[.dseg] 0x000200 0x0004c2      0    706    706    8192   8.6%
[.eseg] 0x000000 0x000002      0      2      2    4096   0.0%

Assembly complete, 0 errors, 8 warnings
