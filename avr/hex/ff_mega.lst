
AVRASM ver. 2.1.30  F:\avr\src\ff-atmega.asm Sat Jan 10 14:01:18 2015

F:\avr\src\ff-atmega.asm(34): Including file 'F:\avr\src\config.inc'
F:\avr\src\config.inc(5): Including file 'C:\Program Files\Atmel\AVR Tools\AvrAssembler2\Appnotes\m2560def.inc'
F:\avr\src\ff-atmega.asm(78): warning: Register r26 already defined by the .DEF directive
F:\avr\src\ff-atmega.asm(79): warning: Register r27 already defined by the .DEF directive
F:\avr\src\ff-atmega.asm(80): warning: Register r30 already defined by the .DEF directive
F:\avr\src\ff-atmega.asm(81): warning: Register r31 already defined by the .DEF directive
F:\avr\src\ff-atmega.asm(244): warning: Use of undefined or forward referenced symbol 'TX0_' in .equ/.set
F:\avr\src\ff-atmega.asm(245): warning: Use of undefined or forward referenced symbol 'RX0_' in .equ/.set
F:\avr\src\ff-atmega.asm(246): warning: Use of undefined or forward referenced symbol 'RX0Q' in .equ/.set
                 
                 
                 ;                                                                     *
                 ;    Filename:      FlashForth.asm                                    *
                 ;    Date:          10.01.2015                                        *
                 ;    File Version:  5.0                                               *
                 ;    MCU:           Atmega                                            *
                 ;    Copyright:     Mikael Nordman                                    *
                 ;    Author:        Mikael Nordman                                    *
                 ;                                                                     * 
                 ;**********************************************************************
                 ; FlashForth is a standalone Forth system for microcontrollers that
                 ; can flash their own flash memory.
                 ;
                 ; Copyright (C) 2014  Mikael Nordman
                 
                 ; This program is free software: you can redistribute it and/or modify
                 ; it under the terms of the GNU General Public License version 3 as 
                 ; published by the Free Software Foundation.
                 ;
                 ; This program is distributed in the hope that it will be useful,
                 ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                 ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 ; GNU General Public License for more details.
                 ;
                 ; You should have received a copy of the GNU General Public License
                 ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                 ;
                 ; Modified versions of FlashForth must be clearly marked as such, 
                 ; in the name of this file, and in the identification
                 ; displayed when FlashForth starts.
                 ;**********************************************************************
                 
                 ; Include the FlashForth configuration file
                 .include "config.inc"
                 
                 
                 ; Select the include file for your micro controller
                 ;.include "m2561def.inc"  ; 
                 .include "m2560def.inc"  ; Tested     Fuses: E:0xff H:0xdc L:0xff
                 
                 ;***** Created: 2008-11-07 12:39 ******* Source: ATmega2560.xml **********
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m2560def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega2560
                 ;* Date              : 2008-11-07
                 ;* Version           : 2.31
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega2560
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M2560DEF_INC_
                 #define _M2560DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega2560
                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x98
                 .equ	SIGNATURE_002	= 0x01
                 
                 #pragma AVRPART CORE CORE_VERSION V3
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                 .equ	PINL	= 0x109	; MEMORY MAPPED
                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                 .equ	PINK	= 0x106	; MEMORY MAPPED
                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                 .equ	PINH	= 0x100	; MEMORY MAPPED
                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	EIND	= 0x3c
                 .equ	RAMPZ	= 0x3b
                 .equ	SPMCSR	= 0x37
                 .equ	MCUCR	= 0x35
                 .equ	MCUSR	= 0x34
                 .equ	SMCR	= 0x33
                 .equ	OCDR	= 0x31
                 .equ	ACSR	= 0x30
                 .equ	SPDR	= 0x2e
                 .equ	SPSR	= 0x2d
                 .equ	SPCR	= 0x2c
                 .equ	GPIOR2	= 0x2b
                 .equ	GPIOR1	= 0x2a
                 .equ	OCR0B	= 0x28
                 .equ	OCR0A	= 0x27
                 .equ	TCNT0	= 0x26
                 .equ	TCCR0B	= 0x25
                 .equ	TCCR0A	= 0x24
                 .equ	GTCCR	= 0x23
                 .equ	EEARH	= 0x22
                 .equ	EEARL	= 0x21
                 .equ	EEDR	= 0x20
                 .equ	EECR	= 0x1f
                 .equ	GPIOR0	= 0x1e
                 .equ	EIMSK	= 0x1d
                 .equ	EIFR	= 0x1c
                 .equ	PCIFR	= 0x1b
                 .equ	TIFR5	= 0x1a
                 .equ	TIFR4	= 0x19
                 .equ	TIFR3	= 0x18
                 .equ	TIFR2	= 0x17
                 .equ	TIFR1	= 0x16
                 .equ	TIFR0	= 0x15
                 .equ	PORTG	= 0x14
                 .equ	DDRG	= 0x13
                 .equ	PING	= 0x12
                 .equ	PORTF	= 0x11
                 .equ	DDRF	= 0x10
                 .equ	PINF	= 0x0f
                 .equ	PORTE	= 0x0e
                 .equ	DDRE	= 0x0d
                 .equ	PINE	= 0x0c
                 .equ	PORTD	= 0x0b
                 .equ	DDRD	= 0x0a
                 .equ	PIND	= 0x09
                 .equ	PORTC	= 0x08
                 .equ	DDRC	= 0x07
                 .equ	PINC	= 0x06
                 .equ	PORTB	= 0x05
                 .equ	DDRB	= 0x04
                 .equ	PINB	= 0x03
                 .equ	PORTA	= 0x02
                 .equ	DDRA	= 0x01
                 .equ	PINA	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; ADCSRB - ADC Control and Status Register B
                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 ; DIDR1 - Digital Input Disable Register 1
                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                 
                 
                 ; ***** USART0 ***********************
                 ; UDR0 - USART I/O Data Register
                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR0A - USART Control and Status Register A
                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                 .equ	U2X0	= 1	; Double the USART transmission speed
                 .equ	UPE0	= 2	; Parity Error
                 .equ	DOR0	= 3	; Data overRun
                 .equ	FE0	= 4	; Framing Error
                 .equ	UDRE0	= 5	; USART Data Register Empty
                 .equ	TXC0	= 6	; USART Transmitt Complete
                 .equ	RXC0	= 7	; USART Receive Complete
                 
                 ; UCSR0B - USART Control and Status Register B
                 .equ	TXB80	= 0	; Transmit Data Bit 8
                 .equ	RXB80	= 1	; Receive Data Bit 8
                 .equ	UCSZ02	= 2	; Character Size
                 .equ	TXEN0	= 3	; Transmitter Enable
                 .equ	RXEN0	= 4	; Receiver Enable
                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR0C - USART Control and Status Register C
                 .equ	UCPOL0	= 0	; Clock Polarity
                 .equ	UCSZ00	= 1	; Character Size
                 .equ	UCPHA0	= UCSZ00	; For compatibility
                 .equ	UCSZ01	= 2	; Character Size
                 .equ	UDORD0	= UCSZ01	; For compatibility
                 .equ	USBS0	= 3	; Stop Bit Select
                 .equ	UPM00	= 4	; Parity Mode Bit 0
                 .equ	UPM01	= 5	; Parity Mode Bit 1
                 .equ	UMSEL00	= 6	; USART Mode Select
                 .equ	UMSEL0	= UMSEL00	; For compatibility
                 .equ	UMSEL01	= 7	; USART Mode Select
                 .equ	UMSEL1	= UMSEL01	; For compatibility
                 
                 ; UBRR0H - USART Baud Rate Register High Byte
                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR0L - USART Baud Rate Register Low Byte
                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 ; ***** TWI **************************
                 ; TWAMR - TWI (Slave) Address Mask Register
                 .equ	TWAM0	= 1	; 
                 .equ	TWAMR0	= TWAM0	; For compatibility
                 .equ	TWAM1	= 2	; 
                 .equ	TWAMR1	= TWAM1	; For compatibility
                 .equ	TWAM2	= 3	; 
                 .equ	TWAMR2	= TWAM2	; For compatibility
                 .equ	TWAM3	= 4	; 
                 .equ	TWAMR3	= TWAM3	; For compatibility
                 .equ	TWAM4	= 5	; 
                 .equ	TWAMR4	= TWAM4	; For compatibility
                 .equ	TWAM5	= 6	; 
                 .equ	TWAMR5	= TWAM5	; For compatibility
                 .equ	TWAM6	= 7	; 
                 .equ	TWAMR6	= TWAM6	; For compatibility
                 
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                 .equ	PA3	= 3	; For compatibility
                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                 .equ	PA4	= 4	; For compatibility
                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                 .equ	PA5	= 5	; For compatibility
                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                 .equ	PA6	= 6	; For compatibility
                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                 .equ	PA7	= 7	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                 .equ	PC7	= 7	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** PORTE ************************
                 ; PORTE - Data Register, Port E
                 .equ	PORTE0	= 0	; 
                 .equ	PE0	= 0	; For compatibility
                 .equ	PORTE1	= 1	; 
                 .equ	PE1	= 1	; For compatibility
                 .equ	PORTE2	= 2	; 
                 .equ	PE2	= 2	; For compatibility
                 .equ	PORTE3	= 3	; 
                 .equ	PE3	= 3	; For compatibility
                 .equ	PORTE4	= 4	; 
                 .equ	PE4	= 4	; For compatibility
                 .equ	PORTE5	= 5	; 
                 .equ	PE5	= 5	; For compatibility
                 .equ	PORTE6	= 6	; 
                 .equ	PE6	= 6	; For compatibility
                 .equ	PORTE7	= 7	; 
                 .equ	PE7	= 7	; For compatibility
                 
                 ; DDRE - Data Direction Register, Port E
                 .equ	DDE0	= 0	; 
                 .equ	DDE1	= 1	; 
                 .equ	DDE2	= 2	; 
                 .equ	DDE3	= 3	; 
                 .equ	DDE4	= 4	; 
                 .equ	DDE5	= 5	; 
                 .equ	DDE6	= 6	; 
                 .equ	DDE7	= 7	; 
                 
                 ; PINE - Input Pins, Port E
                 .equ	PINE0	= 0	; 
                 .equ	PINE1	= 1	; 
                 .equ	PINE2	= 2	; 
                 .equ	PINE3	= 3	; 
                 .equ	PINE4	= 4	; 
                 .equ	PINE5	= 5	; 
                 .equ	PINE6	= 6	; 
                 .equ	PINE7	= 7	; 
                 
                 
                 ; ***** PORTF ************************
                 ; PORTF - Data Register, Port F
                 .equ	PORTF0	= 0	; 
                 .equ	PF0	= 0	; For compatibility
                 .equ	PORTF1	= 1	; 
                 .equ	PF1	= 1	; For compatibility
                 .equ	PORTF2	= 2	; 
                 .equ	PF2	= 2	; For compatibility
                 .equ	PORTF3	= 3	; 
                 .equ	PF3	= 3	; For compatibility
                 .equ	PORTF4	= 4	; 
                 .equ	PF4	= 4	; For compatibility
                 .equ	PORTF5	= 5	; 
                 .equ	PF5	= 5	; For compatibility
                 .equ	PORTF6	= 6	; 
                 .equ	PF6	= 6	; For compatibility
                 .equ	PORTF7	= 7	; 
                 .equ	PF7	= 7	; For compatibility
                 
                 ; DDRF - Data Direction Register, Port F
                 .equ	DDF0	= 0	; 
                 .equ	DDF1	= 1	; 
                 .equ	DDF2	= 2	; 
                 .equ	DDF3	= 3	; 
                 .equ	DDF4	= 4	; 
                 .equ	DDF5	= 5	; 
                 .equ	DDF6	= 6	; 
                 .equ	DDF7	= 7	; 
                 
                 ; PINF - Input Pins, Port F
                 .equ	PINF0	= 0	; 
                 .equ	PINF1	= 1	; 
                 .equ	PINF2	= 2	; 
                 .equ	PINF3	= 3	; 
                 .equ	PINF4	= 4	; 
                 .equ	PINF5	= 5	; 
                 .equ	PINF6	= 6	; 
                 .equ	PINF7	= 7	; 
                 
                 
                 ; ***** PORTG ************************
                 ; PORTG - Data Register, Port G
                 .equ	PORTG0	= 0	; 
                 .equ	PG0	= 0	; For compatibility
                 .equ	PORTG1	= 1	; 
                 .equ	PG1	= 1	; For compatibility
                 .equ	PORTG2	= 2	; 
                 .equ	PG2	= 2	; For compatibility
                 .equ	PORTG3	= 3	; 
                 .equ	PG3	= 3	; For compatibility
                 .equ	PORTG4	= 4	; 
                 .equ	PG4	= 4	; For compatibility
                 .equ	PORTG5	= 5	; 
                 .equ	PG5	= 5	; For compatibility
                 
                 ; DDRG - Data Direction Register, Port G
                 .equ	DDG0	= 0	; 
                 .equ	DDG1	= 1	; 
                 .equ	DDG2	= 2	; 
                 .equ	DDG3	= 3	; 
                 .equ	DDG4	= 4	; 
                 .equ	DDG5	= 5	; 
                 
                 ; PING - Input Pins, Port G
                 .equ	PING0	= 0	; 
                 .equ	PING1	= 1	; 
                 .equ	PING2	= 2	; 
                 .equ	PING3	= 3	; 
                 .equ	PING4	= 4	; 
                 .equ	PING5	= 5	; 
                 
                 
                 ; ***** PORTH ************************
                 ; PORTH - PORT H Data Register
                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                 .equ	PH0	= 0	; For compatibility
                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                 .equ	PH1	= 1	; For compatibility
                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                 .equ	PH2	= 2	; For compatibility
                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                 .equ	PH3	= 3	; For compatibility
                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                 .equ	PH4	= 4	; For compatibility
                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                 .equ	PH5	= 5	; For compatibility
                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                 .equ	PH6	= 6	; For compatibility
                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                 .equ	PH7	= 7	; For compatibility
                 
                 ; DDRH - PORT H Data Direction Register
                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                 
                 ; PINH - PORT H Input Pins
                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                 
                 
                 ; ***** PORTJ ************************
                 ; PORTJ - PORT J Data Register
                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                 .equ	PJ0	= 0	; For compatibility
                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                 .equ	PJ1	= 1	; For compatibility
                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                 .equ	PJ2	= 2	; For compatibility
                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                 .equ	PJ3	= 3	; For compatibility
                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                 .equ	PJ4	= 4	; For compatibility
                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                 .equ	PJ5	= 5	; For compatibility
                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                 .equ	PJ6	= 6	; For compatibility
                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                 .equ	PJ7	= 7	; For compatibility
                 
                 ; DDRJ - PORT J Data Direction Register
                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                 
                 ; PINJ - PORT J Input Pins
                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                 
                 
                 ; ***** PORTK ************************
                 ; PORTK - PORT K Data Register
                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                 .equ	PK0	= 0	; For compatibility
                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                 .equ	PK1	= 1	; For compatibility
                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                 .equ	PK2	= 2	; For compatibility
                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                 .equ	PK3	= 3	; For compatibility
                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                 .equ	PK4	= 4	; For compatibility
                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                 .equ	PK5	= 5	; For compatibility
                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                 .equ	PK6	= 6	; For compatibility
                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                 .equ	PK7	= 7	; For compatibility
                 
                 ; DDRK - PORT K Data Direction Register
                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                 
                 ; PINK - PORT K Input Pins
                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                 
                 
                 ; ***** PORTL ************************
                 ; PORTL - PORT L Data Register
                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                 .equ	PL0	= 0	; For compatibility
                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                 .equ	PL1	= 1	; For compatibility
                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                 .equ	PL2	= 2	; For compatibility
                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                 .equ	PL3	= 3	; For compatibility
                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                 .equ	PL4	= 4	; For compatibility
                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                 .equ	PL5	= 5	; For compatibility
                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                 .equ	PL6	= 6	; For compatibility
                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                 .equ	PL7	= 7	; For compatibility
                 
                 ; DDRL - PORT L Data Direction Register
                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                 
                 ; PINL - PORT L Input Pins
                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                 
                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                 
                 ; TCCR0A - Timer/Counter  Control Register A
                 .equ	WGM00	= 0	; Waveform Generation Mode
                 .equ	WGM01	= 1	; Waveform Generation Mode
                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                 
                 ; TCCR0B - Timer/Counter Control Register B
                 .equ	CS00	= 0	; Clock Select
                 .equ	CS01	= 1	; Clock Select
                 .equ	CS02	= 2	; Clock Select
                 .equ	WGM02	= 3	; 
                 .equ	FOC0B	= 6	; Force Output Compare B
                 .equ	FOC0A	= 7	; Force Output Compare A
                 
                 ; TCNT0 - Timer/Counter0
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0A - Timer/Counter0 Output Compare Register
                 .equ	OCROA_0	= 0	; 
                 .equ	OCROA_1	= 1	; 
                 .equ	OCROA_2	= 2	; 
                 .equ	OCROA_3	= 3	; 
                 .equ	OCROA_4	= 4	; 
                 .equ	OCROA_5	= 5	; 
                 .equ	OCROA_6	= 6	; 
                 .equ	OCROA_7	= 7	; 
                 
                 ; OCR0B - Timer/Counter0 Output Compare Register
                 .equ	OCR0B_0	= 0	; 
                 .equ	OCR0B_1	= 1	; 
                 .equ	OCR0B_2	= 2	; 
                 .equ	OCR0B_3	= 3	; 
                 .equ	OCR0B_4	= 4	; 
                 .equ	OCR0B_5	= 5	; 
                 .equ	OCR0B_6	= 6	; 
                 .equ	OCR0B_7	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	PSR10	= PSRSYNC	; For compatibility
                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	TOIE2A	= TOIE2	; For compatibility
                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                 
                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                 
                 ; TCCR2A - Timer/Counter2 Control Register A
                 .equ	WGM20	= 0	; Waveform Genration Mode
                 .equ	WGM21	= 1	; Waveform Genration Mode
                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                 
                 ; TCCR2B - Timer/Counter2 Control Register B
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM22	= 3	; Waveform Generation Mode
                 .equ	FOC2B	= 6	; Force Output Compare B
                 .equ	FOC2A	= 7	; Force Output Compare A
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2A - Timer/Counter2 Output Compare Register A
                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; OCR2B - Timer/Counter2 Output Compare Register B
                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                 .equ	EXCLK	= 6	; Enable External Clock Input
                 
                 ; GTCCR - General Timer Counter Control register
                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PSR2	= PSRASY	; For compatibility
                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCSR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDCE	= 4	; Watchdog Change Enable
                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                 
                 
                 ; ***** USART1 ***********************
                 ; UDR1 - USART I/O Data Register
                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR1A - USART Control and Status Register A
                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                 .equ	U2X1	= 1	; Double the USART transmission speed
                 .equ	UPE1	= 2	; Parity Error
                 .equ	DOR1	= 3	; Data overRun
                 .equ	FE1	= 4	; Framing Error
                 .equ	UDRE1	= 5	; USART Data Register Empty
                 .equ	TXC1	= 6	; USART Transmitt Complete
                 .equ	RXC1	= 7	; USART Receive Complete
                 
                 ; UCSR1B - USART Control and Status Register B
                 .equ	TXB81	= 0	; Transmit Data Bit 8
                 .equ	RXB81	= 1	; Receive Data Bit 8
                 .equ	UCSZ12	= 2	; Character Size
                 .equ	TXEN1	= 3	; Transmitter Enable
                 .equ	RXEN1	= 4	; Receiver Enable
                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR1C - USART Control and Status Register C
                 .equ	UCPOL1	= 0	; Clock Polarity
                 .equ	UCSZ10	= 1	; Character Size
                 .equ	UCPHA1	= UCSZ10	; For compatibility
                 .equ	UCSZ11	= 2	; Character Size
                 .equ	UDORD1	= UCSZ11	; For compatibility
                 .equ	USBS1	= 3	; Stop Bit Select
                 .equ	UPM10	= 4	; Parity Mode Bit 0
                 .equ	UPM11	= 5	; Parity Mode Bit 1
                 .equ	UMSEL10	= 6	; USART Mode Select
                 .equ	UMSEL11	= 7	; USART Mode Select
                 
                 ; UBRR1H - USART Baud Rate Register High Byte
                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR1L - USART Baud Rate Register Low Byte
                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEARH - EEPROM Address Register Low Byte
                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                 
                 ; EEARL - EEPROM Address Register Low Byte
                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                 
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEPE	= 1	; EEPROM Write Enable
                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                 
                 
                 ; ***** TIMER_COUNTER_5 **************
                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                 
                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                 .equ	ICF5	= 5	; Input Capture Flag 5
                 
                 ; TCCR5A - Timer/Counter5 Control Register A
                 .equ	WGM50	= 0	; Waveform Generation Mode
                 .equ	WGM51	= 1	; Waveform Generation Mode
                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR5B - Timer/Counter5 Control Register B
                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                 .equ	WGM52	= 3	; Waveform Generation Mode
                 .equ	WGM53	= 4	; Waveform Generation Mode
                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                 
                 ; TCCR5C - Timer/Counter 5 Control Register C
                 .equ	FOC5C	= 5	; Force Output Compare 5C
                 .equ	FOC5B	= 6	; Force Output Compare 5B
                 .equ	FOC5A	= 7	; Force Output Compare 5A
                 
                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                 
                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                 
                 
                 ; ***** TIMER_COUNTER_4 **************
                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                 
                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                 .equ	ICF4	= 5	; Input Capture Flag 4
                 
                 ; TCCR4A - Timer/Counter4 Control Register A
                 .equ	WGM40	= 0	; Waveform Generation Mode
                 .equ	WGM41	= 1	; Waveform Generation Mode
                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR4B - Timer/Counter4 Control Register B
                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                 .equ	WGM42	= 3	; Waveform Generation Mode
                 .equ	WGM43	= 4	; Waveform Generation Mode
                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                 
                 ; TCCR4C - Timer/Counter 4 Control Register C
                 .equ	FOC4C	= 5	; Force Output Compare 4C
                 .equ	FOC4B	= 6	; Force Output Compare 4B
                 .equ	FOC4A	= 7	; Force Output Compare 4A
                 
                 
                 ; ***** TIMER_COUNTER_3 **************
                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                 
                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                 .equ	ICF3	= 5	; Input Capture Flag 3
                 
                 ; TCCR3A - Timer/Counter3 Control Register A
                 .equ	WGM30	= 0	; Waveform Generation Mode
                 .equ	WGM31	= 1	; Waveform Generation Mode
                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR3B - Timer/Counter3 Control Register B
                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                 .equ	WGM32	= 3	; Waveform Generation Mode
                 .equ	WGM33	= 4	; Waveform Generation Mode
                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                 
                 ; TCCR3C - Timer/Counter 3 Control Register C
                 .equ	FOC3C	= 5	; Force Output Compare 3C
                 .equ	FOC3B	= 6	; Force Output Compare 3B
                 .equ	FOC3A	= 7	; Force Output Compare 3A
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 ; TCCR1C - Timer/Counter 1 Control Register C
                 .equ	FOC1C	= 5	; Force Output Compare 1C
                 .equ	FOC1B	= 6	; Force Output Compare 1B
                 .equ	FOC1A	= 7	; Force Output Compare 1A
                 
                 
                 ; ***** JTAG *************************
                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                 .equ	IDRD	= OCDR7	; For compatibility
                 
                 ; MCUCR - MCU Control Register
                 .equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; MCUSR - MCU Status Register
                 .equ	JTRF	= 4	; JTAG Reset Flag
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; EICRA - External Interrupt Control Register A
                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                 
                 ; EICRB - External Interrupt Control Register B
                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                 
                 ; EIMSK - External Interrupt Mask Register
                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                 
                 ; EIFR - External Interrupt Flag Register
                 .equ	INTF0	= 0	; External Interrupt Flag 0
                 .equ	INTF1	= 1	; External Interrupt Flag 1
                 .equ	INTF2	= 2	; External Interrupt Flag 2
                 .equ	INTF3	= 3	; External Interrupt Flag 3
                 .equ	INTF4	= 4	; External Interrupt Flag 4
                 .equ	INTF5	= 5	; External Interrupt Flag 5
                 .equ	INTF6	= 6	; External Interrupt Flag 6
                 .equ	INTF7	= 7	; External Interrupt Flag 7
                 
                 ; PCICR - Pin Change Interrupt Control Register
                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                 
                 ; PCIFR - Pin Change Interrupt Flag Register
                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                 
                 ; PCMSK2 - Pin Change Mask Register 2
                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                 
                 ; PCMSK1 - Pin Change Mask Register 1
                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                 
                 ; PCMSK0 - Pin Change Mask Register 0
                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	PUD	= 4	; Pull-up disable
                 ;.equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; MCUSR - MCU Status Register
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                 
                 ; XMCRA - External Memory Control Register A
                 .equ	SRW00	= 0	; Wait state select bit lower page
                 .equ	SRW01	= 1	; Wait state select bit lower page
                 .equ	SRW10	= 2	; Wait state select bit upper page
                 .equ	SRW11	= 3	; Wait state select bit upper page
                 .equ	SRL0	= 4	; Wait state page limit
                 .equ	SRL1	= 5	; Wait state page limit
                 .equ	SRL2	= 6	; Wait state page limit
                 .equ	SRE	= 7	; External SRAM Enable
                 
                 ; XMCRB - External Memory Control Register B
                 .equ	XMM0	= 0	; External Memory High Mask
                 .equ	XMM1	= 1	; External Memory High Mask
                 .equ	XMM2	= 2	; External Memory High Mask
                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; CLKPR - 
                 .equ	CLKPS0	= 0	; 
                 .equ	CLKPS1	= 1	; 
                 .equ	CLKPS2	= 2	; 
                 .equ	CLKPS3	= 3	; 
                 .equ	CLKPCE	= 7	; 
                 
                 ; SMCR - Sleep Mode Control Register
                 .equ	SE	= 0	; Sleep Enable
                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                 
                 ; RAMPZ - RAM Page Z Select Register
                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                 
                 ; EIND - Extended Indirect Register
                 .equ	EIND0	= 0	; Bit 0
                 
                 ; GPIOR2 - General Purpose IO Register 2
                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                 
                 ; GPIOR1 - General Purpose IO Register 1
                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                 
                 ; GPIOR0 - General Purpose IO Register 0
                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                 
                 ; PRR1 - Power Reduction Register1
                 .equ	PRUSART1	= 0	; Power Reduction USART1
                 .equ	PRUSART2	= 1	; Power Reduction USART2
                 .equ	PRUSART3	= 2	; Power Reduction USART3
                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                 
                 ; PRR0 - Power Reduction Register0
                 .equ	PRADC	= 0	; Power Reduction ADC
                 .equ	PRUSART0	= 1	; Power Reduction USART
                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                 .equ	PRTWI	= 7	; Power Reduction TWI
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register A
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCSRB - The ADC Control and Status register B
                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                 ;.equ	ACME	= 6	; 
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; DIDR0 - Digital Input Disable Register
                 .equ	ADC0D	= 0	; 
                 .equ	ADC1D	= 1	; 
                 .equ	ADC2D	= 2	; 
                 .equ	ADC3D	= 3	; 
                 .equ	ADC4D	= 4	; 
                 .equ	ADC5D	= 5	; 
                 .equ	ADC6D	= 6	; 
                 .equ	ADC7D	= 7	; 
                 
                 ; DIDR2 - Digital Input Disable Register
                 .equ	ADC8D	= 0	; 
                 .equ	ADC9D	= 1	; 
                 .equ	ADC10D	= 2	; 
                 .equ	ADC11D	= 3	; 
                 .equ	ADC12D	= 4	; 
                 .equ	ADC13D	= 5	; 
                 .equ	ADC14D	= 6	; 
                 .equ	ADC15D	= 7	; 
                 
                 
                 ; ***** BOOT_LOAD ********************
                 ; SPMCSR - Store Program Memory Control Register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read While Write section read enable
                 .equ	SIGRD	= 5	; Signature Row Read
                 .equ	RWWSB	= 6	; Read While Write Section Busy
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 
                 ; ***** USART2 ***********************
                 ; UDR2 - USART I/O Data Register
                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR2A - USART Control and Status Register A
                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                 .equ	U2X2	= 1	; Double the USART transmission speed
                 .equ	UPE2	= 2	; Parity Error
                 .equ	DOR2	= 3	; Data overRun
                 .equ	FE2	= 4	; Framing Error
                 .equ	UDRE2	= 5	; USART Data Register Empty
                 .equ	TXC2	= 6	; USART Transmitt Complete
                 .equ	RXC2	= 7	; USART Receive Complete
                 
                 ; UCSR2B - USART Control and Status Register B
                 .equ	TXB82	= 0	; Transmit Data Bit 8
                 .equ	RXB82	= 1	; Receive Data Bit 8
                 .equ	UCSZ22	= 2	; Character Size
                 .equ	TXEN2	= 3	; Transmitter Enable
                 .equ	RXEN2	= 4	; Receiver Enable
                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR2C - USART Control and Status Register C
                 .equ	UCPOL2	= 0	; Clock Polarity
                 .equ	UCSZ20	= 1	; Character Size
                 .equ	UCSZ21	= 2	; Character Size
                 .equ	USBS2	= 3	; Stop Bit Select
                 .equ	UPM20	= 4	; Parity Mode Bit 0
                 .equ	UPM21	= 5	; Parity Mode Bit 1
                 .equ	UMSEL20	= 6	; USART Mode Select
                 .equ	UMSEL21	= 7	; USART Mode Select
                 
                 ; UBRR2H - USART Baud Rate Register High Byte
                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR2L - USART Baud Rate Register Low Byte
                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 ; ***** USART3 ***********************
                 ; UDR3 - USART I/O Data Register
                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR3A - USART Control and Status Register A
                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                 .equ	U2X3	= 1	; Double the USART transmission speed
                 .equ	UPE3	= 2	; Parity Error
                 .equ	DOR3	= 3	; Data overRun
                 .equ	FE3	= 4	; Framing Error
                 .equ	UDRE3	= 5	; USART Data Register Empty
                 .equ	TXC3	= 6	; USART Transmitt Complete
                 .equ	RXC3	= 7	; USART Receive Complete
                 
                 ; UCSR3B - USART Control and Status Register B
                 .equ	TXB83	= 0	; Transmit Data Bit 8
                 .equ	RXB83	= 1	; Receive Data Bit 8
                 .equ	UCSZ32	= 2	; Character Size
                 .equ	TXEN3	= 3	; Transmitter Enable
                 .equ	RXEN3	= 4	; Receiver Enable
                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR3C - USART Control and Status Register C
                 .equ	UCPOL3	= 0	; Clock Polarity
                 .equ	UCSZ30	= 1	; Character Size
                 .equ	UCSZ31	= 2	; Character Size
                 .equ	USBS3	= 3	; Stop Bit Select
                 .equ	UPM30	= 4	; Parity Mode Bit 0
                 .equ	UPM31	= 5	; Parity Mode Bit 1
                 .equ	UMSEL30	= 6	; USART Mode Select
                 .equ	UMSEL31	= 7	; USART Mode Select
                 
                 ; UBRR3H - USART Baud Rate Register High Byte
                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR3L - USART Baud Rate Register Low Byte
                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	CKOUT	= 6	; Clock output
                 .equ	CKDIV8	= 7	; Divide clock by 8
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	WDTON	= 4	; Watchdog timer always on
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	JTAGEN	= 6	; Enable JTAG
                 .equ	OCDEN	= 7	; Enable OCD
                 
                 ; EXTENDED fuse bits
                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                 .equ	IOEND	= 0x01ff
                 .equ	SRAM_START	= 0x0200
                 .equ	SRAM_SIZE	= 8192
                 .equ	RAMEND	= 0x21ff
                 .equ	XRAMEND	= 0xffff
                 .equ	E2END	= 0x0fff
                 .equ	EEPROMEND	= 0x0fff
                 .equ	EEADRBITS	= 12
                 #pragma AVRPART MEMORY PROG_FLASH 262144
                 #pragma AVRPART MEMORY EEPROM 4096
                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x1f000
                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x1efff
                 .equ	PAGESIZE	= 128
                 .equ	FIRSTBOOTSTART	= 0x1fe00
                 .equ	SECONDBOOTSTART	= 0x1fc00
                 .equ	THIRDBOOTSTART	= 0x1f800
                 .equ	FOURTHBOOTSTART	= 0x1f000
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                 
                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                 
                 #endif  /* _M2560DEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 ;.include "m128def.inc"   ; Tested     Fuses: E:0xff H:0xdc L:0xff
                 ;.include "m168pdef.inc"
                 ;.include "m328pdef.inc"   ; Tested    Fuses: E:0xff H:0xda L:0xff
                 ;.include "m328def.inc"   ; Tested    Fuses: E:0xff H:0xda L:0xff
                 ;.include "m32adef.inc"
                 ;.include "m644pdef.inc"
                 
                 ; Oscillator frequency in herz
                 .equ FREQ_OSC = 16000000
                 
                 ; Define the UART used for the operator
                 .equ OPERATOR_UART = 0              ; 0 or 1
                 
                 ;;; UART0 configuration
                 ;;; Note: With Arduino Uno R3 and MEGA R3 the USB to serial bridge latency and queues 
                 ;;; disturbs the XON/XOFF flow control. 
                 ;;; The workaround is to use XON/XOFF flow control and 1 ms intercharacter delay in the terminal program.
                 .equ BAUDRATE0 = 9600               ; Serial baudrate UART0
                 .equ U0FC_TYPE = 1                  ; 1 = XON/XOFF, 2=CTS/RTS
                 .equ U0RTS_PORT = portd
                 .equ U0RTS_DDR = ddrd
                 .equ U0RTS_BIT = 3
                 
                 ;;; UART1 configuration
                 .equ BAUDRATE1= 38400               ; Serial baudrate UART1
                 .equ U1FC_TYPE = 1                  ; 1 = XON/XOFF, 2=CTS/RTS
                 .equ U1RTS_PORT = portd
                 .equ U1RTS_DDR = ddrd
                 .equ U1RTS_BIT = 4
                 
                 ; Default number base
                 .equ BASE_DEFAULT = 10      ; 16 = hexadecimal, 10 = decimal
                 
                 ; Set to 1 for power save when CPU is idle
                 .equ IDLE_MODE = 1
                 
                 ; Enable the cpu load measurement. Uses Timer 1. Needs IDLE_MODE = 1
                 .equ CPU_LOAD = 1
                 
                 ; CPU load indicator led definitions. Needs IDLE_MODE = 1
                 .equ CPU_LOAD_LED = 1            ; set to 1 to enable
                 .equ CPU_LOAD_DDR = ddrb
                 .equ CPU_LOAD_PORT = portb       ; avr-p28:portc arduinomega:portb arduinouno:portb
                 .equ CPU_LOAD_BIT = 7            ; avr-p28:pin5  arduinomega:pin7  ardinouno:pin5
                 .equ CPU_LOAD_LED_POLARITY = 1   ; avr-p28:  0 = low on port turns on led, 
                                                  ; arduino : 1 = high on port turns on led 
                 
                 ; Define the startup delay for the turnkey words. Milliseconds
                 .equ TURNKEY_DELAY = 2000  ; milliseconds
                 
                 ; UART buffer sizes
                 .equ RX0_BUF_SIZE = 32  ; 8,16,32,64
                 .equ RX0_OFF_FILL = 4   ; Fill level for XOFF
                 
                 .equ RX1_BUF_SIZE = 32  ; 8,16,32,64
                 .equ RX1_OFF_FILL = 4   ; Fill level for XOFF
                 
                 ;;; USER AREA sizes for the OPERATOR task
                 .equ RETURN_STACK_SIZE = 96          ; 48 cells return stack
                 .equ PARAMETER_STACK_SIZE = 64       ; 32 cells parameter stack
                 .equ TIB_SIZE = 96                   ; 86 chars tib size +  10 chars hold area
                 
                 ; Set to 1 to allow control-o to reset FlashForth from the operator UART
                 .equ CTRL_O_WARM_RESET = 1
                 
                 ; Select which timer to use for the system millisecond ticks 0, 1, 2
                 .equ MS_TIMER = 0
                 
                 #if defined(__ATmega2560__)
                 #define partstring "ATmega2560"
                 #elif defined(__ATmega328P__)
                 #elif defined(__ATmega328__)
                 #elif defined(__ATmega128__)
                 #elif defined(__ATmega2561__)
                 #elif defined(__ATmega644__)
                 #else
                 #endif
                 
                 .if MS_TIMER == 0
                 .ifdef OC0Aaddr
                 .equ MS_TIMER_ADDR = OC0Aaddr
                 .else
                 .endif
                 .endif
                 
                 .if MS_TIMER == 1
                 .ifdef OC1Aaddr
                 .else
                 .endif
                 .endif
                 
                 .if MS_TIMER == 2
                 .ifdef OC2Aaddr
                 .else
                 .endif
                 .endif
                 
                 
                 ; Define the FF version date string
                 #define DATE "10.01.2015"
                 
                 
                 ; Register definitions
                   .def upl = r2         ; not in interrupt 
                   .def uph = r3         ; not in interrupt
                   .def zero = r5        ; read only zero
                   .def r_one = r6       ; read only one
                   .def r_two = r7       ; read only two
                   .def t8 = r8          ; Not in interrupt
                   .def wflags  = r9     ; not in interrupt
                 
                   .def loadreg0 = r4    ;
                   .def loadreg1 = r12
                   .def loadreg2 = r13
                 
                 
                   .def ibasel=r10       ; Not in interrupt
                   .def ibaseh=r11       ; Not in interrupt
                   .def ms_count  = r14  ; Not in interrupt
                   .def ms_count1 = r15  ; Not in interrupt
                   .def t0 = r16
                   .def t1 = r17
                   .def t2 = r0          ; Not in interrupt
                   .def t3 = r1          ; Not in interrupt
                 
                   .def il = r18         ; FOR..LOOP INDEX variable
                   .def ih = r19
                   .def pl = r20         ; P Register
                   .def ph = r21
                 
                   .def FLAGS1 = r22     ; Not in interrupt
                   .def FLAGS2 = r23     ; Not in interrupt
                   .def tosl = r24
                   .def tosh = r25
                 ;  xl = r26
                 ;  xh = r27
                 ;  yl = r28  ; StackPointer Ylo
                 ;  yh = r29  ; StackPointer Yhi
                 ;  zl = r30
                 ;  zh = r31
                   .def t4 = r26
                   .def t5 = r27
                   .def t6 = r30
                   .def t7 = r31
                 
                 ; Macros
                 .macro poptos 
                     ld tosl, Y+
                     ld tosh, Y+
                 .endmacro
                 
                 .macro pushtos
                     st -Y, tosh
                     st -Y, tosl
                 .endmacro
                 
                 .macro in_
                 .if (@1 < $40)
                   in @0,@1
                 .else
                   lds @0,@1
                 .endif
                 .endmacro
                 
                 .macro out_
                 .if (@0 < $40)
                   out @0,@1
                 .else
                   sts @0,@1
                 .endif
                 .endmacro
                 
                 .macro sbi_
                 .if (@0 < $40)
                   sbi @0,@1
                 .else
                   in_ @2,@0
                   ori @2,exp2(@1)
                   out_ @0,@2
                 .endif
                 .endmacro
                 
                 .macro cbi_
                 .if (@0 < $40)
                   cbi @0,@1
                 .else
                   in_ @2,@0
                   andi @2,~(exp2(@1))
                   out_ @0,@2
                 .endif
                 .endmacro
                 
                 .macro lpm_
                 .if (FLASHEND < 0x8000) ; Word address
                         lpm @0,@1
                 .else
                         elpm @0,@1
                 .endif
                 .endmacro
                 
                 .macro sub_pflash_z
                 .if (PFLASH > 0)
                         subi    zh, high(PFLASH)
                 .endif
                 .endmacro
                 
                 .macro add_pflash_z
                 .if (PFLASH > 0)
                         subi    zh, high(0x10000-PFLASH)
                 .endif        
                 .endmacro
                 
                 .macro sub_pflash_tos
                 .if (PFLASH > 0)
                         subi    tosh, high(PFLASH)
                 .endif
                 .endmacro
                 
                 .macro add_pflash_tos
                 .if (PFLASH > 0)
                         subi    tosh, high(0x10000-PFLASH)
                 .endif        
                 .endmacro
                 
                 .macro rampv_to_c
                 .if (FLASHEND >= 0x8000)
                         bset    0
                 .else
                         bclr    0
                 .endif
                 .endmacro
                 
                 .macro fdw
                   .dw ((@0<<1)+PFLASH)
                 .endmacro
                 
                 .macro m_pop_zh
                 .ifdef EIND
                         pop     zh
                 .endif
                 .endmacro
                 .macro m_pop_xh
                 .ifdef EIND
                         pop     xh
                  .endif
                 .endmacro
                 .macro m_pop_t0
                 .ifdef EIND
                         pop     t0
                  .endif
                 .endmacro
                 .macro m_push_t0
                 .ifdef EIND
                         push    t0
                  .endif
                 .endmacro
                 .macro mijmp
                 .ifdef EIND
                         eijmp
                 .else
                         ijmp
                 .endif
                 .endmacro
                 
                 ; Symbol naming compatilibity
                 ; UART0 symbols for Atmega32
                 .ifndef UCSR0A
                 .else
                 .equ UDR0_=UDR0
                 .equ URSEL_=0
                 .endif
                 
                 .ifndef SPMCSR
                 .endif
                 
                 .ifndef SPMEN
                 .endif
                 
                 .ifndef EEWE
                 .equ EEWE=EEPE
                 .endif
                 
                 .ifndef EEMWE
                 .equ EEMWE=EEMPE
                 .endif
                 
                 .if OPERATOR_UART == 1
                 .else
                 .if OPERATOR_UART == 0
                 .equ OP_TX_=TX0_
                 .equ OP_RX_=RX0_
                 .equ OP_RXQ=RX0Q
                 .endif
                 .endif
                 
                 #define ubrr0val (FREQ_OSC/16/BAUDRATE0) - 1
                 #define ubrr1val (FREQ_OSC/16/BAUDRATE1) - 1
                 
                 .if FREQ_OSC < 16384000 ;Hz
                 .equ ms_value_tmr0 = ((FREQ_OSC/1000/64) - 1)
                 .equ ms_value_tmr1 = ((FREQ_OSC/1000) - 1)
                 .equ ms_value_tmr2 = ((FREQ_OSC/1000/64) - 1)
                 .ifdef TCCR0B
                 .equ ms_pre_tmr0   = 3
                 .endif
                 .ifdef TCCR0
                 .endif
                 .ifdef TCCR2B
                 .equ ms_pre_tmr2   = 4
                 .endif
                 .ifdef TCCR2
                 .endif
                 
                 .else ; FREQ_OSC >= 16384000 Hz
                 .ifdef TCCR0B
                 .endif
                 .ifdef TCCR0
                 .endif
                 .ifdef TCCR2B
                 .endif
                 .ifdef TCCR2
                 .endif
                 .endif
                 .equ CPU_LOAD_VAL  = (FREQ_OSC*256/100000)
                 ;..............................................................................
                 ;Program Specific Constants (literals used in code)
                 ;..............................................................................
                 ; Flash page size
                 .equ PAGESIZEB=PAGESIZE*2    ; Page size in bytes 
                 
                 ; Forth word header flags
                 .equ NFA= 0x80      ; Name field mask
                 .equ IMMED= 0x40    ; Immediate mask
                 .equ INLINE= 0x20   ; Inline mask for 1 and 2 cell code
                 .equ INLINE4= 0x00   ; Inline mask for 4 cell code
                 .equ INLINE5= 0x00   ; Inline mask for 5 cell code
                 .equ COMPILE= 0x10  ; Compile only mask
                 .equ NFAmask= 0xf   ; Name field length mask
                 
                 ; FLAGS2
                 .equ fBUSY=     7   ; 1 = busy
                 .equ fIDLE=     6   ; 1 = busy
                 .equ fLOAD=     5   ; Load measurement ready
                 .equ fLOADled=  4   ; 0 = no load led, 1 = load led on
                 .equ fFC_tx1=   3   ; 0=Flow Control, 1 = no Flow Control   
                 .equ fFC_tx0=   2   ; 0=Flow Control, 1 = no Flow Control   
                 .equ ixoff_tx1= 1                    
                 .equ ixoff_tx0= 0
                 
                 ; FLAGS1
                 .equ noclear= 6     ; dont clear optimisation flags 
                 .equ idup=    5     ; Use dupzeroequal instead of zeroequal
                 .equ izeroeq= 4     ; Use brne instead of breq if zeroequal
                 .equ istream= 3
                 .equ fLOCK=   2
                 .equ fTAILC=  1
                 .equ idirty=  0
                 
                 ;;; For Flow Control
                 .equ XON=   0x11
                 .equ XOFF=  0x13
                 
                 .equ CR_=0x0d
                 .equ LF_=0x0a
                 .equ BS_=0x08
                 .equ TAB_=0x09
                 
                 ;;; Memory mapping prefixes
                 .equ PRAM    = 0x0000                 ; 8 Kbytes of ram (atm2560)
                 .equ PEEPROM = RAMEND+1               ; 4 Kbytes of eeprom (atm2560)
                 .if (FLASHEND == 0x1ffff)              ; 128 Kwords flash
                 .equ OFLASH  = PEEPROM+EEPROMEND+1    ; 56 Kbytes available for FlashForth(atm2560)
                 .equ PFLASH  = 0
                 .equ RAMPZV  = 3
                 .equ KERNEL_SIZE=0x0d00
                 .else
                 .if (FLASHEND == 0xffff)              ; 64 Kwords flash
                 .else
                 .if (FLASHEND == 0x7fff)              ; 32 Kwords flash
                 .else
                 .if (FLASHEND == 0x3fff)              ; 16 Kwords flash
                 .else
                 .if (FLASHEND == 0x1fff)              ; 8  Kwords flash
                 .endif
                 .endif
                 .endif
                 .endif
                 .endif
                 .equ BOOT_SIZE=0x400
                 .equ BOOT_START=FLASHEND - BOOT_SIZE + 1  ; atm128: 0xfc00, atm328: 0x3c00 
                 .equ KERNEL_START=BOOT_START - KERNEL_SIZE
                 
                 ;;;  High values for memory areas
                 .equ FLASH_HI = 0xffff - (BOOT_SIZE*2) - (KERNEL_SIZE*2)
                 .equ EEPROM_HI =PEEPROM + EEPROMEND
                 .equ RAM_HI = RAMEND
                         
                 ;;; USER AREA for the OPERATOR task
                 ;.equ uaddsize=     0          ; No additional user variables 
                 .equ ursize=       RETURN_STACK_SIZE
                 .equ ussize=       PARAMETER_STACK_SIZE
                 .equ utibsize=     TIB_SIZE
                 
                 ;;; User variables and area
                 .equ us0=          -28         ; Start of parameter stack
                 .equ ur0=          -26         ; Start of ret stack
                 .equ uemit=        -24         ; User EMIT vector
                 .equ ukey=         -22         ; User KEY vector
                 .equ ukeyq=        -20         ; User KEY? vector
                 .equ ubase=        -18         ; Number Base
                 .equ utib=         -16         ; TIB address
                 .equ utask=        -14         ; Task area pointer
                 .equ ustatus=      -12
                 .equ uflg=         -11
                 .equ usource=      -10         ; Two cells
                 .equ utoin=        -6          ; Input stream
                 .equ ulink=        -4          ; Task link
                 .equ ursave=       -2          ; Saved ret stack pointer
                 .equ uhp=           0          ; Hold pointer
                 
                 
                 ;;; Variables in EEPROM
                 .equ eeprom=       PEEPROM
                 .equ dp_start=     eeprom + 0x0000 ; TURNKEY
                 .equ dp_flash=     eeprom + 0x0002 ; FLASH dictionary pointer
                 .equ dp_eeprom=    eeprom + 0x0004 ; EEPROM dictionary pointer
                 .equ dp_ram=       eeprom + 0x0006 ; RAM dictionary pointer
                 .equ latest=       eeprom + 0x0008 ; Pointer to latest dictionary word
                 .equ prompt=       eeprom + 0x000a ; Deferred prompt
                 .equ ehere=        eeprom + 0x000c
                 
                 ;****************************************************
                 .dseg
000200           ibuf:         .byte PAGESIZEB
000300           ivec:         .byte INT_VECTORS_SIZE
                 
                 rxqueue0:
000372           rbuf0_wr:    .byte 1
000373           rbuf0_rd:    .byte 1
000374           rbuf0_lv:    .byte 1
000375           rbuf0:       .byte RX0_BUF_SIZE
                 
                 .ifdef UCSR1A
                 rxqueue1:
000395           rbuf1_wr:    .byte 1
000396           rbuf1_rd:    .byte 1
000397           rbuf1_lv:    .byte 1
000398           rbuf1:       .byte RX1_BUF_SIZE
                 .endif
                 
0003b8           dpSTART:    .byte 2
0003ba           dpFLASH:    .byte 2 ; DP's and LATEST in RAM
0003bc           dpEEPROM:   .byte 2
0003be           dpRAM:      .byte 2
0003c0           dpLATEST:   .byte 2
                 
0003c2           areg:       .byte 2 ; A register data
0003c4           iaddrl:     .byte 1
0003c5           iaddrh:     .byte 1
0003c6           load_acc:   .byte 3 ; Load measurement accumulator
0003c9           load_res:   .byte 3 ; Load result
                 ; load:       .byte 1 ; Cpu load in percent
0003cc           cse:        .byte 1 ; Current data section 0=flash, 1=eeprom, 2=ram
0003cd           state:      .byte 1 ; Compilation state
0003ce           uvars:      .byte   (-us0)
0003ea           up0:        .byte   2
0003ec           urbuf:      .byte   ursize
00044c           usbuf:      .byte   ussize
00048c           utibbuf:    .byte   utibsize
0004ec           dpdata:     .byte   2
                 
                 .eseg
                 .org 0
000000 ff ff             .dw 0xffff  ; Force first cell of eeprom to 0xffff
                 ;*******************************************************************
                 ; Start of kernel
                 ;*******************************************************************
                 .cseg
                 .org KERNEL_START
                 
                 
                 
                 ;***********************************************************
                 ; unsigned 32/16 -> 16/16 division
                 umslashmod0:
01ef00 94e8              clt
01ef01 2388              tst  tosl
01ef02 f429              brne umslashmodstart
01ef03 2399              tst  tosh
01ef04 f419              brne umslashmodstart
01ef05 9468              set  ; Set T flag
01ef06 940d fd95         jmp  WARM_
                 umslashmodstart:
01ef08 920f              push t2
01ef09 921f              push t3
01ef0a 01dc              movw t4, tosl
                 
01ef0b 9019              ld t3, Y+
01ef0c 91e9              ld t6, Y+
                   
01ef0d 9189              ld tosl, Y+
01ef0e 9199              ld tosh, Y+
                 
                 ; unsigned 32/16 -> 16/16 division
                         ; set loop counter
01ef0f e100              ldi t0,$10 ;6
                 
                 umslashmod1:
                         ; shift left, saving high bit
01ef10 27ff              clr t7
01ef11 0f88              lsl tosl
01ef12 1f99              rol tosh
01ef13 1c11              rol t3
01ef14 1fee              rol t6
01ef15 1fff              rol t7
                 
                         ; try subtracting divisor
01ef16 161a              cp  t3, t4
01ef17 07eb              cpc t6, t5
01ef18 05f5              cpc t7,zero
                 
01ef19 f018              brcs umslashmod2
                 
                         ; dividend is large enough
                         ; do the subtraction for real
                         ; and set lowest bit
01ef1a 9583              inc tosl
01ef1b 1a1a              sub t3, t4
01ef1c 0beb              sbc t6, t5
                 
                 umslashmod2:
01ef1d 950a              dec  t0
01ef1e f789              brne umslashmod1 ;16=17=272
                 
                 umslashmod3:
                         ; put remainder on stack
01ef1f 93ea              st -Y,t6
01ef20 921a              st -Y,t3
01ef21 901f              pop t3
01ef22 900f              pop t2
                         ; Quotient is already in tos ; 6 + 272 + 4 =282 cycles
01ef23 9508              ret
                 ; *******************************************************************
                 ; EXIT --   Compile a return
                 ;        variable link
01ef24 0000              .dw     0
                 EXIT_L:
01ef25 6584
01ef26 6978
01ef27 0074              .db     NFA|4,"exit",0
                 EXIT:
01ef28 910f              m_pop_t0
01ef29 910f              pop     t0
01ef2a 910f              pop     t0
01ef2b 9508              ret
                 
                 ; idle
01ef2c de4a              fdw(EXIT_L)
                 IDLE_L:
01ef2d 6984
01ef2e 6c64
01ef2f 0065              .db     NFA|4,"idle",0
                 IDLE:
01ef30 7b7f              cbr     FLAGS2, (1<<fIDLE)
01ef31 9508              ret
                         
                 ; busy
01ef32 de5a              fdw(IDLE_L)
                 BUSY_L:
01ef33 6284
01ef34 7375
01ef35 0079              .db     NFA|4,"busy",0
                 BUSY:
01ef36 6470              sbr     FLAGS2, (1<<fIDLE)
01ef37 9508              ret        
                 ; *********************************************
                 ; Bit masking 8 bits, only for ram addresses !
                 ; : mset ( mask addr -- )
                 ;   dup >r c@ swap or r> c!
                 ; ;
01ef38 ff5a              fdw     ICCOMMA_L
                 MSET_L:
01ef39 6d84
01ef3a 6573
01ef3b 0074              .db     NFA|4,"mset",0
                 MSET:
01ef3c 01fc              movw    zl, tosl
01ef3d 9189
01ef3e 9199              poptos
01ef3f 8100              ld      t0, z
01ef40 2b08              or      t0, tosl
01ef41 8300              st      z, t0
01ef42 9189
01ef43 9199              poptos
01ef44 9508              ret
                         
                 ; : mclr  ( mask addr -- )
                 ;  dup >r c@ swap invert and r> c!
                 ; ;
01ef45 de72              fdw     MSET_L
                 MCLR_L:
01ef46 6d84
01ef47 6c63
01ef48 0072              .db     NFA|4,"mclr",0
                 MCLR_:
01ef49 01fc              movw    zl, tosl
01ef4a 9189
01ef4b 9199              poptos
01ef4c 8100              ld      t0, z
01ef4d 9580              com     tosl
01ef4e 2308              and     t0, tosl
01ef4f 8300              st      z, t0
01ef50 9189
01ef51 9199              poptos
01ef52 9508              ret
                 
                 ;   LSHIFT      x1 u -- x2
01ef53 de8c              fdw     MCLR_L
                 LSHIFT_L:
01ef54 6c86
01ef55 6873
01ef56 6669
01ef57 0074              .db     NFA|6,"lshift",0
                 LSHIFT:
01ef58 01fc              movw    zl, tosl
01ef59 9189
01ef5a 9199              poptos
                 LSHIFT1:
01ef5b 9731              sbiw    zl, 1
01ef5c f01a              brmi    LSHIFT2
01ef5d 0f88              lsl     tosl
01ef5e 1f99              rol     tosh
01ef5f cffb              rjmp    LSHIFT1
                 LSHIFT2:
01ef60 9508              ret
                 
                 ;   RSHIFT      x1 u -- x2
01ef61 dea8              fdw     LSHIFT_L
                 RSHIFT_L:
01ef62 7286
01ef63 6873
01ef64 6669
01ef65 0074              .db     NFA|6,"rshift",0
                 RSHIFT:
01ef66 01fc              movw    zl, tosl
01ef67 9189
01ef68 9199              poptos
                 RSHIFT1:
01ef69 9731              sbiw    zl, 1
01ef6a f01a              brmi    RSHIFT2
01ef6b 9596              lsr     tosh
01ef6c 9587              ror     tosl
01ef6d cffb              rjmp    RSHIFT1
                 RSHIFT2:
01ef6e 9508              ret
                 
                 ;**********************************************
                 NEQUALSFETCH:
01ef6f d560              rcall   CFETCHPP
01ef70 d2ac              rcall   ROT
01ef71 d55e              rcall   CFETCHPP
01ef72 940d f21d         jmp     ROT
                 ;***************************************************
                 ; N=    c-addr nfa -- n   string:name cmp
                 ;             n=0: s1==s2, n=ffff: s1!=s2
                 ; N= is specificly used for finding dictionary entries
                 ; It can also be used for comparing strings shorter than 16 characters,
                 ; but the first string must be in ram and the second in program memory.
01ef74 dec4              fdw     RSHIFT_L
                 NEQUAL_L:
01ef75 6e82
01ef76 003d              .db     NFA|2,"n=",0
                 NEQUAL:
01ef77 dff7              rcall   NEQUALSFETCH
01ef78 708f              andi    tosl, 0xf
01ef79 d34e              rcall   EQUAL
01ef7a d3bf              rcall   ZEROSENSE
01ef7b f0b1              breq    NEQUAL5
01ef7c d312              rcall   ONEMINUS
01ef7d d552              rcall   CFETCHPP
01ef7e d2a5              rcall   TOR
01ef7f c00c              rjmp    NEQUAL4
                 NEQUAL2:
01ef80 dfee              rcall   NEQUALSFETCH
01ef81 d33f              rcall   NOTEQUAL
01ef82 d3b7              rcall   ZEROSENSE
01ef83 f021              breq    NEQUAL3
01ef84 d750              rcall   TRUE_
01ef85 940f f9e9         call    LEAVE
01ef87 c004              rjmp    NEQUAL4
                 NEQUAL3:
01ef88 d2b1              rcall   RFETCH
01ef89 d3b0              rcall   ZEROSENSE
01ef8a f409              brne    NEQUAL4
01ef8b d740              rcall   FALSE_
                 NEQUAL4:
01ef8c 940f f9d8         call    XNEXT
01ef8e f788              brcc    NEQUAL2
01ef8f 911f              pop     t1
01ef90 910f              pop     t0
01ef91 c001              rjmp    NEQUAL6
                 NEQUAL5:
01ef92 d742              rcall   TRUE_
                 NEQUAL6:
01ef93 d3e7              rcall   NIP
01ef94 940d f37b         jmp     NIP
                 
                 ; SKIP   c-addr u c -- c-addr' u'
                 ;                          skip matching chars
                 ; u (count) must be smaller than 256
01ef96 deea              fdw     NEQUAL_L
                 SKIP_L:
01ef97 7384
01ef98 696b
01ef99 0070              .db     NFA|4,"skip",0
                 SKIP:
                 
01ef9a d289              rcall   TOR
                 SKIP0:
01ef9b d3a4              rcall   DUPZEROSENSE
01ef9c f089              breq    SKIP2
                 
01ef9d d277              rcall   OVER
01ef9e d3fe              rcall   CFETCH_A
                 
01ef9f d794              rcall   DUP
01efa0 d789              rcall   DOLIT
01efa1 0009              .dw     TAB_
01efa2 d325              rcall   EQUAL
01efa3 d396              rcall   ZEROSENSE
01efa4 f429              brne    SKIP05    
01efa5 d294              rcall   RFETCH
01efa6 d321              rcall   EQUAL
01efa7 d392              rcall   ZEROSENSE
01efa8 f029              breq    SKIP2
01efa9 c001                      rjmp    SKIP1
                 SKIP05:
01efaa d259              rcall   DROP
                 SKIP1:
01efab d1cc              rcall   ONE
01efac d4ce              rcall   SLASHSTRING
01efad cfed              rjmp    SKIP0
                 SKIP2:
01efae 910f              pop     t0
01efaf 910f              pop     t0
01efb0 9508              ret
                 
                 
                 ; SCAN   c-addr u c -- c-addr' u'
                 ;                          find matching chars
                 
                 
01efb1 df2e              fdw     SKIP_L
                 SCAN_L:
01efb2 7384
01efb3 6163
01efb4 006e              .db     NFA|4,"scan",0
                 SCAN:
01efb5 d338              rcall   STORE_P_TO_R
01efb6 d26d              rcall   TOR
01efb7 c010              rjmp    SCAN3
                 SCAN1:
01efb8 d517              rcall   CFETCHPP
01efb9 d77a              rcall   DUP
01efba d76f              rcall   DOLIT
01efbb 0009              .dw     TAB_
01efbc d30b              rcall   EQUAL
01efbd d37c              rcall   ZEROSENSE
01efbe f011              breq    SCAN2
01efbf d244              rcall   DROP
01efc0 c005              rjmp    SCAN25
                 SCAN2:
01efc1 940f faaf         call    FETCH_P
01efc3 d304              rcall   EQUAL
01efc4 d375              rcall   ZEROSENSE
01efc5 f011              breq    SCAN3
                 SCAN25:
01efc6 d2c8              rcall   ONEMINUS
01efc7 c003              rjmp    SCAN4
                 SCAN3:
01efc8 940f f9d8         call    XNEXT
01efca f768              brcc    SCAN1
                 SCAN4:
01efcb d263              rcall   RFROM
01efcc d2bd              rcall   ONEPLUS
01efcd d32c              rcall   R_TO_P
01efce 9508              ret
                 
                 ; : mtst ( mask addr -- flag )
                 ;   c@ and 
                 ; ;
01efcf df64              fdw     SCAN_L
                 MTST_L:
01efd0 6d84
01efd1 7374
01efd2 0074              .db     NFA|4,"mtst",0
                 MTST:
01efd3 940f fef2         call    CFETCH
01efd5 940d f262         jmp     AND_
                 
01efd7 dfa0              fdw     MTST_L
                 FCY_L:
01efd8 4683
01efd9 7963              .db     NFA|3,"Fcy"
01efda d069              rcall   DOCREATE
01efdb 3e80              .dw     FREQ_OSC / 1000
                 
                 ;*******************************************************
                 ; Assembler
                 ;*******************************************************
                 ; FIXME
                 ;*******************************************************
                         
                 
                 ;;; Check parameter stack pointer
01efdc 7383
01efdd 3f70              .db     NFA|3,"sp?"
                 check_sp:
01efde d08e              rcall   SPFETCH
01efdf 940f f864         call    R0_
01efe1 d688              rcall   FETCH_A
01efe2 940f f85f         call    S0
01efe4 d685              rcall   FETCH_A
01efe5 d2a4              rcall   ONEPLUS
01efe6 d2d0              rcall   WITHIN
01efe7 d1e4              rcall   XSQUOTE
01efe8 5303
01efe9 3f50              .db     3,"SP?"
01efea d72c              rcall   QABORT
01efeb 9508              ret
                 ;***************************************************
                 ; EMIT  c --    output character to the emit vector
01efec dfb0              fdw     FCY_L
                 EMIT_L:
01efed 6584
01efee 696d
01efef 0074              .db     NFA|4,"emit",0
                 EMIT:
01eff0 d339              rcall   UEMIT_
01eff1 940d f00f         jmp     FEXECUTE
                 
                 ;***************************************************
                 ; KEY   -- c    get char from UKEY vector
01eff3 dfda              fdw     EMIT_L
                 KEY_L:
01eff4 6b83
01eff5 7965              .db     NFA|3,"key"
                 KEY:
01eff6 d339              rcall   UKEY_
01eff7 940d f00f         jmp     FEXECUTE
                 
                 ;***************************************************
                 ; KEY   -- c    get char from UKEY vector
01eff9 dfe8              fdw     KEY_L
                 KEYQ_L:
01effa 6b84
01effb 7965
01effc 003f              .db     NFA|4,"key?",0
                 KEYQ:
01effd d338              rcall   UKEYQ_
01effe 940d f00f         jmp     FEXECUTE
                 
01f000 dff4              fdw     KEYQ_L
                 EXECUTE_L:
01f001 6587
01f002 6578
01f003 7563
01f004 6574              .db     NFA|7,"execute"
                 EXECUTE:
01f005 01fc              movw    zl, tosl
                         sub_pflash_z
01f006 9189
01f007 9199              poptos
01f008 9408              rampv_to_c
01f009 95f7              ror     zh
01f00a 95e7              ror     zl
01f00b 9419              mijmp
                 
01f00c e002              fdw     EXECUTE_L
                 FEXECUTE_L:
01f00d 4083
01f00e 7865              .db     NFA|3,"@ex"
                 FEXECUTE:
01f00f d65a              rcall   FETCH_A
01f010 940d f005         jmp     EXECUTE
                 
01f012 e01a              fdw     FEXECUTE_L
                 VARIABLE_L:
01f013 7688
01f014 7261
01f015 6169
01f016 6c62
01f017 0065              .db     NFA|8,"variable",0
                 VARIABLE_:
01f018 d0a2              rcall   HERE
01f019 d0b7              rcall   CELL
01f01a d1e2              rcall   ALLOT
01f01b 940d f02f         jmp     CONSTANT_
                 
01f01d e026              fdw     VARIABLE_L
                 TWOVARIABLE_L:
01f01e 3289
01f01f 6176
01f020 6972
01f021 6261
01f022 656c              .db     NFA|9,"2variable"
                 TWOVARIABLE_:
01f023 d097              rcall   HERE
01f024 d705              rcall   DOLIT
01f025 0004              .dw     0x4
01f026 d1d6              rcall   ALLOT
01f027 940d f02f         jmp     CONSTANT_
                 
01f029 e03c              fdw     TWOVARIABLE_L
                 CONSTANT_L:
01f02a 6388
01f02b 6e6f
01f02c 7473
01f02d 6e61
01f02e 0074              .db     NFA|8,"constant",0
                 CONSTANT_:
01f02f d7c7              rcall   COLON
01f030 940f fe52         call    LITERAL
01f032 940d f805         jmp     SEMICOLON
                 
01f034 e054              fdw     CONSTANT_L
                 TWOCONSTANT_L:
01f035 3289
01f036 6f63
01f037 736e
01f038 6174
01f039 746e              .db     NFA|9,"2constant"
                 TWOCONSTANT_:
01f03a d1d0              rcall   SWOP
01f03b d7bb              rcall   COLON
01f03c 940f fe52         call    LITERAL
01f03e 940f fe52         call    LITERAL
01f040 940d f805         jmp     SEMICOLON
                 
                 ; DOCREATE, code action of CREATE
                 ; Fetch the next cell from program memory to the parameter stack
                 DOCREATE_L:
01f042 2883
01f043 2963              .db     NFA|3, "(c)"
                 DOCREATE:
01f044 91ff              m_pop_zh
01f045 91ff              pop     zh
01f046 91ef              pop     zl
01f047 d00f              rcall   FETCHLIT
01f048 91ff              m_pop_zh
01f049 91ff              pop     zh
01f04a 91ef              pop     zl
01f04b 9419              mijmp
                 
                 ;;; Resolve the runtime action of the word created by using does>
                 DODOES_L:
01f04c 2883
01f04d 2964              .db     NFA|3, "(d)"
                 DODOES:
01f04e 91bf              m_pop_xh
01f04f 91bf              pop     xh
01f050 91af              pop     xl
01f051 91ff              m_pop_zh
01f052 91ff              pop     zh
01f053 91ef              pop     zl
01f054 d002              rcall   FETCHLIT
01f055 01fd              movw    z, x
01f056 9419              mijmp    ; (z)
                 FETCHLIT:
01f057 939a
01f058 938a              pushtos
01f059 0fee              lsl     zl
01f05a 1fff              rol     zh
01f05b 9187              lpm_    tosl, z+
01f05c 9197              lpm_    tosh, z+
01f05d 9508              ret
                 
01f05e 2883
01f05f 292c              .db     NFA|3, "(,)"
                 DOCOMMAXT:
01f060 910f              m_pop_t0
01f061 91ff              pop     zh
01f062 91ef              pop     zl
01f063 dff3              rcall   FETCHLIT
01f064 95f7              ror     zh
01f065 95e7              ror     zl
01f066 93ef              push    zl
01f067 93ff              push    zh
01f068 930f              m_push_t0
01f069 c09a              rjmp     COMMAXT
                 
                 ;   SP@     -- addr         get parameter stack pointer
01f06a e06a              fdw     TWOCONSTANT_L
                 SPFETCH_L:
01f06b 7383
01f06c 4070              .db     NFA|3,"sp@"
                 SPFETCH:
01f06d 01fe              movw    z, y
01f06e 939a
01f06f 938a              pushtos
01f070 01cf              movw    tosl, z
01f071 9508              ret
                 
                 ;   SP!     addr --         store stack pointer
01f072 7383
01f073 2170              .db     NFA|3,"sp!"
                 SPSTORE:
01f074 01ec              movw    y, tosl
01f075 9508              ret
                 
                 ;   RPEMPTY     -- EMPTY THE RETURN STACK       
01f076 7283
01f077 3070              .db     NFA|3,"rp0"
                 RPEMPTY:
01f078 91bf              m_pop_xh
01f079 91bf              pop     xh
01f07a 91af              pop     xl
01f07b d7e8              rcall   R0_
01f07c d5ed              rcall   FETCH_A
01f07d bf8d              out     spl, tosl
01f07e bf9e              out     sph, tosh
01f07f 9189
01f080 9199              poptos
01f081 01fd              movw    zl, xl
01f082 9419              mijmp
                 
                 ;   RP@ Fetch the return stack pointer        
01f083 e0d6              fdw     SPFETCH_L
                 RPFETCH_L:
01f084 72b3
01f085 4070              .db     NFA|INLINE|COMPILE|3,"rp@"
                 RPFETCH:
01f086 939a
01f087 938a              pushtos
01f088 b78d              in      tosl, spl
01f089 b79e              in      tosh, sph
01f08a 9508              ret
                 
                 ;   ><  Swap bytes        
01f08b e108              fdw     RPFETCH_L
                 SWAPB_L:
01f08c 3ea2
01f08d 003c              .db     NFA|INLINE|2,"><",0
                 SWAPB:
01f08e 2f08              mov     t0, tosl
01f08f 2f89              mov     tosl, tosh
01f090 2f90              mov     tosh, t0
01f091 9508              ret
                 
                 ; DICTIONARY POINTER FOR the current section
                 ; Flash -- sets the data section to flash
01f092 e118              fdw     SWAPB_L
                 FLASH_L:
                 ROM_N:  
01f093 6685
01f094 616c
01f095 6873              .db     NFA|5,"flash"
                 ROM_:
01f096 9250 03cc         sts     cse, zero
01f098 9508              ret
                 
                 ; EEPROM -- sets the data section to EEPROM data memory
01f099 e126              fdw     FLASH_L
                 EEPROM_L:
                 EROM_N: 
01f09a 6586
01f09b 7065
01f09c 6f72
01f09d 006d              .db     NFA|6,"eeprom",0
                 EROM:
01f09e 9270 03cc         sts     cse, r_two
01f0a0 9508              ret
                         
                 ; RAM -- sets the data section to RAM memory
01f0a1 e134              fdw     EEPROM_L
                 RAM_L:
                 FRAM_N: 
01f0a2 7283
01f0a3 6d61              .db     NFA|3,"ram"
                 FRAM:
01f0a4 e004              ldi     t0, 4
01f0a5 9300 03cc         sts     cse, t0
01f0a7 9508              ret
                 
                 ; DP    -- a-addr          
                 ; Fetched from EEPROM
01f0a8 e144              fdw     RAM_L
                 DP_L:
01f0a9 6482
01f0aa 0070              .db     NFA|2,"dp",0
                 DP:
01f0ab d71d              rcall   IDP
01f0ac d004              rcall   CSE_
01f0ad 940d f24c         jmp     PLUS
                 
                 
                 ;;; 
01f0af 6383
01f0b0 6573              .db     NFA|3,"cse"
                 CSE_:
01f0b1 939a
01f0b2 938a              pushtos
01f0b3 9180 03cc         lds     tosl, cse
01f0b5 2799              clr     tosh
01f0b6 9508              ret
                 
                 ; HERE    -- addr    get current data space ptr
                 ;   DP @ ;
01f0b7 e152              fdw     DP_L
                 HERE_L:
01f0b8 6884
01f0b9 7265
01f0ba 0065              .db     NFA|4,"here",0
                 HERE:
01f0bb dfef              rcall   DP
01f0bc 940d fec7         jmp     FETCH
                 
                 ; ,   x --             append cell to current data space
                 ;   HERE ! CELL ALLOT ;
01f0be e170              fdw     HERE_L
                 COMMA_L:
01f0bf 2c81              .db     NFA|1,","
                 COMMA:
01f0c0 dffa              rcall   HERE
01f0c1 d41c              rcall   STORE_A
01f0c2 d00e              rcall   CELL
01f0c3 940d f1fd         jmp     ALLOT
                 
                 ; C,  c --             append char to current data space
                 ;   HERE C! 1 ALLOT ;
01f0c5 e17e              fdw     COMMA_L 
                 CCOMMA_L:
01f0c6 6382
01f0c7 002c              .db     NFA|2,"c,",0
                 CCOMMA:
01f0c8 dff2              rcall   HERE
01f0c9 d2d7              rcall   CSTORE_A
01f0ca d0ad              rcall   ONE
01f0cb 940d f1fd         jmp     ALLOT
                 
                 
                 ; CELL     -- n                 size of one cell
01f0cd e18c              fdw     CCOMMA_L
                 CELL_L:
01f0ce 6384
01f0cf 6c65
01f0d0 006c              .db     NFA|4,"cell",0
                 CELL:
01f0d1 939a
01f0d2 938a              pushtos
01f0d3 e082              ldi     tosl, 2
01f0d4 e090              ldi     tosh, 0
01f0d5 9508              ret
                 
                 ; ALIGN    --                         align DP
01f0d6 e19c              fdw     CELL_L
                 ALIGN_L:
01f0d7 6185
01f0d8 696c
01f0d9 6e67              .db     NFA|5,"align"
                 ALIGN:
01f0da dfe0              rcall   HERE
01f0db d008              rcall   ALIGNED
01f0dc dfce              rcall   DP
01f0dd 940d fe7e         jmp     STORE
                 
                 ; ALIGNED  addr -- a-addr       align given addr
01f0df e1ae              fdw     ALIGN_L
                 ALIGNED_L:
01f0e0 6187
01f0e1 696c
01f0e2 6e67
01f0e3 6465              .db     NFA|7,"aligned"
                 ALIGNED:
01f0e4 9601              adiw    tosl, 1
01f0e5 d644              rcall   DOLIT
01f0e6 fffe              .dw     0xfffe
01f0e7 940d f262         jmp     AND_
                 
                 ; CELL+    a-addr1 -- a-addr2      add cell size
                 ;   2 + ;
01f0e9 e1c0              fdw     ALIGNED_L
                 CELLPLUS_L:
01f0ea 63a5
01f0eb 6c65
01f0ec 2b6c              .db     NFA|INLINE|5,"cell+"
                 CELLPLUS:
01f0ed 9602              adiw    tosl, 2
01f0ee 9508              ret
                 
                 ; CELLS    n1 -- n2            cells->adrs units
01f0ef e1d4              fdw     CELLPLUS_L
                 CELLS_L:
01f0f0 63a5
01f0f1 6c65
01f0f2 736c              .db     NFA|INLINE|5,"cells"
                 CELLS:
01f0f3 0f88              lsl     tosl
01f0f4 1f99              rol     tosh
01f0f5 9508              ret
                 
                 ; CHAR+    c-addr1 -- c-addr2   add char size
01f0f6 e1e0              fdw     CELLS_L
                 CHARPLUS_L:
01f0f7 63a5
01f0f8 6168
01f0f9 2b72              .db     NFA|INLINE|5,"char+"
                 CHARPLUS:
01f0fa 9601              adiw    tosl, 1
01f0fb 9508              ret
                 
                 ; CHARS    n1 -- n2            chars->adrs units
01f0fc e1ee              fdw     CHARPLUS_L
                 CHARS_L:
01f0fd 63a5
01f0fe 6168
01f0ff 7372              .db     NFA|INLINE|5,"chars"
01f100 9508      CHARS:  ret
                 
01f101 e1fa              fdw     CHARS_L
                 COMMAXT_L:
01f102 6383
01f103 2c66              .db     NFA|3, "cf,"
                 COMMAXT:
01f104 d62f              rcall   DUP
01f105 d65c              rcall   IHERE
01f106 d152              rcall   MINUS
01f107 d13f              rcall   ABS_ 
01f108 d621              rcall   DOLIT
01f109 0ff0              .dw     0xff0
01f10a d1c7              rcall   GREATER
01f10b d22e              rcall   ZEROSENSE
01f10c f051              breq    STORECF1
                 STORECFF1: 
                 ;        rcall   CALL_
01f10d d61c              rcall   DOLIT
                 .ifdef EIND
01f10e 940f              .dw     0x940F  ; On Atmega 2560 all code is on 128 - 256 Kword area.
                 .else
                 .endif
01f10f 940f ffa5         call    ICOMMA
                         sub_pflash_tos
01f111 9408              rampv_to_c
01f112 9597              ror     tosh
01f113 9587              ror     tosl
01f114 940f ffa5         call    ICOMMA
01f116 c008              rjmp    STORECF2
                 STORECF1:
01f117 d64a              rcall   IHERE
01f118 d140              rcall   MINUS
01f119 d727              rcall   TWOMINUS
01f11a d18a              rcall   TWOSLASH
                         ;rcall   RCALL_
01f11b 709f              andi    tosh, 0x0f
01f11c 6d90              ori     tosh, 0xd0
01f11d 940f ffa5         call    ICOMMA
                 STORECF2:
01f11f 9508              ret
                 
                 
                 ; !COLON   --       change code field to docolon
                 ;   -6 IALLOT ; 
                 ;       .dw    link
                 ;link   set     $
01f120 2186
01f121 6f63
01f122 6f6c
01f123 006e              .db     NFA|6,"!colon",0
                 STORCOLON:
01f124 d605              rcall   DOLIT
01f125 fffa              .dw     0xfffa         ;  -6
01f126 940d f908         jmp     IALLOT
                 
                 
                 ; 2@    a-addr -- x1 x2            fetch 2 cells
                 ;   DUP @ SWAP CELL+ @ ;
                 ;   the lower address will appear on top of stack
01f128 e204              fdw     COMMAXT_L
                 TWOFETCH_L:
01f129 3282
01f12a 0040              .db     NFA|2,"2@",0
                 TWOFETCH:
01f12b d608              rcall   DUP
01f12c d53d              rcall   FETCH_A
01f12d d0dd              rcall   SWOP
01f12e dfbe              rcall   CELLPLUS
01f12f 940d f66a         jmp     FETCH_A
                 
                 ; 2!    x1 x2 a-addr --            store 2 cells
                 ;   SWAP OVER ! CELL+ ! ;
                 ;   the top of stack is stored at the lower adrs
01f131 e252              fdw     TWOFETCH_L
                 TWOSTORE_L:
01f132 3282
01f133 0021              .db     NFA|2,"2!",0
                 TWOSTORE:
01f134 d0d6              rcall   SWOP
01f135 d0df              rcall   OVER
01f136 dfb6              rcall   CELLPLUS
01f137 d3a6              rcall   STORE_A
01f138 940d fe7e         jmp     STORE
                 
                 ; 2DROP  x1 x2 --                   drop 2 cells
                 ;   DROP DROP ;
01f13a e264              fdw     TWOSTORE_L
                 TWODROP_L:
01f13b 3285
01f13c 7264
01f13d 706f              .db     NFA|5,"2drop"
                 TWODROP:
01f13e d0c5              rcall   DROP
01f13f 940d f204         jmp     DROP
                 
                 ; 2DUP   x1 x2 -- x1 x2 x1 x2    dup top 2 cells
                 ;   OVER OVER ;
01f141 e276              fdw     TWODROP_L
                 TWODUP_L:
01f142 3284
01f143 7564
01f144 0070              .db     NFA|4,"2dup",0
                 TWODUP:
01f145 d0cf              rcall   OVER
01f146 940d f215         jmp     OVER
                 
                 ; 2SWAP   x1 x2 x3 x4 -- x3 x4 x1 x2    dup top 2 cells
01f148 e284              fdw     TWODUP_L
                 TWOSWAP_L:
01f149 3285
01f14a 7773
01f14b 7061              .db     NFA|5,"2swap"
                 TWOSWAP:
01f14c d0d0              rcall   ROT
01f14d d0d6              rcall   TOR
01f14e d0ce              rcall   ROT
01f14f d0df              rcall   RFROM
01f150 9508              ret
                 
                 ; INPUT/OUTPUT ==================================
                 
                 ; SPACE   --                      output a space
                 ;   BL EMIT ;
01f151 e292              fdw     TWOSWAP_L
                 SPACE_L:
01f152 7385
01f153 6170
01f154 6563              .db     NFA|5,"space"
                 SPACE_:  
01f155 d6f0              rcall   BL
01f156 940d eff0         jmp     EMIT
                 
                 ; SPACES   n --                  output n spaces
                 ;   BEGIN DUP WHILE SPACE 1- REPEAT DROP ;
01f158 e2a4              fdw     SPACE_L
                 SPACES_L:
01f159 7386
01f15a 6170
01f15b 6563
01f15c 0073              .db     NFA|6,"spaces",0
                 SPACES:
                 SPCS1:
01f15d d1e2              rcall   DUPZEROSENSE
01f15e f019              breq    SPCS2
01f15f dff5              rcall   SPACE_
01f160 d12e              rcall   ONEMINUS
01f161 cffb              rjmp    SPCS1
01f162 940d f204 SPCS2:  jmp     DROP
                 
                 
                 ; umin     u1 u2 -- u           unsigned minimum
                 ;   2DUP U> IF SWAP THEN DROP ;
01f164 e2b2              fdw     SPACES_L
                 UMIN_L:
01f165 7584
01f166 696d
01f167 006e              .db     NFA|4,"umin",0
                 UMIN:
01f168 dfdc              rcall   TWODUP
01f169 d176              rcall   UGREATER
01f16a c006              rjmp    MINMAX
                 
                 ; umax    u1 u2 -- u            unsigned maximum
                 ;   2DUP U< IF SWAP THEN DROP ;
01f16b e2ca              fdw     UMIN_L
                 UMAX_L:
01f16c 7584
01f16d 616d
01f16e 0078              .db     NFA|4,"umax",0
                 UMAX:
01f16f dfd5              rcall   TWODUP
01f170 d167              rcall   ULESS
                 MINMAX:
01f171 d1c8              rcall   ZEROSENSE
01f172 f009              breq    UMAX1
01f173 d097              rcall   SWOP
01f174 940d f204 UMAX1:  jmp     DROP
                 
01f176 e2d8              fdw     UMAX_L
                 ONE_L:
01f177 3181              .db     NFA|INLINE4|1,"1"
                 ONE:
01f178 939a
01f179 938a              pushtos
01f17a e081              ldi     tosl, 1
01f17b e090              ldi     tosh, 0
01f17c 9508              ret
                 
                 ; ACCEPT  c-addr +n -- +n'  get line from terminal
01f17d e2ee              fdw     ONE_L
                 ACCEPT_L:
01f17e 6186
01f17f 6363
01f180 7065
01f181 0074              .db     NFA|6,"accept",0
                 ACCEPT:
01f182 d092              rcall   OVER
01f183 d0c8              rcall   PLUS
01f184 d090              rcall   OVER
                 ACC1:
01f185 de70              rcall   KEY
                 
01f186 308d              cpi     tosl, CR_
01f187 f429              brne    ACC_LF
                         
01f188 d54c              rcall   TRUE_
01f189 d02f              rcall   FCR
01f18a d216              rcall   CSTORE_A
01f18b d078              rcall   DROP
01f18c c026              rjmp    ACC6
                 ACC_LF:
01f18d 308a              cpi     tosl, LF_
01f18e f449              brne    ACC2
01f18f d074              rcall   DROP
                 
01f190 d028              rcall   FCR
01f191 d20b              rcall   CFETCH_A
01f192 d1a7              rcall   ZEROSENSE
01f193 f0f9              breq    ACC6
01f194 d537              rcall   FALSE_
01f195 d023              rcall   FCR
01f196 d20a              rcall   CSTORE_A
01f197 cfed              rjmp    ACC1
                 ACC2:
01f198 d533              rcall   FALSE_
01f199 d01f              rcall   FCR
01f19a d206              rcall   CSTORE_A
01f19b d598              rcall   DUP
01f19c de53              rcall   EMIT
01f19d d596              rcall   DUP
01f19e d58b              rcall   DOLIT
01f19f 0008              .dw     BS_
01f1a0 d127              rcall   EQUAL
01f1a1 d198              rcall   ZEROSENSE
01f1a2 f039              breq    ACC3
01f1a3 d060              rcall   DROP
01f1a4 d0ea              rcall   ONEMINUS
01f1a5 d07e              rcall   TOR
01f1a6 d06e              rcall   OVER
01f1a7 d087              rcall   RFROM
01f1a8 dfc6              rcall   UMAX
01f1a9 cfdb              rjmp    ACC1
                 ACC3:
01f1aa d06a              rcall   OVER
01f1ab d1f5              rcall   CSTORE_A
01f1ac d0dd              rcall   ONEPLUS
01f1ad d067              rcall   OVER
01f1ae dfb9              rcall   UMIN
01f1af df95              rcall   TWODUP
01f1b0 d110              rcall   NOTEQUAL
01f1b1 d188              rcall   ZEROSENSE
01f1b2 f691              brne     ACC1
                 ACC6:
01f1b3 d1c7              rcall   NIP
01f1b4 d056              rcall   SWOP
01f1b5 940d f259         jmp     MINUS
                 
01f1b7 6683
01f1b8 7263              .db     NFA|3,"fcr"
                 FCR:
01f1b9 d2a8              rcall   DOUSER
01f1ba fff5              .dw     uflg
                 
                 
                 ; TYPE    c-addr u --   type line to terminal u < $100
                 ; : type for c@+ emit next drop ;
                 
01f1bb e2fc              fdw      ACCEPT_L
                 TYPE_L:
01f1bc 7484
01f1bd 7079
01f1be 0065              .db     NFA|4,"type",0
                 TYPE:
01f1bf d064              rcall   TOR
01f1c0 c002              rjmp    TYPE2       ; XFOR
                 TYPE1:  
01f1c1 d30e              rcall   CFETCHPP
01f1c2 de2d              rcall   EMIT
                 TYPE2:
01f1c3 940f f9d8         call    XNEXT
01f1c5 f7d8              brcc    TYPE1
01f1c6 911f              pop     t1
01f1c7 910f              pop     t0
01f1c8 940d f204         jmp     DROP
                 
                 
                 ; (S"    -- c-addr u      run-time code for S"
01f1ca 2883
01f1cb 2273              .db      NFA|3,"(s",0x22
                 XSQUOTE:
01f1cc 91ff              m_pop_zh
01f1cd d06c              rcall   RFETCH
01f1ce 0f88              lsl     tosl
01f1cf 1f99              rol     tosh
                         add_pflash_tos
01f1d0 d2ff              rcall   CFETCHPP
01f1d1 d562              rcall   DUP
01f1d2 d0b7              rcall   ONEPLUS
01f1d3 df10              rcall   ALIGNED
01f1d4 9596              lsr     tosh
01f1d5 9587              ror     tosl
01f1d6 d058              rcall   RFROM
01f1d7 d074              rcall   PLUS
01f1d8 01fc              movw    zl, tosl
01f1d9 9189
01f1da 9199              poptos
01f1db 9419              mijmp
                 
01f1dc e378              fdw     TYPE_L
                 SQUOTE_L:
01f1dd 73d2
01f1de 0022              .db      NFA|IMMED|COMPILE|2,"s",0x22,0
                 SQUOTE:
01f1df de80              rcall   DOCOMMAXT
01f1e0 e398              fdw     XSQUOTE
01f1e1 deb4              rcall   ROM_
01f1e2 d005              rcall   CQUOTE
01f1e3 940d f0a4         jmp     FRAM
                 
01f1e5 e3ba              fdw     SQUOTE_L
                 CQUOTE_L:
01f1e6 2c82
01f1e7 0022              .db     NFA|2,",",0x22,0
                 CQUOTE: 
01f1e8 d541              rcall   DOLIT
01f1e9 0022              .dw     0x22
01f1ea d2a3              rcall   PARSE
01f1eb decf              rcall   HERE
01f1ec d028              rcall   OVER
01f1ed d09c              rcall   ONEPLUS
01f1ee def5              rcall   ALIGNED
01f1ef d00d              rcall   ALLOT
01f1f0 940d f4c7         jmp     PLACE
                 
                 
01f1f2 e3cc              fdw     CQUOTE_L
                 DOTQUOTE_L:
01f1f3 2ed2
01f1f4 0022              .db      NFA|IMMED|COMPILE|2,".",0x22,0
                 DOTQUOTE:
01f1f5 dfe9              rcall   SQUOTE
01f1f6 de69              rcall   DOCOMMAXT
01f1f7 e37e              fdw     TYPE
01f1f8 9508              ret
                 
01f1f9 e3e6              fdw     DOTQUOTE_L
                 ALLOT_L:
01f1fa 6185
01f1fb 6c6c
01f1fc 746f              .db     NFA|5,"allot"
                 ALLOT:
01f1fd dead              rcall   DP
01f1fe 940d f2ab         jmp     PLUSSTORE
                 
01f200 e3f4              fdw     ALLOT_L
                 DROP_L:
01f201 64a4
01f202 6f72
01f203 0070              .db     NFA|INLINE|4,"drop",0
                 DROP:
01f204 9189
01f205 9199              poptos
01f206 9508              ret
                 
01f207 e402              fdw     DROP_L
                 SWOP_L:
01f208 7384
01f209 6177
01f20a 0070              .db     NFA|INLINE5|4,"swap",0
                 SWOP:
01f20b 9109              ld      t0, y+
01f20c 9119              ld      t1, y+
01f20d 939a
01f20e 938a              pushtos
01f20f 01c8              movw    tosl, t0
01f210 9508              ret
                 
01f211 e410              fdw     SWOP_L
                 OVER_L:
01f212 6f84
01f213 6576
01f214 0072              .db     NFA|INLINE4|4,"over",0
                 OVER:
01f215 939a
01f216 938a              pushtos
01f217 818a              ldd     tosl, y+2
01f218 819b              ldd     tosh, y+3
01f219 9508              ret
                 
01f21a e424              fdw     OVER_L
                 ROT_L:
01f21b 7283
01f21c 746f              .db     NFA|3, "rot"
                 ROT:
01f21d d006              rcall   TOR
01f21e dfec              rcall   SWOP
01f21f d00f              rcall   RFROM
01f220 cfea              rjmp    SWOP
                 
01f221 e436              fdw     ROT_L
                 TOR_L:
01f222 3e92
01f223 0072              .db     NFA|COMPILE|2,">r",0
                 TOR:
01f224 91ff              m_pop_zh
01f225 91ff              pop     zh
01f226 91ef              pop     zl
01f227 938f              push    tosl
01f228 939f              push    tosh
01f229 9189
01f22a 9199              poptos
01f22b 9419              mijmp
                 
01f22c e444              fdw     TOR_L
                 RFROM_L:
01f22d 7292
01f22e 003e              .db     NFA|COMPILE|2,"r>",0
                 RFROM:
01f22f 91ff              m_pop_zh
01f230 91ff              pop     zh
01f231 91ef              pop     zl
01f232 939a
01f233 938a              pushtos
01f234 919f              pop     tosh
01f235 918f              pop     tosl
01f236 9419              mijmp
                 
01f237 e45a              fdw     RFROM_L
                 RFETCH_L:
01f238 7292
01f239 0040              .db     NFA|COMPILE|2,"r@",0
                 RFETCH:
01f23a 91ff              m_pop_zh
01f23b 91ff              pop     zh
01f23c 91ef              pop     zl
01f23d 939a
01f23e 938a              pushtos
01f23f 919f              pop     tosh
01f240 918f              pop     tosl
01f241 938f              push    tosl
01f242 939f              push    tosh
01f243 9419              mijmp
                 
                 
                 ;   ABS     n   --- n1      absolute value of n
01f244 ee64              fdw     DUP_L
                 ABS_L:
01f245 6183
01f246 7362              .db     NFA|3,"abs"
                 ABS_:
01f247 d4ec              rcall   DUP
01f248 940d f38a         jmp     QNEGATE
                 
01f24a e48a              fdw     ABS_L
                 PLUS_L:
01f24b 2b81              .db     NFA|INLINE4|1, "+"
                 
                 PLUS:
01f24c 9109              ld      t0, Y+        
01f24d 9119              ld      t1, Y+
01f24e 0f80              add     tosl, t0
01f24f 1f91              adc     tosh, t1
01f250 9508              ret
                 
                 ; m+  ( d n -- d1 )
01f251 e496              fdw     PLUS_L
                 MPLUS_L:
01f252 6d82
01f253 002b              .db     NFA|2, "m+",0
                 MPLUS:
01f254 d7a9              rcall   STOD
01f255 940d fa20         jmp     DPLUS
                 
01f257 e4a4              fdw     MPLUS_L
                 MINUS_L:
01f258 2d81              .db     NFA|INLINE5|1, "-"
                 MINUS:
01f259 9109              ld      t0, Y+
01f25a 9119              ld      t1, Y+
01f25b 1b08              sub     t0, tosl
01f25c 0b19              sbc     t1, tosh
01f25d 01c8              movw    tosl, t0
01f25e 9508              ret
                 
01f25f e4b0              fdw     MINUS_L
                 AND_L:
01f260 6183
01f261 646e              .db     NFA|INLINE4|3, "and"
                 AND_:
01f262 9109              ld      t0, Y+
01f263 9119              ld      t1, Y+
01f264 2380              and     tosl, t0
01f265 2391              and     tosh, t1
01f266 9508              ret
                 
01f267 e4c0              fdw     AND_L
                 OR_L:
01f268 6f82
01f269 0072              .db     NFA|INLINE4|2, "or",0
                 OR_:
01f26a 9109              ld      t0, Y+
01f26b 9119              ld      t1, Y+
01f26c 2b80              or      tosl, t0
01f26d 2b91              or      tosh, t1
01f26e 9508              ret
                 
01f26f e4d0              fdw     OR_L
                 XOR_L:
01f270 7883
01f271 726f              .db     NFA|INLINE4|3, "xor"
                 XOR_:
01f272 9109              ld      t0, Y+
01f273 9119              ld      t1, Y+
01f274 2780              eor     tosl, t0
01f275 2791              eor     tosh, t1
01f276 9508              ret
                 
01f277 e4e0              fdw     XOR_L
                 INVERT_L:
01f278 69a6
01f279 766e
01f27a 7265
01f27b 0074              .db     NFA|INLINE|6, "invert",0
                 INVERT:
01f27c 9580              com     tosl
01f27d 9590              com     tosh
01f27e 9508              ret
                 
01f27f e4f0              fdw     INVERT_L
                 NEGATE_L:
01f280 6e86
01f281 6765
01f282 7461
01f283 0065              .db     NFA|6, "negate",0
                 NEGATE:
01f284 dff7              rcall   INVERT
01f285 940d f28a         jmp     ONEPLUS
                 
01f287 e500              fdw     NEGATE_L
                 ONEPLUS_L:
01f288 31a2
01f289 002b              .db     NFA|INLINE|2, "1+",0
                 ONEPLUS:
01f28a 9601              adiw    tosl, 1
01f28b 9508              ret
                 
01f28c e510              fdw     ONEPLUS_L
                 ONEMINUS_L:
01f28d 31a2
01f28e 002d              .db     NFA|INLINE|2, "1-",0
                 ONEMINUS:
01f28f 9701              sbiw    tosl, 1
01f290 9508              ret
                 
01f291 e51a              fdw     ONEMINUS_L
                 TWOPLUS_L:
01f292 32a2
01f293 002b              .db     NFA|INLINE|2, "2+",0
                 TWOPLUS:
01f294 9602              adiw    tosl, 2
01f295 9508              ret
                 
01f296 e524              fdw     TWOPLUS_L
                 TOBODY_L:
01f297 3ea5
01f298 6f62
01f299 7964              .db     NFA|INLINE|5, ">body"
                 TOBODY:
01f29a 9604              adiw    tosl, 4
01f29b 9508              ret
                 
01f29c e52e              fdw     TOBODY_L
                 TWOSTAR_L:
01f29d 32a2
01f29e 002a              .db     NFA|INLINE|2, "2*",0
                 TWOSTAR:
01f29f 0f88              lsl     tosl
01f2a0 1f99              rol     tosh
01f2a1 9508              ret
                 
01f2a2 e53a              fdw     TWOSTAR_L
                 TWOSLASH_L:
01f2a3 32a2
01f2a4 002f              .db     NFA|INLINE|2, "2/",0
                 TWOSLASH:
01f2a5 9595              asr     tosh
01f2a6 9587              ror     tosl
01f2a7 9508              ret
                 
01f2a8 e546              fdw     TWOSLASH_L
                 PLUSSTORE_L:
01f2a9 2b82
01f2aa 0021              .db     NFA|2,"+!",0
                 PLUSSTORE:
01f2ab df5f              rcall   SWOP
01f2ac df68              rcall   OVER
01f2ad d3bc              rcall   FETCH_A
01f2ae df9d              rcall   PLUS
01f2af df5b              rcall   SWOP
01f2b0 940d fe7e         jmp     STORE
                 
01f2b2 e552              fdw     PLUSSTORE_L
                 WITHIN_L:
01f2b3 7786
01f2b4 7469
01f2b5 6968
01f2b6 006e              .db     NFA|6,"within",0
                 WITHIN:
01f2b7 df5d              rcall   OVER
01f2b8 dfa0              rcall   MINUS
01f2b9 df6a              rcall   TOR
01f2ba df9e              rcall   MINUS
01f2bb df73              rcall   RFROM
01f2bc 940d f2d8         jmp     ULESS
                 
01f2be e566              fdw     WITHIN_L
                 NOTEQUAL_L:
01f2bf 3c82
01f2c0 003e              .db     NFA|2,"<>",0
                 NOTEQUAL:
01f2c1 df97              rcall   MINUS           ; MINUS leaves a valid zero flag
01f2c2 f409              brne    NOTEQUAL1
01f2c3 c480              rjmp    FALSE_F
                 NOTEQUAL1:
01f2c4 940d f73c         jmp     TRUE_F
                 
01f2c6 ee80              fdw     ZEROLESS_L
                 EQUAL_L:
01f2c7 3d81              .db     NFA|1, "="
                 EQUAL:
01f2c8 df90              rcall   MINUS
01f2c9 940d f73a         jmp     ZEROEQUAL
                 
                 
01f2cb e58e              fdw     EQUAL_L
                 LESS_L:
01f2cc 3c81              .db     NFA|1,"<"
                 LESS:
01f2cd df8b              rcall   MINUS
01f2ce 940d f742         jmp     ZEROLESS
                 
01f2d0 e598              fdw     LESS_L
                 GREATER_L:
01f2d1 3e81              .db     NFA|1,">"
                 GREATER:
01f2d2 df38              rcall   SWOP
01f2d3 940d f2cd         jmp     LESS
                 
01f2d5 e5a2              fdw     GREATER_L
                 ULESS_L:
01f2d6 7582
01f2d7 003c              .db     NFA|2,"u<",0
                 ULESS:
01f2d8 df80              rcall   MINUS
01f2d9 f408              brcc    ULESS1        ; Carry test  
01f2da c461              rjmp    TRUE_F
                 ULESS1:
01f2db 940d f744         jmp     FALSE_F
                 
                 
01f2dd e5ac              fdw     ULESS_L
                 UGREATER_L:
01f2de 7582
01f2df 003e              .db     NFA|2, "u>",0
                 UGREATER:
01f2e0 df2a              rcall   SWOP
01f2e1 940d f2d8         jmp     ULESS
                 
01f2e3 e5bc              fdw     UGREATER_L
                 STORE_P_L:
01f2e4 2182
01f2e5 0070              .db     NFA|2,"!p",0
                 STORE_P:
01f2e6 01ac              movw    pl, tosl
01f2e7 9189
01f2e8 9199              poptos
01f2e9 9508              ret
                 
01f2ea e5c8              fdw     STORE_P_L
                 STORE_P_TO_R_L:
01f2eb 2194
01f2ec 3e70
01f2ed 0072              .db     NFA|COMPILE|4,"!p>r",0
                 STORE_P_TO_R:
01f2ee 91ff              m_pop_zh
01f2ef 91ff              pop     zh
01f2f0 91ef              pop     zl
01f2f1 934f              push    pl
01f2f2 935f              push    ph
01f2f3 01ac              movw    pl, tosl
01f2f4 9189
01f2f5 9199              poptos
01f2f6 9419              mijmp
                 
01f2f7 e5d6              fdw     STORE_P_TO_R_L
                 R_TO_P_L:
01f2f8 7293
01f2f9 703e              .db     NFA|COMPILE|3,"r>p"
                 R_TO_P:
01f2fa 91ff              m_pop_zh
01f2fb 91ff              pop     zh
01f2fc 91ef              pop     zl
01f2fd 915f              pop     ph
01f2fe 914f              pop     pl
01f2ff 9419              mijmp
                 
01f300 e5f0              fdw     R_TO_P_L
                 PFETCH_L:
01f301 7082
01f302 0040              .db     NFA|2,"p@",0
                 PFETCH:
01f303 939a
01f304 938a              pushtos
01f305 01ca              movw    tosl, pl
01f306 940d fec7         jmp     FETCH
                 
01f308 e602              fdw     PFETCH_L
                 PSTORE_L:
01f309 7082
01f30a 0021              .db     NFA|2,"p!",0
                 PSTORE:
01f30b 939a
01f30c 938a              pushtos
01f30d 01ca              movw    tosl, pl
01f30e 940d fe7e         jmp     STORE
                 
01f310 e612              fdw     PSTORE_L
                 PCSTORE_L:
01f311 7083
01f312 2163              .db     NFA|3,"pc!"
                 PCSTORE:
01f313 939a
01f314 938a              pushtos
01f315 01ca              movw    tosl, pl
01f316 940d ff15         jmp     CSTORE
                 
01f318 e622              fdw     PCSTORE_L
                 PPLUS_L:
01f319 70a2
01f31a 002b              .db     NFA|INLINE|2,"p+",0
                 PPLUS:
01f31b 0d46              add     pl, r_one
01f31c 1d55              adc     ph, zero
01f31d 9508              ret   
                 
01f31e e632              fdw     PPLUS_L
                 PNPLUS_L:
01f31f 7083
01f320 2b2b              .db     NFA|3,"p++"
                 PNPLUS:
01f321 0f48              add     pl, tosl
01f322 1f59              adc     ph, tosh
01f323 9189
01f324 9199              poptos
01f325 9508              ret
                 
01f326 e63e              fdw     PNPLUS_L
                 UEMIT_L:
01f327 2785
01f328 6d65
01f329 7469              .db     NFA|5,"'emit"
                 UEMIT_:
01f32a d137              rcall   DOUSER
01f32b ffe8              .dw     uemit
                         
01f32c e64e              fdw     UEMIT_L
                 UKEY_L:
01f32d 2784
01f32e 656b
01f32f 0079              .db     NFA|4,"'key",0
                 UKEY_:
01f330 d131              rcall   DOUSER
01f331 ffea              .dw     ukey
                 
01f332 e65a              fdw     UKEY_L
                 UKEYQ_L:
01f333 2785
01f334 656b
01f335 3f79              .db     NFA|5,"'key?"
                 UKEYQ_:
01f336 d12b              rcall   DOUSER
01f337 ffec              .dw     ukeyq
                 
01f338 3f83
01f339 3d30              .db     NFA|3,"?0="
                 ZEROSENSE:
01f33a 9700              sbiw    tosl, 0
01f33b 9189
01f33c 9199              poptos
01f33d 9508              ret
                 
01f33e 6483
01f33f 3d30              .db     NFA|3,"d0="
                 DUPZEROSENSE:
01f340 9700              sbiw    tosl, 0
01f341 9508              ret
                 
01f342 e666              fdw     UKEYQ_L
                 UMSTAR_L:
01f343 7583
01f344 2a6d              .db     NFA|3,"um*"
                 UMSTAR:
01f345 940d ffdc         jmp     umstar0
                 
01f347 e686              fdw     UMSTAR_L
                 UMSLASHMOD_L:
01f348 7586
01f349 2f6d
01f34a 6f6d
01f34b 0064              .db     NFA|6,"um/mod",0
                 UMSLASHMOD:
01f34c 940d ef00         jmp     umslashmod0
                 
                 
01f34e e690              fdw     UMSLASHMOD_L
                 USLASHMOD_L:
01f34f 7585
01f350 6d2f
01f351 646f              .db     NFA|5,"u/mod"
                 USLASHMOD:
01f352 d379              rcall   FALSE_
01f353 deb7              rcall   SWOP
01f354 940d ef00         jmp     umslashmod0
                 
01f356 e69e              fdw     USLASHMOD_L
                 STAR_L:
01f357 2a81              .db     NFA|1,"*"
                 STAR: 
01f358 dfec              rcall   UMSTAR
01f359 940d f204         jmp     DROP
                 
01f35b e6ae              fdw     STAR_L
                 USLASH_L:
01f35c 7582
01f35d 002f              .db     NFA|2,"u/",0
                 USLASH:
01f35e dff3              rcall   USLASHMOD
01f35f 940d f37b         jmp     NIP
                 
01f361 e6b8              fdw     USLASH_L
                 USSMOD_L:
01f362 7586
01f363 2f2a
01f364 6f6d
01f365 0064              .db     NFA|6,"u*/mod",0
                 USSMOD:
01f366 debd              rcall   TOR
01f367 dfdd              rcall   UMSTAR
01f368 dec6              rcall   RFROM
01f369 940d f34c         jmp     UMSLASHMOD
                 
                 
01f36b e6c4              fdw     USSMOD_L
                 SLASH_L:
01f36c 2f81              .db     NFA|1,"/"
                 SLASH: 
01f36d ddd7              rcall   TWODUP
01f36e df03              rcall   XOR_
01f36f deb4              rcall   TOR
01f370 ded6              rcall   ABS_
01f371 de99              rcall   SWOP
01f372 ded4              rcall   ABS_
01f373 de97              rcall   SWOP
01f374 dfe9              rcall   USLASH
01f375 deb9              rcall   RFROM
01f376 940d f38a         jmp     QNEGATE
                 
01f378 e6d8              fdw     SLASH_L
                 NIP_L:
01f379 6ea3
01f37a 7069              .db     NFA|INLINE|3,"nip"
                 NIP:
01f37b 9109              ld      t0, y+
01f37c 9109              ld      t0, y+
01f37d 9508              ret
                     
01f37e e6f2              fdw     NIP_L
                 TUCK_L:
01f37f 7484
01f380 6375
01f381 006b              .db     NFA|4,"tuck",0
                 TUCK:
01f382 de88              rcall   SWOP
01f383 940d f215         jmp     OVER
                 
01f385 e6fe              fdw     TUCK_L
                 QNEGATE_L:
01f386 3f87
01f387 656e
01f388 6167
01f389 6574              .db     NFA|7,"?negate"
                 QNEGATE:
01f38a d3b7              rcall   ZEROLESS
01f38b dfae              rcall   ZEROSENSE
01f38c f009              breq    QNEGATE1
01f38d def6              rcall   NEGATE
                 QNEGATE1:
01f38e 9508              ret
                 
01f38f e70c              fdw     QNEGATE_L
                 MAX_L:
01f390 6d83
01f391 7861              .db     NFA|3,"max"
01f392 ddb2      MAX:    rcall   TWODUP
01f393 df39              rcall   LESS
01f394 cddc              rjmp    MINMAX
                 
01f395 e720              fdw     MAX_L
                 MIN_L:
01f396 6d83
01f397 6e69              .db     NFA|3,"min"
01f398 ddac      MIN:    rcall   TWODUP
01f399 df38              rcall   GREATER
01f39a cdd6              rjmp    MINMAX
                 
01f39b 6382
01f39c 0040              .db     NFA|2,"c@",0
                 CFETCH_A:       
01f39d 940d fef2         jmp     CFETCH
                 
01f39f 6382
01f3a0 0021              .db     NFA|2,"c!",0
                 CSTORE_A:       
01f3a1 940d ff15         jmp     CSTORE
                 
01f3a3 e72c              fdw     MIN_L
                 UPTR_L:
01f3a4 7582
01f3a5 0070              .db     NFA|2,"up",0
01f3a6 dc9d      UPTR:   rcall   DOCREATE
01f3a7 0002              .dw     2 ; upl
                 
01f3a8 e748              fdw     UPTR_L
                 HOLD_L:
01f3a9 6884
01f3aa 6c6f
01f3ab 0064              .db     NFA|4,"hold",0
01f3ac d328      HOLD:   rcall   TRUE_
01f3ad d09a              rcall   HP
01f3ae defc              rcall   PLUSSTORE
01f3af d098              rcall   HP
01f3b0 d2b9              rcall   FETCH_A
01f3b1 940d ff15         jmp     CSTORE
                 
                 ; <#    --              begin numeric conversion
                 ;   PAD HP ! ;          (initialize Hold Pointer)
01f3b3 e752              fdw     HOLD_L
                 LESSNUM_L:
01f3b4 3c82
01f3b5 0023              .db     NFA|2,"<#",0
                 LESSNUM: 
01f3b6 d096              rcall   PAD
01f3b7 d090              rcall   HP
01f3b8 940d fe7e         jmp     STORE
                 
                 ; >digit   n -- c            convert to 0..9a..z
01f3ba e768              fdw     LESSNUM_L
                 TODIGIT_L:
01f3bb 3e86
01f3bc 6964
01f3bd 6967
01f3be 0074              .db     NFA|6,">digit",0
                 TODIGIT: 
01f3bf d374              rcall   DUP
01f3c0 d369              rcall   DOLIT
01f3c1 0009              .dw     9
01f3c2 df0f              rcall   GREATER
01f3c3 d366              rcall   DOLIT
01f3c4 0027              .dw     0x27
01f3c5 de9c              rcall   AND_
01f3c6 de85              rcall   PLUS
01f3c7 d362              rcall   DOLIT
01f3c8 0030              .dw     0x30
01f3c9 940d f24c         jmp     PLUS
                 
                 ; #     ud1 -- ud2     convert 1 digit of output
                 ;   base @ ud/mod rot >digit hold ;
01f3cb e776              fdw     TODIGIT_L
                 NUM_L:
01f3cc 2381              .db     NFA|1,"#"
                 NUM:
01f3cd d087              rcall   BASE
01f3ce d29b              rcall   FETCH_A
01f3cf d199              rcall   UDSLASHMOD
01f3d0 de4c              rcall   ROT
01f3d1 dfed              rcall   TODIGIT
01f3d2 940d f3ac         jmp     HOLD
                 
                 ; #S    ud1 -- ud2      convert remaining digits
                 ;   begin # 2dup or 0= until ;
01f3d4 e798              fdw     NUM_L
                 NUMS_L:
01f3d5 2382
01f3d6 0073              .db     NFA|2,"#s",0
                 NUMS:
01f3d7 dff5              rcall   NUM
01f3d8 dd6c              rcall   TWODUP
01f3d9 de90              rcall   OR_
01f3da df5f              rcall   ZEROSENSE
01f3db f7d9              brne    NUMS
01f3dc 9508              ret
                 
                 ; #>    ud1 -- c-addr u    end conv., get string
                 ;   2drop hp @ pad over - ;
01f3dd e7aa              fdw     NUMS_L
                 NUMGREATER_L:
01f3de 2382
01f3df 003e              .db     NFA|2,"#>", 0
                 NUMGREATER:
01f3e0 dd5d              rcall   TWODROP
01f3e1 d066              rcall   HP
01f3e2 d287              rcall   FETCH_A
01f3e3 d069              rcall   PAD
01f3e4 de30              rcall   OVER
01f3e5 940d f259         jmp     MINUS
                 
                 ; SIGN  n --               add minus sign if n<0
                 ;   0< IF 2D HOLD THEN ; 
01f3e7 e7bc              fdw     NUMGREATER_L
                 SIGN_L:
01f3e8 7384
01f3e9 6769
01f3ea 006e              .db     NFA|4,"sign",0
                 SIGN:   
01f3eb d356              rcall   ZEROLESS
01f3ec df4d              rcall   ZEROSENSE
01f3ed f019              breq    SIGN1
01f3ee d33b              rcall   DOLIT
01f3ef 002d              .dw     0x2D
01f3f0 dfbb              rcall   HOLD
                 SIGN1:
01f3f1 9508              ret
                 
                 ; U.    u --                  display u unsigned
                 ;   <# 0 #S #> TYPE SPACE ;
01f3f2 e7d0              fdw     SIGN_L
                 UDOT_L:
01f3f3 7582
01f3f4 002e              .db     NFA|2,"u.",0
                 UDOT:
01f3f5 dfc0              rcall   LESSNUM
01f3f6 d2d5              rcall   FALSE_
01f3f7 dfdf              rcall   NUMS
01f3f8 dfe7              rcall   NUMGREATER
01f3f9 ddc5              rcall   TYPE
01f3fa 940d f155         jmp     SPACE_
                 
                 
                 ; U.R    u +n --      display u unsigned in field of n. 1<n<=255 
                 ;    0 swap <# 1- for # next #s #> type space ;
01f3fc e7e6              fdw     UDOT_L
                 UDOTR_L:
01f3fd 7583
01f3fe 722e              .db     NFA|3,"u.r"
                 UDOTR:
01f3ff dfb6              rcall   LESSNUM
01f400 de8e              rcall   ONEMINUS
01f401 de22              rcall   TOR
01f402 d2c9              rcall   FALSE_
01f403 c001              rjmp    UDOTR2
                 UDOTR1:
01f404 dfc8              rcall   NUM
                 UDOTR2: 
01f405 d5d2              rcall   XNEXT
01f406 f7e8              brcc    UDOTR1
01f407 911f              pop     t1
01f408 910f              pop     t0
01f409 dfcd              rcall   NUMS
01f40a dfd5              rcall   NUMGREATER
01f40b ddb3              rcall   TYPE
01f40c 940d f155         jmp     SPACE_
                 
                 ; .     n --                    display n signed
                 ;   <# DUP ABS #S SWAP SIGN #> TYPE SPACE ;
01f40e e7fa              fdw     UDOTR_L
                 DOT_L:
01f40f 2e81              .db     NFA|1,"."
01f410 dfa5      DOT:    rcall   LESSNUM
01f411 d322              rcall   DUP
01f412 de34              rcall   ABS_
01f413 d2b8              rcall   FALSE_
01f414 dfc2              rcall   NUMS
01f415 de07              rcall   ROT
01f416 dfd4              rcall   SIGN
01f417 dfc8              rcall   NUMGREATER
01f418 dda6              rcall   TYPE
01f419 940d f155         jmp     SPACE_
                 
01f41b e81e              FDW     DOT_L
                 DECIMAL_L:
01f41c 6487
01f41d 6365
01f41e 6d69
01f41f 6c61              .db     NFA|7,"decimal"
                 DECIMAL: 
01f420 d283              rcall   TEN
01f421 d033              rcall   BASE
01f422 940d fe7e         jmp     STORE
                 
                 ; HEX     --              set number base to hex
                 ;   #16 BASE ! ;
01f424 e838              Fdw     DECIMAL_l
                 HEX_L:
01f425 6883
01f426 7865              .db     NFA|3,"hex"
                 HEX:
01f427 d302              rcall   DOLIT
01f428 0010              .dw     16
01f429 d02b              rcall   BASE
01f42a 940d fe7e         jmp     STORE
                 
                 ; BIN     --              set number base to binary
                 ;   #2 BASE ! ;
01f42c e84a              Fdw     HEX_L
                 BIN_L:
01f42d 6283
01f42e 6e69              .db     NFA|3,"bin"
01f42f dca1      BIN:    rcall   CELL
01f430 d024              rcall   BASE
01f431 940d fe7e         jmp     STORE
                 
                 ; RSAVE   -- a-addr     Saved return stack pointer
01f433 e85a              fdw     BIN_L
                 RSAVE_L:
01f434 7285
01f435 6173
01f436 6576              .db     NFA|5,"rsave"
01f437 d02a      RSAVE_: rcall   DOUSER
01f438 fffe              .dw     ursave
                 
                 
                 ; ULINK   -- a-addr     link to next task
01f439 e868              fdw     RSAVE_L
                 ULINK_L:
01f43a 7585
01f43b 696c
01f43c 6b6e              .db     NFA|5,"ulink"
01f43d d024      ULINK_: rcall   DOUSER
01f43e fffc              .dw     ulink
                 
                 
                 ; TASK       -- a-addr              TASK pointer
01f43f e874              fdw     ULINK_L
                 TASK_L:
01f440 7484
01f441 7361
01f442 006b              .db     NFA|4,"task",0
01f443 d01e      TASK:   rcall   DOUSER
01f444 fff2              .dw     utask
                 
                 
                 ; HP       -- a-addr                HOLD pointer
01f445 e880              fdw     TASK_L
                 HP_L:
01f446 6882
01f447 0070              .db     NFA|2,"hp",0
01f448 d019      HP:     rcall   DOUSER
01f449 0000              .dw     uhp
                 
                 ; PAD     -- a-addr        User Pad buffer
01f44a e88c              fdw     HP_L
                 PAD_L:
01f44b 7083
01f44c 6461              .db     NFA|3,"pad"
                 PAD:
01f44d d1a0              rcall   TIB
01f44e d197              rcall   TIBSIZE
01f44f 940d f24c         jmp     PLUS
                 
                 ; BASE    -- a-addr       holds conversion radix
01f451 e896              fdw     PAD_L
                 BASE_L:
01f452 6284
01f453 7361
01f454 0065              .db     NFA|4,"base",0
                 BASE:
01f455 d00c              rcall   DOUSER
01f456 ffee              .dw     ubase
                 
                 ; USER   n --
01f457 e8a4              fdw     BASE_L
                 USER_L:
01f458 7584
01f459 6573
01f45a 0072              .db     NFA|4,"user",0
                 USER:
01f45b d323              rcall   CREATE
01f45c dc74              rcall   CELL
01f45d de26              rcall   NEGATE
01f45e d4a9              rcall   IALLOT
01f45f 940f ffa5         call    ICOMMA
01f461 d36d              rcall   XDOES
                 DOUSER:
01f462 939a
01f463 938a              pushtos
01f464 91ff              m_pop_zh
01f465 91ff              pop     zh
01f466 91ef              pop     zl
01f467 0fee              lsl     zl
01f468 1fff              rol     zh
01f469 9187              lpm_    tosl, z+
01f46a 9197              lpm_    tosh, z+
01f46b 0d82              add     tosl, upl
01f46c 1d93              adc     tosh, uph
01f46d 9508              ret
                 
                 ; SOURCE   -- adr n         current input buffer
                 ;   'SOURCE 2@ ;        length is at higher adrs
01f46e e8b0              fdw     USER_L
                 SOURCE_L:
01f46f 7386
01f470 756f
01f471 6372
01f472 0065              .db     NFA|6,"source",0
                 SOURCE:
01f473 d18c              rcall   TICKSOURCE
01f474 940d f12b         jmp     TWOFETCH
                 
                 
                 ; /STRING  a u n -- a+n u-n          trim string
                 ;   swap over - >r + r>
01f476 e8de              fdw      SOURCE_L
                 SLASHSTRING_L:
01f477 2f87
01f478 7473
01f479 6972
01f47a 676e              .db     NFA|7,"/string"
                 SLASHSTRING:
01f47b dd8f              rcall   SWOP
01f47c dd98              rcall   OVER
01f47d dddb              rcall   MINUS
01f47e dda5              rcall   TOR
01f47f ddcc              rcall   PLUS
01f480 ddae              rcall   RFROM
01f481 9508              ret
                 
                 ; \     Skip the rest of the line
01f482 e8ee              fdw     SLASHSTRING_L
                 BSLASH_L:
01f483 5cc1              .db     NFA|IMMED|1,0x5c
                 BSLASH:
01f484 dfee              rcall   SOURCE
01f485 d173              rcall   TOIN
01f486 d057              rcall   STORE_A
01f487 6460              sbr     FLAGS1, (1<<noclear)  ; dont clear flags in case of \
01f488 940d f204         jmp     DROP
                 
                 ; PARSE  char -- c-addr u
01f48a e906              fdw     BSLASH_L
                 PARSE_L:
01f48b 7085
01f48c 7261
01f48d 6573              .db     NFA|5,"parse"
                 PARSE:
01f48e d2a5              rcall   DUP             ; c c
01f48f dfe3              rcall   SOURCE          ; c c a u
01f490 d168              rcall   TOIN            ; c c a u a
01f491 d1d8              rcall   FETCH_A         ; c c a u n
01f492 dfe8              rcall   SLASHSTRING     ; c c a u   new tib addr/len
01f493 d2a0              rcall   DUP             ; c c a u u
01f494 dd8f              rcall   TOR             ; c c a u                  R: u (new tib len
01f495 dd87              rcall   ROT             ; c a u c
01f496 db03              rcall   SKIP            ; c a u        
01f497 dd7d              rcall   OVER            ; c a u a
01f498 dd8b              rcall   TOR             ; c a u                    R: u a (start of word
01f499 dd83              rcall   ROT             ; a u c
01f49a db1a              rcall   SCAN            ; a u      end of word, tib left       
01f49b dea4              rcall   DUPZEROSENSE
01f49c f009              breq    PARSE1
01f49d ddf1              rcall   ONEMINUS
01f49e dd90      PARSE1: rcall   RFROM           ; a u a
01f49f dd8f              rcall   RFROM           ; a u a u
01f4a0 dd7c              rcall   ROT             ; a a u u
01f4a1 ddb7              rcall   MINUS           ; a a n  ( addition to toin
01f4a2 d156              rcall   TOIN
01f4a3 de07              rcall   PLUSSTORE       ; aend astart
01f4a4 dedd              rcall   TUCK            ; astart aend astart
01f4a5 940d f259         jmp     MINUS           ; astart wlen
                      
                 
                 ; WORD   char -- c-addr        word delimited by char and/or TAB
01f4a7 e916              fdw     PARSE_L
                 WORD_L:
01f4a8 7784
01f4a9 726f
01f4aa 0064              .db     NFA|4,"word",0
                 WORD:
01f4ab dfe2              rcall   PARSE           ; c-addr wlen
01f4ac dd5e              rcall   SWOP
01f4ad dde1              rcall   ONEMINUS
01f4ae ded3              rcall   TUCK
01f4af 940d ff15         jmp     CSTORE          ; Write the length into the TIB ! 
                 
                 ; CMOVE  src dst u --  copy u bytes from src to dst
                 ; cmove swap !p for c@+ pc! p+ next drop ;
01f4b1 e950              fdw     WORD_L
                 CMOVE_L:
01f4b2 6385
01f4b3 6f6d
01f4b4 6576              .db     NFA|5,"cmove"
                 CMOVE:
01f4b5 dd55              rcall   SWOP
01f4b6 de37              rcall   STORE_P_TO_R
01f4b7 dd6c              rcall   TOR
01f4b8 c003              rjmp    CMOVE2
                 CMOVE1:
01f4b9 d016              rcall   CFETCHPP
01f4ba de58              rcall   PCSTORE
01f4bb de5f              rcall   PPLUS
                 CMOVE2:
01f4bc d51b              rcall   XNEXT
01f4bd f7d8              brcc    CMOVE1
01f4be 911f              pop     t1
01f4bf 910f              pop     t0
01f4c0 de39              rcall   R_TO_P
01f4c1 940d f204         jmp     DROP
                 
                 
                 ; place  src n dst --     place as counted str
01f4c3 e964              fdw     CMOVE_L
                 PLACE_L:
01f4c4 7085
01f4c5 616c
01f4c6 6563              .db     NFA|5,"place"
                 PLACE: 
01f4c7 dc7d              rcall   TWODUP
01f4c8 ded8              rcall   CSTORE_A
01f4c9 dc30              rcall   CHARPLUS
01f4ca dd40              rcall   SWOP
01f4cb 940d f4b5         jmp     CMOVE
                 
                 ; :     c@+ ( addr -- addr+1 n ) dup 1+ swap c@ ;
01f4cd e988              fdw     PLACE_L
                 CFETCHPP_L:
01f4ce 6383
01f4cf 2b40              .db     NFA|3,"c@+"
                 CFETCHPP:
01f4d0 d263              rcall   DUP
01f4d1 ddb8              rcall   ONEPLUS
01f4d2 dd38              rcall   SWOP
01f4d3 940d fef2         jmp     CFETCH
                 
                 ; :     @+ ( addr -- addr+2 n ) dup 2+ swap @ ;
01f4d5 e99c              fdw     CFETCHPP_L
                 FETCHPP_L:
01f4d6 4082
01f4d7 002b              .db     NFA|2,"@+",0
                 FETCHPP:
01f4d8 d25b              rcall   DUP
01f4d9 ddba              rcall   TWOPLUS
01f4da dd30              rcall   SWOP
01f4db 940d fec7         jmp     FETCH
                 
01f4dd 2181              .db     NFA|1,"!"
                 STORE_A:        
01f4de 940d fe7e         jmp     STORE
                 
                 ; N>C   nfa -- cfa    name adr -> code field
01f4e0 e9ac              fdw    FETCHPP_L
                 NTOC_L:
01f4e1 6e83
01f4e2 633e              .db     NFA|3,"n>c"
                 NFATOCFA:
01f4e3 dfec              rcall   CFETCHPP
01f4e4 d245              rcall   DOLIT
01f4e5 000f              .dw     0x0f
01f4e6 dd7b              rcall   AND_
01f4e7 dd64              rcall   PLUS
01f4e8 940d f0e4         jmp     ALIGNED
                 
                 ; C>N   cfa -- nfa    code field addr -> name field addr
01f4ea e9c2              fdw    NTOC_L
                 CTON_L:
01f4eb 6383
01f4ec 6e3e              .db     NFA|3,"c>n"
                 CFATONFA:
01f4ed d353              rcall   TWOMINUS
01f4ee d245              rcall   DUP
01f4ef dead              rcall   CFETCH_A
01f4f0 d239              rcall   DOLIT
01f4f1 007f              .dw     0x007F
01f4f2 dddf              rcall   GREATER
01f4f3 de46              rcall   ZEROSENSE
01f4f4 f3c1              breq    CFATONFA
01f4f5 9508              ret
                 
                 ; findi   c-addr nfa -- c-addr 0   if not found
                 ;                          xt  1      if immediate
                 ;                          xt -1      if "normal"
01f4f6 e9d6              fdw     CTON_L
                 BRACFIND_L:
01f4f7 2883
01f4f8 2966              .db     NFA|3,"(f)"
                 findi:
                 findi1:
                 FIND_1: 
01f4f9 dc4b              rcall   TWODUP
                 ;        rcall   OVER
                 ;        rcall   CFETCH_A
01f4fa da7c              rcall   NEQUAL
01f4fb de44              rcall   DUPZEROSENSE
01f4fc f021              breq    findi2
01f4fd dd06              rcall   DROP
01f4fe d342              rcall   TWOMINUS ;;;      NFATOLFA
01f4ff d16a              rcall   FETCH_A
01f500 d233              rcall   DUP
                 findi2:
01f501 de38              rcall   ZEROSENSE
01f502 f7b1              brne    findi1
01f503 de3c              rcall   DUPZEROSENSE
01f504 f041              breq    findi3
01f505 de75              rcall   NIP
01f506 d22d              rcall   DUP
01f507 dfdb              rcall   NFATOCFA
01f508 dd02              rcall   SWOP
01f509 d009              rcall   IMMEDQ
01f50a d22f              rcall   ZEROEQUAL
01f50b dc6c              rcall   ONE
01f50c dd5d              rcall   OR_
                 findi3: 
01f50d 9508              ret
                 ;        jmp     PAUSE
                 
                 ; IMMED?    nfa -- f        fetch immediate flag
01f50e e9ee              fdw     BRACFIND_L
                 IMMEDQ_L:
01f50f 6986
01f510 6d6d
01f511 6465
01f512 003f              .db     NFA|6,"immed?",0
                 IMMEDQ: 
01f513 de89              rcall   CFETCH_A
01f514 2e98              mov     wflags, tosl  ; COMPILE and INLINE flags for the compiler
01f515 d214              rcall   DOLIT
01f516 0040              .dw     IMMED
01f517 940d f262         jmp     AND_
                 
                 ; FIND   c-addr -- c-addr 0   if not found
                 ;                  xt  1      if immediate
                 ;                  xt -1      if "normal"
01f519 ea1e              fdw     IMMEDQ_L
                 FIND_L:
01f51a 6684
01f51b 6e69
01f51c 0064              .db     NFA|4,"find",0
                 FIND:   
01f51d d20c              rcall   DOLIT
01f51e f578              fdw     kernellink
01f51f dfd9              rcall   findi
01f520 de1f              rcall   DUPZEROSENSE
01f521 f421              brne    FIND1
01f522 dce1              rcall   DROP
01f523 d335              rcall   LATEST_
01f524 d145              rcall   FETCH_A
01f525 dfd3              rcall   findi
                 FIND1:
01f526 9508              ret
                 
                 ; DIGIT?   c -- n -1   if c is a valid digit
01f527 ea34              fdw     FIND_L
                 DIGITQ_L:
01f528 6486
01f529 6769
01f52a 7469
01f52b 003f              .db     NFA|6,"digit?",0
                 DIGITQ:
                                                 ; 1 = 31    A = 41
01f52c d207              rcall   DUP             ; c c       c c
01f52d d1fc              rcall   DOLIT
01f52e 0039              .dw     0x39            ; c c 39    c c 39
01f52f dda2              rcall   GREATER         ; c 0       c ffff
01f530 de09              rcall   ZEROSENSE
01f531 f019              breq    DIGITQ1
01f532 d1f7              rcall   DOLIT
01f533 0027              .dw     0x27
01f534 dd24              rcall   MINUS
                 DIGITQ1:        
01f535 d1f4              rcall   DOLIT
01f536 0030              .dw     0x30            ; c 30
01f537 dd21              rcall   MINUS           ; 1
01f538 d1fb              rcall   DUP             ; 1 1
01f539 df1b              rcall   BASE            ; 1 1 base
01f53a d12f              rcall   FETCH_A         ; 1 1 10
01f53b dd91              rcall   LESS            ; 1 ffff
01f53c dcd8              rcall   OVER            ; 1 ffff 1
01f53d d204              rcall   ZEROLESS        ; 1 ffff 0
01f53e dd3d              rcall   INVERT
01f53f 940d f262         jmp     AND_
                 
                 ; SIGN?   adr n -- adr' n' f   get optional sign
                 ; + leaves $0000 flag
                 ; - leaves $0002 flag
01f541 ea50              fdw     DIGITQ_L
                 SIGNQ_L:
01f542 7385
01f543 6769
01f544 3f6e              .db     NFA|5,"sign?"
                 SIGNQ:
01f545 dccf              rcall   OVER
01f546 de56              rcall   CFETCH_A
01f547 d1e2              rcall   DOLIT
01f548 002c              .dw     ','
01f549 dd0f              rcall   MINUS
01f54a d1e9              rcall   DUP
01f54b dcfb              rcall   ABS_
01f54c dc2b              rcall   ONE
01f54d dd7a              rcall   EQUAL
01f54e dd13              rcall   AND_
01f54f ddf0              rcall   DUPZEROSENSE
01f550 f029              breq    QSIGN1
01f551 dd38              rcall   ONEPLUS
01f552 dcd1              rcall   TOR
01f553 dc24              rcall   ONE
01f554 df26              rcall   SLASHSTRING
01f555 dcd9              rcall   RFROM
01f556 9508      QSIGN1: ret
                 
                 ; UD*  ud u -- ud
01f557 ea84              fdw     SIGNQ_L
                 UDSTAR_L:
01f558 7583
01f559 2a64              .db     NFA|3,"ud*"
                 UDSTAR:
01f55a d1d9              rcall   DUP
01f55b dcc8              rcall   TOR
01f55c dde8              rcall   UMSTAR
01f55d dca6              rcall   DROP
01f55e dcac              rcall   SWOP
01f55f dccf              rcall   RFROM
01f560 dde4              rcall   UMSTAR
01f561 dcbb              rcall   ROT
01f562 940d f24c         jmp     PLUS
                         
                 ; UD/MOD  ud u --u(rem) ud(quot)
01f564 eab0              fdw     UDSTAR_L
                 UDSLASHMOD_L:
01f565 7586
01f566 2f64
01f567 6f6d
01f568 0064              .db     NFA|6,"ud/mod",0
                 UDSLASHMOD:
01f569 dcba              rcall   TOR             ; ud.l ud.h 
01f56a d161              rcall   FALSE_          ; ud.l ud.h 0
01f56b dcce              rcall   RFETCH          ; ud.l ud.h 0 u
01f56c dddf              rcall   UMSLASHMOD      ; ud.l r.h q.h
01f56d dcaf              rcall   ROT             ; r.h q.h ud.l
01f56e dcae              rcall   ROT             ; q.h ud.l r.h
01f56f dcbf              rcall   RFROM           ; q.h ud.l r.h u
01f570 dddb              rcall   UMSLASHMOD      ; q.h r.l q.l
01f571 940d f21d         jmp     ROT             ; r.l q.l q.h
                         
                 ; >NUMBER  0 0 adr u -- ud.l ud.h adr' u'
                 ;                       convert string to number
01f573 eaca              fdw     UDSLASHMOD_L
                 TONUMBER_L:
01f574 3e87
01f575 756e
01f576 626d
01f577 7265              .db     NFA|7,">number"
                 TONUMBER:
                 TONUM1:
01f578 ddc7              rcall   DUPZEROSENSE      ; ud.l ud.h adr u
01f579 f0b1              breq    TONUM3
01f57a dca9              rcall   TOR
01f57b d1b8              rcall   DUP
01f57c dca7              rcall   TOR             ; ud.l ud.h adr
01f57d de1f              rcall   CFETCH_A
01f57e dfad              rcall   DIGITQ          ; ud.l ud.h digit flag
01f57f ddba              rcall   ZEROSENSE
01f580 f421              brne    TONUM2
01f581 dc82              rcall   DROP
01f582 dcac              rcall   RFROM
01f583 dcab              rcall   RFROM
01f584 c00b              rjmp    TONUM3
                 TONUM2: 
01f585 dc9e              rcall   TOR             ; ud.l ud.h digit
01f586 dece              rcall   BASE
01f587 d0e2              rcall   FETCH_A
01f588 dfd1              rcall   UDSTAR
01f589 dca5              rcall   RFROM
01f58a dcc9              rcall   MPLUS
01f58b dca3              rcall   RFROM
01f58c dca2              rcall   RFROM
                         
01f58d dbea              rcall   ONE
01f58e deec              rcall   SLASHSTRING
01f58f cfe8              rjmp    TONUM1
                 TONUM3: 
01f590 9508              ret
                 
                 BASEQV:   
01f591 e840              fdw     DECIMAL
01f592 e84e              fdw     HEX
01f593 e85e              fdw     BIN
                 
                 
                 ; NUMBER?  c-addr -- n 1
                 ;                 -- dl dh 2
                 ;                 -- c-addr 0  if convert error
01f594 eae8              fdw     TONUMBER_L
                 NUMBERQ_L:
01f595 6e87
01f596 6d75
01f597 6562
01f598 3f72              .db     NFA|7,"number?"
                 NUMBERQ:
01f599 d19a              rcall   DUP             ; a a
01f59a d131              rcall   FALSE_          ; a a 0 0
01f59b d130              rcall   FALSE_          ; a a 0 0
01f59c dc80              rcall   ROT             ; a 0 0 a
01f59d df32              rcall   CFETCHPP        ; a 0 0 a' u
01f59e dfa6              rcall   SIGNQ           ; a 0 0 a' u f
01f59f dc84              rcall   TOR             ; a 0 0 a' u
                 
01f5a0 deb4              rcall   BASE
01f5a1 d0c8              rcall   FETCH_A
01f5a2 dc81              rcall   TOR             ; a 0 0 a' u
                         
01f5a3 dc71              rcall   OVER
01f5a4 ddf8              rcall   CFETCH_A
                         
01f5a5 d184              rcall   DOLIT
01f5a6 0023              .dw     '#'
01f5a7 dcb1              rcall   MINUS
01f5a8 d18b              rcall   DUP
01f5a9 d180              rcall   DOLIT
01f5aa 0003              .dw     3
01f5ab dd2c              rcall   ULESS
01f5ac dd8d              rcall   ZEROSENSE
01f5ad f041              breq    BASEQ1
01f5ae db44              rcall   CELLS
                         
01f5af d17a              rcall   DOLIT
01f5b0 eb22              fdw     BASEQV
01f5b1 dc9a              rcall   PLUS
01f5b2 da5c              rcall   FEXECUTE
                 
01f5b3 dbc4              rcall   ONE
01f5b4 dec6              rcall   SLASHSTRING
01f5b5 c001              rjmp    BASEQ2
                 BASEQ1:
01f5b6 dc4d              rcall   DROP
                 BASEQ2:                         ; a 0 0 a' u
01f5b7 dfc0              rcall   TONUMBER        ; a ud.l ud.h  a' u
01f5b8 dc76              rcall   RFROM           ; a ud.l ud.h  a' u oldbase
01f5b9 de9b              rcall   BASE            ; a ud.l ud.h  a' u oldbase addr
01f5ba df23              rcall   STORE_A         ; a ud.l ud.h  a' u
                 
01f5bb d178              rcall   DUP
01f5bc d284              rcall   TWOMINUS
01f5bd d184              rcall   ZEROLESS        ; a ud.l ud.h  a' u f
01f5be dd7b              rcall   ZEROSENSE       ; a ud.l ud.h  a' u
01f5bf f431              brne    QNUMD
                 QNUM_ERR:                       ; Not a number
01f5c0 dc6e              rcall   RFROM           ; a ud.l ud.h a' u sign
01f5c1 dc42              rcall   DROP
01f5c2 db7b              rcall   TWODROP
                 QNUM_ERR1:      
01f5c3 db7a              rcall   TWODROP
01f5c4 d107              rcall   FALSE_          ; a 0           Not a number
01f5c5 c017              rjmp    QNUM3
                 QNUMD:                          ; Double number
                                                 ; a ud.l ud.h a' u
01f5c6 db85              rcall   TWOSWAP         ; a a' u ud.l ud.h 
01f5c7 dc67              rcall   RFROM           ; a a' u ud.l ud.d sign
01f5c8 dd71              rcall   ZEROSENSE
01f5c9 f009              breq    QNUMD1
01f5ca d43b              rcall   DNEGATE
                 QNUMD1: 
01f5cb db80              rcall   TWOSWAP         ; a d.l d.h a' u
01f5cc dd6d              rcall   ZEROSENSE       ; a d.l d.h a'
01f5cd f061              breq    QNUM1
01f5ce 940f fef2         call    CFETCH
01f5d0 d159              rcall   DOLIT
01f5d1 002e              .dw     '.'
01f5d2 dc86              rcall   MINUS
01f5d3 dd66              rcall   ZEROSENSE       ; a d.l d.h
01f5d4 f771              brne    QNUM_ERR1
01f5d5 dc47              rcall   ROT             ; d.l d.h a
01f5d6 dc2d              rcall   DROP            ; d.l d.h
01f5d7 d152              rcall   DOLIT         ; 
01f5d8 0002              .dw     2               ; d.l ud.h 2    Double number
01f5d9 c003              rjmp    QNUM3
                 QNUM1:                          ; single precision dumber
                                                 ; a ud.l ud.h  a'
01f5da db63              rcall   TWODROP         ; a n
01f5db dd9f              rcall   NIP             ; n
01f5dc db9b              rcall   ONE             ; n 1           Single number
                 QNUM3:  
01f5dd 9508              ret
                 
                 
01f5de 7384
01f5df 6177
01f5e0 0070              .db     NFA|4,"swap",0
                 SWOP_A:
01f5e1 940d f20b         jmp     SWOP
                 
                 ; TI#  -- n                      size of TIB
                 ; : ti# task @ 8 + @ ;
01f5e3 eb2a              fdw     NUMBERQ_L
                 TIBSIZE_L:
01f5e4 7483
01f5e5 2369              .db     NFA|3,"ti#"
                 TIBSIZE:
01f5e6 de5c              rcall   TASK
01f5e7 d082              rcall   FETCH_A
01f5e8 9605              adiw    tosl, 5
01f5e9 940d fef2         jmp     CFETCH
                 
                 ; TIB     -- a-addr        Terminal Input Buffer
01f5eb ebc8              fdw     TIBSIZE_L
                 TIB_L:
01f5ec 7483
01f5ed 6269              .db     NFA|3,"tib"
                 TIB:
01f5ee d005              rcall   TIU
01f5ef 940d fec7         jmp     FETCH
                         
                 ; TIU     -- a-addr        Terminal Input Buffer user variable 
01f5f1 ebd8              fdw     TIB_L
                 TIU_L:
01f5f2 7483
01f5f3 7569              .db     NFA|3,"tiu"
                 TIU:
01f5f4 de6d              rcall   DOUSER
01f5f5 fff0              .dw     utib       ; pointer to Terminal input buffer
                 
                 ; >IN     -- a-addr        holds offset into TIB
                 ; In RAM
01f5f6 ebe4              fdw     TIU_L
                 TOIN_L:
01f5f7 3e83
01f5f8 6e69              .db     NFA|3,">in"
                 TOIN:
01f5f9 de68              rcall   DOUSER
01f5fa fffa              .dw     utoin
                 
                 ; 'SOURCE  -- a-addr        two cells: len, adrs
                 ; In RAM ?
01f5fb ebee              fdw     TOIN_L
                 TICKSOURCE_L:
01f5fc 2787
01f5fd 6f73
01f5fe 7275
01f5ff 6563              .db     NFA|7,"'source"
                 TICKSOURCE:
01f600 de61              rcall   DOUSER
01f601 fff6              .dw     usource       ; two cells !!!!!!
                 
                 ;  INTERPRET  c-addr u --    interpret given buffer
01f602 ebf8              fdw     TICKSOURCE_L
                 INTERPRET_L:
01f603 6989
01f604 746e
01f605 7265
01f606 7270
01f607 7465              .db     NFA|9,"interpret"
                 INTERPRET: 
01f608 dff7              rcall   TICKSOURCE
01f609 db2a              rcall   TWOSTORE
01f60a d0c1              rcall   FALSE_
01f60b dfed              rcall   TOIN
01f60c ded1              rcall   STORE_A
                 IPARSEWORD:
01f60d d238              rcall   BL
01f60e de9c              rcall   WORD
                 
01f60f d124              rcall   DUP
01f610 dd8c              rcall   CFETCH_A
01f611 dd28              rcall   ZEROSENSE
01f612 f409              brne    IPARSEWORD1
01f613 c053              rjmp    INOWORD
                 IPARSEWORD1:
01f614 df08              rcall   FIND            ; sets also wflags
01f615 dd2a              rcall   DUPZEROSENSE    ; 0 = not found, -1 = normal, 1 = immediate
01f616 f1a1              breq    INUMBER         ; NUMBER?
01f617 dc72              rcall   ONEPLUS         ; 0 = normal 2 = immediate
01f618 d234              rcall   STATE_
01f619 d120              rcall   ZEROEQUAL
01f61a dc4f              rcall   OR_
01f61b dd1e              rcall   ZEROSENSE
01f61c f099              breq    ICOMPILE_1      ; Compile a word
                         
                                                 ; Execute a word
                                                 ; immediate&compiling or interpreting
01f61d fe94              sbrs    wflags, 4       ; Compile only check
01f61e c00a              rjmp    IEXECUTE        ; Not a compile only word
01f61f d22d              rcall   STATE_          ; Compile only word check
01f620 dbab              rcall   XSQUOTE
01f621 430c
01f622 4d4f
01f623 4950
01f624 454c
01f625 4f20
01f626 4c4e
01f627 0059              .db     12,"COMPILE ONLY",0
01f628 d0ee              rcall   QABORT
                 IEXECUTE:
01f629 7b6f              cbr     FLAGS1, (1<<noclear)
01f62a d9da              rcall   EXECUTE
01f62b fd66              sbrc    FLAGS1, noclear ;  set by \ and by (
01f62c cfe0              rjmp    IPARSEWORD
01f62d 7e6f              cbr     FLAGS1, (1<<izeroeq) ; Clear 0= encountered in compilation
01f62e 7d6f              cbr     FLAGS1, (1<<idup)    ; Clear DUP encountered in compilation
01f62f cfdd              rjmp    IPARSEWORD
                 ICOMPILE_1:
01f630 7e6f              cbr     FLAGS1, (1<<izeroeq) ; Clear 0= encountered in compilation
01f631 d102              rcall   DUP
01f632 d0f7              rcall   DOLIT
01f633 ee74              fdw     ZEROEQUAL       ; Check for 0=, modifies IF and UNTIL to use bnz
01f634 dc93              rcall   EQUAL
01f635 dd04              rcall   ZEROSENSE
01f636 f011              breq    ICOMPILE_2
01f637 6160              sbr     FLAGS1, (1<<izeroeq) ; Mark 0= encountered in compilation
01f638 c00d              rjmp    ICOMMAXT
                 ICOMPILE_2:
01f639 7d6f              cbr     FLAGS1, (1<<idup)    ; Clear DUP encountered in compilation
01f63a d0f9              rcall   DUP
01f63b d0ee              rcall   DOLIT
01f63c ee68              fdw     DUP             ; Check for DUP, modies IF and UNTIl to use DUPZEROSENSE
01f63d dc8a              rcall   EQUAL
01f63e dcfb              rcall   ZEROSENSE
01f63f f009              breq    ICOMPILE
01f640 6260              sbr     FLAGS1, (1<<idup)    ; Mark DUP encountered during compilation
                 ICOMPILE:
01f641 fe95              sbrs    wflags, 5       ; Inline check
01f642 c003              rjmp    ICOMMAXT
01f643 940f f9af         call    INLINE0
01f645 cfc7              rjmp    IPARSEWORD
                 ICOMMAXT:
01f646 d127              rcall   COMMAXT_A
01f647 7f6d              cbr     FLAGS1, (1<<fTAILC)  ; Allow tailjmp  optimisation
01f648 fc94              sbrc    wflags, 4            ; Compile only ?
01f649 6062              sbr     FLAGS1, (1<<fTAILC)  ; Prevent tailjmp  optimisation
01f64a cfc2              rjmp    IPARSEWORD
                 INUMBER: 
01f64b 7e6f              cbr     FLAGS1, (1<<izeroeq) ; Clear 0= encountered in compilation
01f64c 7d6f              cbr     FLAGS1, (1<<idup)    ; Clear DUP encountered in compilation
01f64d dbb6              rcall   DROP
01f64e df4a              rcall   NUMBERQ
01f64f dcf0              rcall   DUPZEROSENSE
01f650 f081              breq    IUNKNOWN
01f651 d1fb              rcall   STATE_
01f652 dce7              rcall   ZEROSENSE
01f653 f059              breq    INUMBER1
01f654 2f08              mov     t0, tosl
01f655 9189
01f656 9199              poptos
01f657 ff01              sbrs    t0, 1
01f658 c003              rjmp    ISINGLE
                 IDOUBLE:
01f659 df87              rcall   SWOP_A
01f65a 940f fe52         call    LITERAL
                 ISINGLE:        
01f65c 940f fe52         call    LITERAL
01f65e cfae              rjmp    IPARSEWORD
                 
                 INUMBER1:
01f65f dba4              rcall   DROP
01f660 cfac              rjmp    IPARSEWORD
                 
                 IUNKNOWN:
01f661 dba2              rcall   DROP 
01f662 d045              rcall   DP_TO_RAM
01f663 de6c              rcall   CFETCHPP
01f664 db5a              rcall   TYPE
01f665 d066              rcall   FALSE_
01f666 d0a7              rcall   QABORTQ         ; Never returns & resets the stacks
                 INOWORD: 
01f667 940d f204         jmp     DROP
                 
01f669 4081              .db     NFA|1,"@"
                 FETCH_A:        
01f66a 940d fec7         jmp     FETCH
                 
                 ;;;    bitmask -- 
01f66c ec06              fdw     INTERPRET_L
                 SHB_L:
01f66d 7383
01f66e 6268              .db     NFA|3,"shb"     ; Set header bit
                 SHB:
01f66f d1e9              rcall   LATEST_
01f670 dff9              rcall   FETCH_A
01f671 d0c2              rcall   DUP
01f672 dd2a              rcall   CFETCH_A
01f673 dba9              rcall   ROT
01f674 dbf5              rcall   OR_
01f675 df6b              rcall   SWOP_A
01f676 940d ff15         jmp     CSTORE
                         
01f678 ecda              fdw     SHB_L
                 IMMEDIATE_L:
01f679 6989
01f67a 6d6d
01f67b 6465
01f67c 6169
01f67d 6574              .db     NFA|9,"immediate" ; 
                 IMMEDIATE:
01f67e d0ab              rcall   DOLIT
01f67f 0040              .dw     IMMED
01f680 940d f66f         jmp     SHB
                 
                 ;***************************************************************
01f682 ecf2              fdw     IMMEDIATE_L
                 INLINED_L:
01f683 6987
01f684 6c6e
01f685 6e69
01f686 6465              .db     NFA|7,"inlined" ; 
                 INLINED:
01f687 d0a2              rcall   DOLIT
01f688 0020              .dw     INLINE
01f689 940d f66f         jmp     SHB
                 
                 ;; .st ( -- ) output a string with current data section and current base info
                 ;;; : .st base @ dup decimal <#  [char] , hold #s  [char] < hold #> type 
                 ;;;     <# [char] > hold cse @ #s #> type base ! ;
01f68b ed06              fdw     INLINED_L
                 DOTSTATUS_L:
01f68c 2e83
01f68d 7473              .db     NFA|3,".st"
                 DOTSTATUS:
01f68e d09b              rcall   DOLIT
01f68f 003c              .dw     '<'
01f690 d95f              rcall   EMIT
01f691 940f ffb7         call    DOTBASE
01f693 d95c              rcall   EMIT
01f694 d095              rcall   DOLIT
01f695 002c              .dw     ','
01f696 d959              rcall   EMIT
01f697 940f ffcc         call    MEMQ
01f699 db25              rcall   TYPE
01f69a d08f              rcall   DOLIT
01f69b 003e              .dw     '>'
01f69c d953              rcall   EMIT
01f69d 940d f8c7         jmp     DOTS
                 
01f69f 3e82
01f6a0 0072              .db     NFA|2,">r",0
01f6a1 940d f224 TOR_A:  jmp     TOR
                 
                 
                 ;;; TEN ( -- n ) Leave decimal 10 on the stack
01f6a3 6181              .db     NFA|1,"a"
                 TEN:
01f6a4 d99f              rcall   DOCREATE
01f6a5 000a              .dw     10
                 
                 ; dp> ( -- ) Copy ini, dps and latest from eeprom to ram
                 ;        .dw     link
                 ; link    set     $
01f6a6 6483
01f6a7 3e70              .db     NFA|3,"dp>"
                 DP_TO_RAM:
01f6a8 d081              rcall   DOLIT
01f6a9 2200              .dw     dp_start
01f6aa d1bd              rcall   INI
01f6ab dff8              rcall   TEN
01f6ac 940d f4b5         jmp     CMOVE
                 
                 ; >dp ( -- ) Copy only changed turnkey, dp's and latest from ram to eeprom
                 ;        .dw     link
                 ; link    set     $
01f6ae 3e83
01f6af 7064              .db     NFA|3,">dp"
                 DP_TO_EEPROM:
01f6b0 d079              rcall   DOLIT
01f6b1 2200              .dw     dp_start
01f6b2 dc3b              rcall   STORE_P_TO_R
01f6b3 d1b4              rcall   INI
01f6b4 d075              rcall   DOLIT
01f6b5 0004              .dw     4
01f6b6 db6d              rcall   TOR
                 DP_TO_EEPROM_0: 
01f6b7 de20              rcall   FETCHPP
01f6b8 d07b              rcall   DUP
01f6b9 dc49              rcall   PFETCH
01f6ba dc06              rcall   NOTEQUAL
01f6bb dc7e              rcall   ZEROSENSE
01f6bc f011              breq    DP_TO_EEPROM_1
01f6bd dc4d              rcall   PSTORE
01f6be c001              rjmp    DP_TO_EEPROM_2
                 DP_TO_EEPROM_1:
01f6bf db44              rcall   DROP
                 DP_TO_EEPROM_2:
01f6c0 d3fd              rcall   PTWOPLUS
                 DP_TO_EEPROM_3:
01f6c1 d316              rcall   XNEXT
01f6c2 f7a0              brcc    DP_TO_EEPROM_0
01f6c3 911f              pop     t1
01f6c4 910f              pop     t0
01f6c5 dc34              rcall   R_TO_P
01f6c6 940d f204         jmp     DROP
                 
01f6c8 ed18              fdw     DOTSTATUS_L
                 FALSE_L:
01f6c9 6685
01f6ca 6c61
01f6cb 6573              .db     NFA|5,"false"
                 FALSE_:                     ; TOS is 0000 (FALSE)
01f6cc 939a
01f6cd 938a              pushtos
01f6ce 2788              clr     tosl
01f6cf 2799              clr     tosh
01f6d0 9508              ret
                 
01f6d1 ed92              fdw     FALSE_L
                 TRUE_L:
01f6d2 7484
01f6d3 7572
01f6d4 0065              .db     NFA|4,"true",0
                 TRUE_:                      ; TOS is ffff (TRUE)
01f6d5 939a
01f6d6 938a              pushtos
01f6d7 ef8f              ser     tosl
01f6d8 ef9f              ser     tosh
01f6d9 9508              ret
                 
                 ; QUIT     --    R: i*x --    interpret from kbd
01f6da eda4              fdw     TRUE_L
                 QUIT_L:
01f6db 7184
01f6dc 6975
01f6dd 0074              .db     NFA|4,"quit",0
                 QUIT:
01f6de d999              rcall   RPEMPTY
01f6df d10b              rcall   LEFTBRACKET
01f6e0 d9c3              rcall   FRAM
                 QUIT0:  
01f6e1 d69e              rcall   IFLUSH
                         ;; Copy INI and DP's from eeprom to ram
01f6e2 dfc5              rcall   DP_TO_RAM
                 QUIT1: 
01f6e3 d8fa              rcall   check_sp
01f6e4 d08e              rcall   CR
01f6e5 df08              rcall   TIB
01f6e6 d04d              rcall   DUP
01f6e7 defe              rcall   TIBSIZE
01f6e8 dfbb              rcall   TEN                 ; Reserve 10 bytes for hold buffer
01f6e9 db6f              rcall   MINUS
01f6ea da97              rcall   ACCEPT
01f6eb da69              rcall   SPACE_
01f6ec df1b              rcall   INTERPRET
01f6ed d15f              rcall   STATE_
01f6ee dc4b              rcall   ZEROSENSE
01f6ef f799              brne    QUIT1
01f6f0 dfbf              rcall   DP_TO_EEPROM
                          
01f6f1 dada              rcall    XSQUOTE
01f6f2 2003
01f6f3 6b6f              .db     3," ok"
01f6f4 daca              rcall    TYPE
01f6f5 d007              rcall   PROMPT_
01f6f6 cfea              rjmp    QUIT0
01f6f7 9508              ret
                 
01f6f8 edb6              fdw     QUIT_L
                 PROMPT_L:
01f6f9 7086
01f6fa 6f72
01f6fb 706d
01f6fc 0074              .db     NFA|6,"prompt",0
                 PROMPT_:
01f6fd 940f ff4f         call    DEFER_DOES
01f6ff 220a              .dw     prompt
                 
                 ; ABORT    i*x --   R: j*x --   clear stk & QUIT
01f700 edf2              fdw     PROMPT_L
                 ABORT_L:
01f701 6185
01f702 6f62
01f703 7472              .db     NFA|5,"abort"
                 ABORT:
01f704 d15a              rcall   S0
01f705 df64              rcall   FETCH_A
01f706 d96d              rcall   SPSTORE
01f707 940d f6de         jmp     QUIT            ; QUIT never rets
                 
                 ; ?ABORT   f --       abort & print ?
01f709 ee02              fdw     ABORT_L
                 QABORTQ_L:
01f70a 3f87
01f70b 6261
01f70c 726f
01f70d 3f74              .db     NFA|7,"?abort?"
                 QABORTQ:
01f70e dabd              rcall   XSQUOTE
01f70f 3f01              .db     1,"?"
01f710 940d f717         jmp     QABORT
                 
                 
                 ; ?ABORT   f c-addr u --       abort & print msg if flag is false
01f712 ee14              fdw     QABORTQ_L
                 QABORT_L:
01f713 3f86
01f714 6261
01f715 726f
01f716 0074              .db     NFA|6,"?abort",0
                 QABORT:
01f717 db05              rcall   ROT
01f718 dc21              rcall   ZEROSENSE
01f719 f419              brne    QABO1
                 QABORT1:        
01f71a da3a              rcall   SPACE_
01f71b daa3              rcall   TYPE
01f71c dfe7              rcall   ABORT  ; ABORT never returns
01f71d 940d f13e QABO1:  jmp     TWODROP
                 
                 ; ABORT"  i*x 0  -- i*x   R: j*x -- j*x  x1=0
                 ;         i*x x1 --       R: j*x --      x1<>0
01f71f ee26              fdw     QABORT_L
                 ABORTQUOTE_L:
01f720 61d6
01f721 6f62
01f722 7472
01f723 0022              .db     NFA|IMMED|COMPILE|6,"abort",0x22,0
                 ABORTQUOTE:
01f724 daba              rcall   SQUOTE
01f725 d93a              rcall   DOCOMMAXT
01f726 ee2e              fdw     QABORT
01f727 9508              ret
                 
                 ;***************************************************
                 ; LIT   -- x    fetch inline 16 bit literal to the stack
                 
                 DOLIT_L:
01f728 6c83
01f729 7469              .db     NFA|3, "lit"
                 DOLIT:
01f72a 91ff              m_pop_zh
01f72b 91ff              pop     zh
01f72c 91ef              pop     zl
01f72d d929              rcall   FETCHLIT
01f72e 95f7              ror     zh
01f72f 95e7              ror     zl
01f730 9419              mijmp    ; (z)
                 
                 ; DUP must not be reachable from user code with rcall
01f731 e470              fdw     RFETCH_L
                 DUP_L:
01f732 64a3
01f733 7075              .db     NFA|INLINE|3, "dup"
                 DUP:
01f734 939a
01f735 938a              pushtos
01f736 9508              ret
                 
01f737 e57e              fdw     NOTEQUAL_L
                 ZEROEQUAL_L:
01f738 3082
01f739 003d              .db     NFA|2, "0=",0
                 ZEROEQUAL:      
01f73a 2b98              or      tosh, tosl
01f73b f441              brne    FALSE_F
                 TRUE_F:
01f73c ef9f              ser     tosh
01f73d ef8f              ser     tosl
                 ZEROEQUAL_1:
01f73e 9508              ret
                 
01f73f ee70              fdw     ZEROEQUAL_L
                 ZEROLESS_L:
01f740 3082
01f741 003c              .db     NFA|2, "0<",0
                 ZEROLESS:
01f742 2399              tst     tosh
01f743 f3c2              brmi    TRUE_F
                 FALSE_F:
01f744 2799              clr     tosh
01f745 2788              clr     tosl
01f746 9508              ret
                 
                 
                 ; '    -- xt             find word in dictionary
01f747 ee40              fdw     ABORTQUOTE_L
                 TICK_L:
01f748 2781              .db     NFA|1,0x27    ; 27h = '
                 TICK:
01f749 d0fc              rcall   BL
01f74a dd60              rcall   WORD
01f74b ddd1              rcall   FIND
01f74c 940d f70e         jmp     QABORTQ
                 
                 ; CHAR   -- char           parse ASCII character
01f74e ee90              fdw     TICK_L
                 CHAR_L:
01f74f 6384
01f750 6168
01f751 0072              .db     NFA|4,"char",0
                 CHAR:
01f752 d0f3              rcall   BL
01f753 dd3a              rcall   PARSE
01f754 daaf              rcall   DROP
01f755 940d fef2         jmp     CFETCH
                 
                 ; (    --                     skip input until )
01f757 ee9e              fdw     CHAR_L
                 PAREN_L:
01f758 28c1              .db     NFA|IMMED|1,"("
                 PAREN:
01f759 dfd0              rcall   DOLIT
01f75a 0029              .dw     ')'
01f75b dd32              rcall   PARSE
01f75c 6460              sbr     FLAGS1, (1<<noclear) ; dont clear flags in case of (
01f75d 940d f13e         jmp     TWODROP
                 
                 ; IHERE    -- a-addr    ret Code dictionary ptr
                 ;   IDP @ ;
                 ;;;         .dw     link
                 ;;; link    set     $
01f75f 6985
01f760 6568
01f761 6572              .db     NFA|5,"ihere"
                 IHERE:
01f762 d066              rcall   IDP
01f763 cf06              rjmp    FETCH_A
                 
                 ; [CHAR]   --          compile character DOLITeral
01f764 eeb0              fdw     PAREN_L
                 BRACCHAR_L:
01f765 5bd6
01f766 6863
01f767 7261
01f768 005d              .db     NFA|IMMED|COMPILE|6,"[char]",0
                 BRACCHAR:
01f769 dfe8              rcall   CHAR
01f76a 940d fe52         jmp     LITERAL
                 
                 ; COMPILE,  xt --         append codefield
01f76c 6383
01f76d 2c66              .db     NFA|3,"cf,"
                 COMMAXT_A:
01f76e 940d f104         jmp     COMMAXT
                 
                 ; CR      --                      output newline
01f770 eeca              fdw     BRACCHAR_L
                 CR_L:
01f771 6382
01f772 0072              .db     NFA|2,"cr",0
                 CR:
01f773 dfb6              rcall   DOLIT
01f774 000d              .dw     0x0d       ; CR \r
01f775 d87a              rcall   EMIT
01f776 dfb3              rcall   DOLIT
01f777 000a              .dw     0x0a       ; LF \n
                 EMIT_A:
01f778 940d eff0         jmp     EMIT
                 
                 ; CREATE   --         create an empty definition
                 ; Create a definition header and append 
                 ; doCREATE and the current data space dictionary pointer
                 ; in FLASH.
                 ;  Examples :   
                 ; : table create 10 cells allot does> swap cells + ;
                 ; ram table table_a     flash table table_b    eeprom table table_c
                 ; ram variable  qqq
                 ; eeprom variable www ram
                 ; flash variable  rrr ram 
                 ; eeprom create calibrationtable 30 allot ram
                 ; 
01f77a eee2              fdw     CR_L
                 CREATE_L:
01f77b 6386
01f77c 6572
01f77d 7461
01f77e 0065              .db     NFA|6,"create",0
                 CREATE:
01f77f d0c6              rcall   BL
01f780 dd2a              rcall   WORD            ; Parse a word
                 
01f781 dfb2              rcall   DUP             ; Remember parsed word at rhere
01f782 dd9a              rcall   FIND
01f783 dbf7              rcall   NIP
01f784 dfb5              rcall   ZEROEQUAL
01f785 da46              rcall   XSQUOTE
01f786 410f
01f787 524c
01f788 4145
01f789 5944
01f78a 4420
01f78b 4645
01f78c 4e49
01f78d 4445              .db     15,"ALREADY DEFINED"
01f78e df88              rcall   QABORT         ; ABORT if word has already been defined
01f78f dfa4              rcall   DUP             ; Check the word length 
01f790 dc0c              rcall   CFETCH_A
01f791 d9e6              rcall   ONE
01f792 df97              rcall   DOLIT
01f793 0010              .dw     16
01f794 db22              rcall   WITHIN
01f795 df78              rcall   QABORTQ          ; Abort if there is no name for create
                 
01f796 d0c2              rcall   LATEST_
01f797 ded2              rcall   FETCH_A
01f798 940f ffa5         call    ICOMMA          ; Link field
01f79a dd35              rcall   CFETCHPP        ; str len
01f79b dfc6              rcall   IHERE
01f79c df97              rcall   DUP             
01f79d d0bb              rcall   LATEST_         ; new 'latest' link
01f79e dd3f              rcall   STORE_A         ; str len ihere
01f79f dd27              rcall   PLACE           ; 
01f7a0 dfc1              rcall   IHERE           ; ihere
01f7a1 dbfb              rcall   CFETCH_A
01f7a2 df87              rcall   DOLIT
01f7a3 0080              .dw     NFA
01f7a4 deca              rcall   SHB
01f7a5 dae4              rcall   ONEPLUS
01f7a6 d93d              rcall   ALIGNED
01f7a7 d160              rcall   IALLOT          ; The header has now been created
01f7a8 df81              rcall   DOLIT             
01f7a9 e088              fdw     DOCREATE        ; compiles the runtime routine to fetch the next dictionary cell to the parameter stack
01f7aa d962              rcall   STORECFF1       ; Append an exeution token, CALL !
01f7ab d92e              rcall   ALIGN
01f7ac d90e              rcall   HERE            ; compiles the current dataspace dp into the dictionary
01f7ad d903              rcall   CSE_
01f7ae db8b              rcall   ZEROSENSE
01f7af f409              brne    CREATE2
01f7b0 dae3              rcall   TWOPLUS
                 CREATE2:
01f7b1 940d ffa5         jmp     ICOMMA          ; dp now points to a free cell
                 
                 ;***************************************************************
                 ; POSTPONE
01f7b3 eef6              fdw    CREATE_L
                 POSTPONE_L:
01f7b4 70d8
01f7b5 736f
01f7b6 7074
01f7b7 6e6f
01f7b8 0065              .db     NFA|IMMED|COMPILE|8,"postpone",0
                 POSTPONE:
01f7b9 d08c              rcall   BL
01f7ba dcf0              rcall   WORD
01f7bb dd61              rcall   FIND
01f7bc df77              rcall   DUP
01f7bd df50              rcall   QABORTQ
01f7be df83              rcall   ZEROLESS
01f7bf db7a              rcall   ZEROSENSE
01f7c0 f021              breq    POSTPONE1
01f7c1 d89e              rcall   DOCOMMAXT
01f7c2 e0c0              fdw     DOCOMMAXT
01f7c3 940d ffa5         jmp     ICOMMA
                 POSTPONE1:
01f7c5 940d f104         jmp     COMMAXT
                 
                 
                 IDP_L:
01f7c7 6983
01f7c8 7064              .db     NFA|3,"idp"
                 IDP:
01f7c9 d87a              rcall   DOCREATE
01f7ca 03ba              .dw     dpFLASH
                 
                 ;***************************************************************
                 ; (DOES>)  --      run-time action of DOES>
                 ;        .dw    link
                 ;link   set     $
01f7cb 2887
01f7cc 6f64
01f7cd 7365
01f7ce 293e              .db     NFA|7,"(does>)"
                 XDOES:
01f7cf 91ff              m_pop_zh
01f7d0 da5e              rcall   RFROM
01f7d1 d087              rcall   LATEST_
01f7d2 de97              rcall   FETCH_A
01f7d3 dd0f              rcall   NFATOCFA
01f7d4 dff4              rcall   IDP
01f7d5 de94              rcall   FETCH_A
01f7d6 deca              rcall   TOR_A
01f7d7 dff1              rcall   IDP
01f7d8 dd05              rcall   STORE_A
01f7d9 0f88              lsl     tosl
01f7da 1f99              rol     tosh
01f7db d931              rcall   STORECFF1 ; Always stores a 4 byte call
01f7dc da52              rcall   RFROM
01f7dd dfeb              rcall   IDP
01f7de 940d fe7e         jmp     STORE
                 
                 
                 ; DOES>    --      change action of latest def'n
01f7e0 ef68              fdw     POSTPONE_L
                 DOES_L:
01f7e1 64d5
01f7e2 656f
01f7e3 3e73              .db     NFA|IMMED|COMPILE|5,"does>"
01f7e4 d87b      DOES:   rcall   DOCOMMAXT
01f7e5 ef9e              fdw     XDOES
01f7e6 d879              rcall   DOCOMMAXT
01f7e7 e09c              fdw     DODOES
01f7e8 9508              ret
                 
                 
                 ;*****************************************************************
                 ; [        --      enter interpretive state
01f7e9 efc2              fdw     DOES_L
                 LEFTBRACKET_L:
01f7ea 5bc1              .db     NFA|IMMED|1,"["
                 LEFTBRACKET:
01f7eb 7000              cbr     t0, 0xff
01f7ec 9300 03cd         sts     state, t0
01f7ee 9508              ret
                 
                 
                 ; ]        --      enter compiling state
01f7ef efd4              fdw     LEFTBRACKET_L
                 RIGHTBRACKET_L:
01f7f0 5d81              .db     NFA|1,"]"
                 RIGHTBRACKET:
01f7f1 6f0f              sbr     t0, 0xff
01f7f2 9300 03cd         sts     state, t0
01f7f4 9508              ret
                 
                 ; :        --           begin a colon definition
01f7f5 efe0              fdw     RIGHTBRACKET_L
                 COLON_L:
01f7f6 3a81              .db     NFA|1,":"
                 COLON:
01f7f7 df87              rcall   CREATE
01f7f8 dff8              rcall   RIGHTBRACKET
01f7f9 940d f124         jmp     STORCOLON
                 
                 ; :noname        -- a          define headerless forth code
01f7fb efec              fdw     COLON_L
                 NONAME_L:
01f7fc 3a87
01f7fd 6f6e
01f7fe 616e
01f7ff 656d              .db     NFA|7,":noname"
                 NONAME:
01f800 df61              rcall   IHERE
01f801 940d f7f1         jmp     RIGHTBRACKET
                 
                 ; ;        --             end a colon definition
01f803 eff8              fdw     NONAME_L
                 SEMICOLON_L:
01f804 3bd1              .db     NFA|IMMED|COMPILE|1,";"
                 SEMICOLON:
01f805 dfe5              rcall   LEFTBRACKET
01f806 fd61              sbrc    FLAGS1, fTAILC
01f807 c025              rjmp    ADD_RETURN_1
01f808 df59              rcall   IHERE
01f809 d02a              rcall   MINUS_FETCH
01f80a 018c              movw    t0, tosl
01f80b 7f10              andi    t1, 0xf0
01f80c 5d10              subi    t1, 0xd0
01f80d f059              breq    RCALL_TO_JMP
01f80e 9189
01f80f 9199              poptos
01f810 d023              rcall   MINUS_FETCH
                 .ifdef EIND
01f811 508f              subi    tosl, 0x0f
                 .else
                 .endif
01f812 4994              sbci    tosh, 0x94
01f813 f4c1              brne    ADD_RETURN
                 CALL_TO_JMP:
                 .ifdef EIND
01f814 e08d              ldi     tosl, 0x0d
                 .else
                 .endif
01f815 e994              ldi     tosh, 0x94
01f816 d9f4              rcall   SWOP
01f817 940d fe7e         jmp     STORE
                 RCALL_TO_JMP:
01f819 db61              rcall   NIP
01f81a 709f              andi    tosh, 0x0f
01f81b fd93              sbrc    tosh, 3
01f81c 6f90              ori     tosh, 0xf0
01f81d da81              rcall   TWOSTAR
01f81e df43              rcall   IHERE
01f81f da2c              rcall   PLUS
01f820 df09              rcall   DOLIT
01f821 fffe              .dw     -2
01f822 d0e5              rcall   IALLOT
01f823 df06              rcall   DOLIT
                 .ifdef EIND
01f824 940d              .dw     0x940d
                 .else
                 .endif
01f825 940f ffa5         call    ICOMMA
                         sub_pflash_tos
01f827 9408              rampv_to_c
01f828 9597              ror     tosh
01f829 9587              ror     tosl
01f82a 940d ffa5         jmp     ICOMMA
                 ADD_RETURN:
01f82c d911              rcall   TWODROP
                 ADD_RETURN_1:
01f82d defc              rcall   DOLIT   ; Compile a ret
01f82e 9508              .dw     0x9508
01f82f 940d ffa5         jmp    ICOMMA
                 
                 
                 
01f831 f008              fdw     SEMICOLON_L
                 MINUS_FETCH_L:
01f832 2d82
01f833 0040              .db     NFA|2,"-@",0
                 MINUS_FETCH:
01f834 d00c              rcall   TWOMINUS
01f835 defe              rcall   DUP
01f836 940d fec7         jmp     FETCH
                 
                 ; [']  --         find word & compile as DOLITeral
01f838 f064              fdw     MINUS_FETCH_L
                 BRACTICK_L:
01f839 5bd3
01f83a 5d27              .db     NFA|IMMED|COMPILE|3,"[']"
                 BRACTICK:
01f83b df0d              rcall   TICK       ; get xt of 'xxx'
01f83c 940d fe52         jmp     LITERAL
                 
                 ; 2-    n -- n-2
01f83e f072              fdw     BRACTICK_L
                 TWOMINUS_L:
01f83f 32a2
01f840 002d              .db     NFA|INLINE|2,"2-",0
                 TWOMINUS:
01f841 9702              sbiw    tosl, 2
01f842 9508              ret
                 
                         
                 ; BL      -- char                 an ASCII space
01f843 f07e              fdw     TWOMINUS_L
                 BL_l:
01f844 6282
01f845 006c              .db     NFA|2,"bl",0
                 BL:
01f846 940f f044         call    DOCREATE
01f848 0020              .dw     ' '
                 
                 ; STATE   -- flag                 holds compiler state
01f849 f088              fdw     BL_L
                 STATE_L:
01f84a 7385
01f84b 6174
01f84c 6574              .db     NFA|5,"state"
                 STATE_:
01f84d 939a
01f84e 938a              pushtos
01f84f 9180 03cd         lds     tosl, state
01f851 9190 03cd         lds     tosh, state
01f853 9508              ret
                 
                 ; LATEST    -- a-addr           
01f854 f094              fdw     STATE_L
                 LATEST_L:
01f855 6c86
01f856 7461
01f857 7365
01f858 0074              .db     NFA|6,"latest",0
                 LATEST_:
01f859 940f f044         call    DOCREATE
01f85b 03c0              .dw     dpLATEST
                 
                 ; S0       -- a-addr      start of parameter stack
01f85c f0aa              fdw     LATEST_L
                 S0_L:
01f85d 7382
01f85e 0030              .db     NFA|2,"s0",0
                 S0:
01f85f dc02              rcall   DOUSER
01f860 ffe4              .dw     us0
                         
                 ; R0       -- a-addr      start of parameter stack
01f861 f0ba              fdw     S0_L
                 R0_L:
01f862 7282
01f863 0030              .db     NFA|2,"r0",0
                 R0_:
01f864 dbfd              rcall   DOUSER
01f865 ffe6              .dw     ur0
                         
                 ; ini -- a-addr       ini variable contains the user-start xt
                 ; In RAM
                 ;        .dw     link
                 ;link    set     $
01f866 6983
01f867 696e              .db     NFA|3,"ini"
                 INI:
01f868 940f f044          call   DOCREATE
01f86a 03b8              .dw     dpSTART
                 
                 ; ticks  -- u      system ticks (0-ffff) in milliseconds
01f86b f0c4              fdw     R0_L
                 TICKS_L:
01f86c 7485
01f86d 6369
01f86e 736b              .db     NFA|5,"ticks"
                 TICKS:
01f86f 939a
01f870 938a              pushtos
01f871 b70f              in_     t0, SREG
01f872 94f8              cli
01f873 2d8e              mov     tosl, ms_count
01f874 2d9f              mov     tosh, ms_count1
01f875 bf0f              out_    SREG, t0
01f876 9508              ret
                 
                         
                 ; ms  +n --      Pause for n millisconds
                 ; : ms ( +n -- )     
                 ;   ticks -
                 ;   begin
                 ;     pause dup ticks - 0<
                 ;   until drop ;
                 ;
01f877 f0d8              fdw     TICKS_L
                 MS_L:
01f878 6d82
01f879 0073              .db     NFA|2,"ms",0
                 MS:
01f87a dff4              rcall   TICKS
01f87b d9d0              rcall   PLUS
                 MS1:    
01f87c d6fc              rcall   PAUSE
01f87d deb6              rcall   DUP
01f87e dff0              rcall   TICKS
01f87f d9d9              rcall   MINUS
01f880 dec1              rcall   ZEROLESS
01f881 dab8              rcall   ZEROSENSE
01f882 f3c9              breq    MS1
01f883 940d f204         jmp     DROP
                 
                 ;  .id ( nfa -- ) 
01f885 f0f0              fdw     MS_L
                 DOTID_L:
01f886 2e83
01f887 6469              .db     NFA|3,".id"
                 DOTID:
01f888 dc47              rcall   CFETCHPP
01f889 dea0              rcall   DOLIT
01f88a 000f              .dw     0x0f
01f88b d9d6              rcall   AND_
01f88c d997              rcall   TOR
01f88d c003              rjmp    DOTID3
                 DOTID1:
01f88e dc41              rcall   CFETCHPP
01f88f d00a              rcall   TO_PRINTABLE
01f890 dee7              rcall   EMIT_A
                 DOTID3:
01f891 d146              rcall   XNEXT
01f892 f7d8              brcc    DOTID1  
01f893 911f              pop     t1
01f894 910f              pop     t0
01f895 940d f204         jmp     DROP
                 
                  ; >pr   c -- c      Filter a character to printable 7-bit ASCII
01f897 f10c              fdw     DOTID_L
                 TO_PRINTABLE_L:
01f898 3e83
01f899 7270              .db     NFA|3,">pr"
                 TO_PRINTABLE:   
01f89a 3080              cpi     tosl, 0
01f89b f012              brmi    TO_PRINTABLE1
01f89c 3280              cpi     tosl, 0x20
01f89d f40a              brpl    TO_PRINTABLE2
                 TO_PRINTABLE1:
01f89e e28e              ldi     tosl, '.'
                 TO_PRINTABLE2:
01f89f 9508              ret
                 
                  ; WORDS    --          list all words in dict.
01f8a0 f130              fdw     TO_PRINTABLE_L
                 WORDS_L:
01f8a1 7785
01f8a2 726f
01f8a3 7364              .db     NFA|5,"words"
01f8a4 de27              rcall   FALSE_
01f8a5 decd              rcall   CR
01f8a6 de83              rcall   DOLIT
01f8a7 f578              fdw     kernellink
01f8a8 d005              rcall   WDS1
01f8a9 de22              rcall   FALSE_
01f8aa dec8              rcall   CR
01f8ab dec7                      rcall   CR
01f8ac dfac              rcall   LATEST_
01f8ad ddbc              rcall   FETCH_A
01f8ae de85      WDS1:   rcall   DUP
01f8af dfd8              rcall   DOTID
01f8b0 dd30              rcall   SWOP_A
01f8b1 d9d8              rcall   ONEPLUS
01f8b2 de81              rcall   DUP
01f8b3 de76              rcall   DOLIT
01f8b4 0007              .dw     7
01f8b5 d9ac              rcall   AND_
01f8b6 da83              rcall   ZEROSENSE
01f8b7 f021              breq    WDS2
01f8b8 de71              rcall   DOLIT
01f8b9 0009              .dw     9
01f8ba debd              rcall   EMIT_A
01f8bb c001              rjmp    WDS3
                 WDS2:   
01f8bc deb6              rcall   CR
                 WDS3:
01f8bd dd23              rcall   SWOP_A
                 
01f8be df82              rcall   TWOMINUS
01f8bf ddaa              rcall   FETCH_A
01f8c0 da7f              rcall   DUPZEROSENSE
01f8c1 f761              brne    WDS1
01f8c2 940d f13e         jmp     TWODROP
                 
                 ; .S      --           print stack contents
                 ; : .s space sp@ s0 @ 2- begin 2dup < while -@ u. repeat 2drop ;
01f8c4 f142              fdw     WORDS_L
                 DOTS_L:
01f8c5 2e82
01f8c6 0073              .db     NFA|2,".s",0
                 DOTS:
01f8c7 d88d              rcall   SPACE_
01f8c8 de6b              rcall   DUP          ; push tosl:tosh to memory
01f8c9 940f f06d         call    SPFETCH
01f8cb df93              rcall   S0
01f8cc dd9d              rcall   FETCH_A
01f8cd df73              rcall   TWOMINUS
                 DOTS1:
01f8ce d876              rcall   TWODUP
01f8cf d9fd              rcall   LESS
01f8d0 da69              rcall   ZEROSENSE
01f8d1 f019              breq    DOTS2
01f8d2 df61              rcall   MINUS_FETCH
01f8d3 db21              rcall   UDOT
01f8d4 cff9              rjmp    DOTS1
                 DOTS2:  
01f8d5 d92e              rcall   DROP
01f8d6 940d f13e         jmp     TWODROP
                 
                 ;   DUMP  ADDR U --       DISPLAY MEMORY
01f8d8 f18a              fdw     DOTS_L
                 DUMP_L:
01f8d9 6484
01f8da 6d75
01f8db 0070              .db     NFA|4,"dump",0
                 DUMP:
01f8dc de4d              rcall   DOLIT
01f8dd 0010              .dw     16
01f8de da7f              rcall   USLASH
01f8df d944              rcall   TOR
01f8e0 c020              rjmp    DUMP7
                 DUMP1:  
01f8e1 de91              rcall   CR
01f8e2 de51              rcall   DUP
01f8e3 de46              rcall   DOLIT
01f8e4 0004              .dw     4
01f8e5 db19              rcall   UDOTR
01f8e6 de43              rcall   DOLIT
01f8e7 003a              .dw     ':'
01f8e8 de8f              rcall   EMIT_A
01f8e9 de40              rcall   DOLIT
01f8ea 000f              .dw     15
01f8eb d938              rcall   TOR
                 DUMP2:
01f8ec dbe3              rcall   CFETCHPP
01f8ed de3c              rcall   DOLIT
01f8ee 0002              .dw     2
01f8ef db0f              rcall   UDOTR
01f8f0 d0e7              rcall   XNEXT
01f8f1 f7d0              brcc    DUMP2
01f8f2 911f              pop     t1
01f8f3 910f              pop     t0
                 
01f8f4 de35              rcall   DOLIT
01f8f5 0010              .dw     16
01f8f6 d962              rcall   MINUS
01f8f7 de32              rcall   DOLIT
01f8f8 000f              .dw     15
01f8f9 d92a              rcall   TOR
                 DUMP4:  
01f8fa dbd5              rcall   CFETCHPP
01f8fb df9e              rcall   TO_PRINTABLE
01f8fc de7b              rcall   EMIT_A
01f8fd d0da              rcall   XNEXT
01f8fe f7d8              brcc    DUMP4
01f8ff 911f              pop     t1
01f900 910f              pop     t0
                 DUMP7:
01f901 d0d6              rcall   XNEXT
01f902 f6f0              brcc    DUMP1
01f903 911f              pop     t1
01f904 910f              pop     t0
01f905 940d f204         jmp     DROP
                 
                 ; IALLOT   n --    allocate n bytes in ROM
                 ;       .dw     link
                 ;link   set     $
01f907 2081              .db     NFA|1," "
                 IALLOT:
01f908 dec0              rcall   IDP
01f909 940d f2ab         jmp     PLUSSTORE
                     
                 
                 ;***************************************************************
                 ;  Store the execcution vector addr to the return stack
                 ; leave the updated return stack pointer on the data stack
                 ; x>r ( addr rsp -- rsp' )
01f90b f1b2              fdw     DUMP_L
                 X_TO_R_L:
01f90c 7883
01f90d 723e              .db     NFA|3,"x>r"
                 X_TO_R:
01f90e 01fc              movw    zl, tosl
01f90f 9189
01f910 9199              poptos
01f911 d00a              rcall   TO_XA
01f912 9631              adiw    zl, 1
01f913 9382              st      -z, tosl
01f914 9392              st      -z, tosh
                 .ifdef EIND
01f915 9262              st      -z, r_one
                 .endif
01f916 9252              st      -z, zero
01f917 01cf              movw    tosl, zl
01f918 9508              ret
                 ;***************************************************************
01f919 f218              fdw     X_TO_R_L
                 TO_XA_L:
01f91a 3e83
01f91b 6178              .db NFA|3,">xa"
                 TO_XA:
                          sub_pflash_tos
01f91c 9408               rampv_to_c
01f91d 9597               ror tosh
01f91e 9587               ror tosl
01f91f 9508               ret
                 
01f920 f234               fdw     TO_XA_L
                 XA_FROM_L:
01f921 7883
01f922 3e61              .db NFA|3,"xa>"
                 XA_FROM:
01f923 0f88               lsl     tosl
01f924 1f99               rol     tosh
                          add_pflash_tos
01f925 9508               ret
                 ;***************************************************************
01f926 f242               fdw    XA_FROM_L
                 PFL_L:
01f927 7083
01f928 6c66              .db     NFA|3,"pfl"
                 PFL:
01f929 940f f044          call   DOCREATE
01f92b 0000              .dw     PFLASH
                 ;***************************************************************
01f92c f24e              fdw    PFL_L
                 ZFL_L:
01f92d 7a83
01f92e 6c66              .db     NFA|3, "zfl"
                 ZFL:
01f92f 940f f044          call   DOCREATE
01f931 0003              .dw     RAMPZV
                 ;***************************************************************
                 ; ,?0=    -- addr  Compile ?0= and make make place for a branch instruction
01f932 2c84
01f933 303f
01f934 003d              .db     NFA|4, ",?0=",0    ; Just for see to work !
                 COMMAZEROSENSE:
01f935 fd65              sbrc    FLAGS1, idup
01f936 c003              rjmp    COMMAZEROSENSE1
01f937 ddf2              rcall   DOLIT
01f938 e674              fdw     ZEROSENSE
01f939 c003              rjmp    COMMAZEROSENSE2
                 COMMAZEROSENSE1:
01f93a d004              rcall   IDPMINUS
01f93b ddee              rcall   DOLIT
01f93c e680              fdw     DUPZEROSENSE
                 COMMAZEROSENSE2:
01f93d 7d6f              cbr     FLAGS1, (1<<idup)
01f93e c070              rjmp    INLINE0
                 
                 IDPMINUS:
01f93f ddea              rcall   DOLIT
01f940 fffc              .dw     -4
01f941 cfc6              rjmp    IALLOT
                 
                 ;       rjmp, ( rel-addr -- )
                 RJMPC:
01f942 d962              rcall   TWOSLASH
01f943 709f              andi    tosh, 0x0f
01f944 6c90              ori     tosh, 0xc0
01f945 940d ffa5         jmp     ICOMMA
                 
                 
                 BRCCC:
01f947 dde2              rcall   DOLIT
01f948 f008              .dw     0xf008      ; brcc pc+2
01f949 940d ffa5         jmp     ICOMMA
                 ;BREQC:
                 ;        rcall   DOLIT
                 ;        .dw     0xf009      ; breq pc+2
                 ;        sbrc    FLAGS1, izeroeq
                 ;        ori     tosh, 4     ; brne pc+2
                 ;        jmp     ICOMMA
                 BRNEC:
01f94b ddde              rcall   DOLIT
01f94c f409              .dw     0xf409      ; brne pc+2
01f94d fd64              sbrc    FLAGS1, izeroeq
01f94e 7f9b              andi    tosh, ~4
01f94f 940d ffa5         jmp     ICOMMA
                 
                 ; IF       -- adrs   conditional forward branch
                 ; Leaves address of branch instruction 
                 ; and compiles the condition byte
01f951 f25a              fdw     ZFL_L
                 IF_L:
01f952 69d2
01f953 0066              .db     NFA|IMMED|COMPILE|2,"if",0
                 IF_:
01f954 fd64              sbrc    FLAGS1, izeroeq
01f955 dfe9              rcall   IDPMINUS
01f956 dfde              rcall   COMMAZEROSENSE
01f957 dff3              rcall   BRNEC
01f958 7e6f              cbr     FLAGS1, (1<<izeroeq)
01f959 de08              rcall   IHERE
01f95a dd71              rcall   FALSE_
01f95b 940d f942         jmp     RJMPC           ; Dummy, replaced by THEN with rjmp 
                 
                 ; ELSE     adrs1 -- adrs2    branch for IF..ELSE
                 ; Leave adrs2 of bra instruction and store bz in adrs1
                 ; Leave adress of branch instruction and FALSE flag on stack
01f95d f2a4              fdw     IF_L
                 ELSE_L:
01f95e 65d4
01f95f 736c
01f960 0065              .db     NFA|IMMED|COMPILE|4,"else",0
                 ELSE_:
01f961 de00              rcall   IHERE
01f962 dd69              rcall   FALSE_
01f963 dfde              rcall   RJMPC
01f964 dc7c              rcall   SWOP_A      ; else-addr  if-addr 
01f965 940d f96b         jmp     THEN_
                 
                 ; THEN     adrs  --        resolve forward branch
01f967 f2bc              fdw     ELSE_L
                 THEN_L:
01f968 74d4
01f969 6568
01f96a 006e              .db     NFA|IMMED|COMPILE|4,"then",0
                 THEN_:
01f96b 6062              sbr     FLAGS1, (1<<fTAILC)  ; Prevent tailjmp  optimisation
01f96c ddf5              rcall   IHERE
01f96d d8a7              rcall   OVER
01f96e d8ea              rcall   MINUS
01f96f ded1              rcall   TWOMINUS
01f970 d934              rcall   TWOSLASH
01f971 ddb8              rcall   DOLIT
01f972 c000              .dw     0xc000      ;  back-addr mask 
01f973 d8f6              rcall   OR_
01f974 dc6c              rcall   SWOP_A
01f975 940d fe7e         jmp     STORE
                 
                 ; BEGIN    -- adrs        target for bwd. branch
01f977 f2d0              fdw     THEN_L
                 BEGIN_L:
01f978 62d5
01f979 6765
01f97a 6e69              .db     NFA|IMMED|COMPILE|5,"begin"
                 BEGIN:
01f97b 940d f762         jmp     IHERE
                 
                 ; UNTIL    adrs --   Branch bakwards if true
01f97d f2f0              fdw     BEGIN_L
                 UNTIL_L:
01f97e 75d5
01f97f 746e
01f980 6c69              .db     NFA|IMMED|COMPILE|5,"until"
                 UNTIL:
01f981 6062              sbr     FLAGS1, (1<<fTAILC)  ; Prevent tailjmp  optimisation
01f982 fd64              sbrc    FLAGS1, izeroeq
01f983 dfbb              rcall   IDPMINUS
01f984 dfb0              rcall   COMMAZEROSENSE
01f985 dfc5              rcall   BRNEC
01f986 7e6f              cbr     FLAGS1, (1<<izeroeq)
01f987 940d f98d         jmp     AGAIN_
                 
                                                 ; AGAIN    adrs --      uncond'l backward branch
                 ;   unconditional backward branch
01f989 f2fc              fdw     UNTIL_L
                 AGAIN_L:
01f98a 61d5
01f98b 6167
01f98c 6e69              .db     NFA|IMMED|COMPILE|5,"again"
                 AGAIN_:
01f98d 6062              sbr     FLAGS1, (1<<fTAILC)  ; Prevent tailjmp  optimisation
01f98e ddd3              rcall   IHERE
01f98f d8c9              rcall   MINUS
01f990 deb0              rcall   TWOMINUS
01f991 940d f942         jmp     RJMPC
                 
                 ; WHILE    addr1 -- addr2 addr1         branch for WHILE loop
                 ; addr1 : address of BEGIN
                 ; addr2 : address where to store bz instruction
01f993 f314              fdw     AGAIN_L
                 WHILE_L:
01f994 77d5
01f995 6968
01f996 656c              .db     NFA|IMMED|COMPILE|5,"while"
                 WHILE_:
01f997 dfbc              rcall   IF_
01f998 940d f20b         jmp     SWOP
                 
                 ; REPEAT   addr2 addr1 --     resolve WHILE loop
01f99a f328              fdw     WHILE_L
                 REPEAT_L:
01f99b 72d6
01f99c 7065
01f99d 6165
01f99e 0074              .db     NFA|IMMED|COMPILE|6,"repeat",0
                 REPEAT_:
01f99f dfed              rcall   AGAIN_
01f9a0 940d f96b         jmp     THEN_
                 
01f9a2 f336              fdw     REPEAT_L
                 INLINE_L:
01f9a3 69d6
01f9a4 6c6e
01f9a5 6e69
01f9a6 0065              .db      NFA|IMMED|COMPILE|6,"inline",0
01f9a7 7e6f              cbr      FLAGS1, (1<<izeroeq)
01f9a8 7d6f              cbr      FLAGS1, (1<<idup)
01f9a9 dd9f              rcall    TICK
01f9aa 940d f9af         jmp      INLINE0
                 ; in, ( addr -- ) begin @+ dup $9508 <> while i, repeat 2drop ;
01f9ac f346              fdw      INLINE_L
                 INLINEC_L:
01f9ad 6983
01f9ae 2c6e              .db      NFA|3,"in,"
                 INLINE0:        
01f9af db28              rcall   FETCHPP
01f9b0 dd83              rcall   DUP
01f9b1 dd78              rcall   DOLIT
01f9b2 9508              .dw     0x9508
01f9b3 d90d              rcall   NOTEQUAL
01f9b4 d985              rcall   ZEROSENSE
01f9b5 f011              breq    INLINE1
01f9b6 d5ee              rcall   ICOMMA
01f9b7 cff7              rjmp    INLINE0
                 INLINE1:
01f9b8 940d f13e         jmp     TWODROP
                 
                 ; FOR   -- bc-addr bra-addr
01f9ba f35a              fdw     INLINEC_L
                 FOR_L:
01f9bb 66d3
01f9bc 726f              .db     NFA|IMMED|COMPILE|3,"for"
                 FOR:
01f9bd 940f f060         call    DOCOMMAXT
01f9bf e448              fdw     TOR
01f9c0 dda1              rcall   IHERE
01f9c1 dd0a              rcall   FALSE_
01f9c2 df7f              rcall   RJMPC
01f9c3 dd9e              rcall   IHERE
01f9c4 940d f20b         jmp     SWOP
                 
                 ; NEXT bra-addr bc-addr --
01f9c6 f376              fdw     FOR_L
                 NEXT_L:
01f9c7 6ed4
01f9c8 7865
01f9c9 0074              .db     NFA|IMMED|COMPILE|4,"next", 0
                 NEXT:
01f9ca dfa0              rcall   THEN_
01f9cb 940f f060         call    DOCOMMAXT
01f9cd f3b0              fdw     XNEXT
01f9ce df78              rcall   BRCCC
                 
01f9cf dfbd              rcall   AGAIN_
                 
01f9d0 dd59              rcall   DOLIT
01f9d1 f3c4              fdw     XNEXT1
01f9d2 940d f9af         jmp     INLINE0
                 ; (next) decrement top of return stack
01f9d4 2887
01f9d5 656e
01f9d6 7478
01f9d7 2029              .db     NFA|7,"(next) "
                 XNEXT:  
01f9d8 91ff              m_pop_zh
01f9d9 91ff              pop     zh
01f9da 91ef              pop     zl
01f9db 91bf              pop     xh
01f9dc 91af              pop     xl
01f9dd 9711              sbiw    xl, 1
01f9de 93af              push    xl
01f9df 93bf              push    xh
01f9e0 9419              mijmp
01f9e1 9508              ret
                 XNEXT1:
01f9e2 911f              pop     t1
01f9e3 910f              pop     t0
01f9e4 9508              ret
                 
                 ; leave clear top of return stack
01f9e5 f38e              fdw     NEXT_L
                 LEAVE_L:
01f9e6 6595
01f9e7 646e
01f9e8 7469              .db     NFA|COMPILE|5,"endit"
                 LEAVE:
01f9e9 91ff              m_pop_zh
01f9ea 91ff              pop     zh
01f9eb 91ef              pop     zl
01f9ec 911f              pop     t1
01f9ed 910f              pop     t0
01f9ee 2700              clr     t0
01f9ef 2711              clr     t1
01f9f0 930f              push    t0
01f9f1 931f              push    t1
01f9f2 9419              mijmp
                 ;***************************************************
                 ; RDROP compile a pop
01f9f3 f3cc              fdw      LEAVE_L
                 RDROP_L:
01f9f4 72d5
01f9f5 7264
01f9f6 706f              .db      NFA|IMMED|COMPILE|5,"rdrop"
                 RDROP:
01f9f7 dd32              rcall   DOLIT
01f9f8 f3c4              fdw     XNEXT1
01f9f9 940d f9af         jmp     INLINE0
                 ;***************************************************
01f9fb f3e8              fdw     RDROP_L
                 STOD_L:
01f9fc 7383
01f9fd 643e              .db     NFA|3,"s>d"
                 STOD:
01f9fe ff97              sbrs    tosh, 7
01f9ff cccc              rjmp    FALSE_
01fa00 ccd4              rjmp    TRUE_
                 ;***************************************************
01fa01 f3f8              fdw     STOD_L
                 DNEGATE_L:
01fa02 6487
01fa03 656e
01fa04 6167
01fa05 6574              .db     NFA|7,"dnegate"
                 DNEGATE:
01fa06 d049              rcall   DINVERT
01fa07 940f f178         call    ONE
01fa09 940d f254         jmp     MPLUS
                 ;***************************************************
01fa0b f404              fdw     DNEGATE_L
                 QDNEGATE_L:
01fa0c 3f88
01fa0d 6e64
01fa0e 6765
01fa0f 7461
01fa10 0065              .db     NFA|8,"?dnegate",0
                 QDNEGATE:
01fa11 dd30              rcall   ZEROLESS
01fa12 d927              rcall   ZEROSENSE
01fa13 f009              breq    QDNEGATE1
01fa14 dff1              rcall   DNEGATE
                 QDNEGATE1:
01fa15 9508              ret
                 
                 ;***************************************************
01fa16 f418              fdw     QDNEGATE_L
                 DABS_L:
01fa17 6484
01fa18 6261
01fa19 0073              .db     NFA|4,"dabs",0
                 DABS:
01fa1a dd19              rcall   DUP
01fa1b 940d fa11         jmp     QDNEGATE
                 ;***************************************************
01fa1d f42e              fdw     DABS_L
                 DPLUS_L:
01fa1e 6482
01fa1f 002b              .db     NFA|2,"d+",0
                 DPLUS:
01fa20 91a9              ld      xl, Y+
01fa21 91b9              ld      xh, Y+
01fa22 91e9              ld      t6, Y+
01fa23 91f9              ld      t7, Y+
01fa24 9109              ld      t0, Y+
01fa25 9119              ld      t1, Y+
01fa26 0fa0              add     xl, t0
01fa27 1fb1              adc     xh, t1
01fa28 1f8e              adc     tosl, t6
01fa29 1f9f              adc     tosh, t7
01fa2a 93ba              st      -Y, xh
01fa2b 93aa              st      -Y, xl
01fa2c 9508              ret
                 
                 ;***************************************************
01fa2d f43c              fdw     DPLUS_L
                 DMINUS_L:
01fa2e 6482
01fa2f 002d              .db     NFA|2,"d-",0
                 DMINUS:
01fa30 dfd5              rcall   DNEGATE
01fa31 940d fa20         jmp     DPLUS
                 ;***************************************************
01fa33 f45c              fdw     DMINUS_L
                 DTWOSLASH_L:
01fa34 6483
01fa35 2f32              .db     NFA|3,"d2/"
01fa36 9109              ld      t0, y+
01fa37 9119              ld      t1, y+
01fa38 9595              asr     tosh
01fa39 9587              ror     tosl
01fa3a 9517              ror     t1
01fa3b 9507              ror     t0
01fa3c 931a              st      -y, t1
01fa3d 930a              st      -y, t0
01fa3e 9508              ret
                 ;***************************************************
01fa3f f468              fdw     DTWOSLASH_L
                 DTWOSTAR_L:
01fa40 6483
01fa41 2a32              .db     NFA|3,"d2*"
01fa42 9109              ld      t0, y+
01fa43 9119              ld      t1, y+
01fa44 0f00              lsl     t0
01fa45 1f11              rol     t1
01fa46 1f88              rol     tosl
01fa47 1f99              rol     tosh
01fa48 931a              st      -y, t1
01fa49 930a              st      -y, t0
01fa4a 9508              ret
                 ;***************************************************
01fa4b f480              fdw     DTWOSTAR_L
                 DINVERT_L:
01fa4c 6487
01fa4d 6e69
01fa4e 6576
01fa4f 7472              .db     NFA|7,"dinvert"
                 DINVERT:
01fa50 91a9              ld      xl, y+
01fa51 91b9              ld      xh, y+
01fa52 95a0              com     xl
01fa53 95b0              com     xh
01fa54 9580              com     tosl
01fa55 9590              com     tosh
01fa56 93ba              st      -y, xh
01fa57 93aa              st      -y, xl
01fa58 9508              ret
                 ;***************************************************
01fa59 f498              fdw     DINVERT_L
                 DZEROEQUAL_L:
01fa5a 6483
01fa5b 3d30              .db     NFA|3,"d0="
                 DZEROEQUAL:
01fa5c 91a9              ld      xl, y+
01fa5d 91b9              ld      xh, y+
01fa5e 2b89              or      tosl, tosh
01fa5f 2b8a              or      tosl, xl
01fa60 2b8b              or      tosl, xh
01fa61 f451              brne    DZEROLESS_FALSE
                 DZEROEQUAL_TRUE:
01fa62 ef8f              ser     tosl
01fa63 ef9f              ser     tosh
01fa64 9508              ret
                 
                 ;***************************************************
01fa65 f4b4              fdw     DZEROEQUAL_L
                 DZEROLESS_L:
01fa66 6483
01fa67 3c30              .db     NFA|3,"d0<"
                 DZEROLESS:
01fa68 91a9              ld      xl, y+
01fa69 91b9              ld      xh, y+
01fa6a 3090              cpi     tosh, 0
01fa6b f3b2              brmi    DZEROEQUAL_TRUE
                 DZEROLESS_FALSE:
01fa6c 2788              clr     tosl
01fa6d 2799              clr     tosh
01fa6e 9508              ret
                 ;***************************************************
01fa6f f4cc              fdw     DZEROLESS_L
                 DEQUAL_L:
01fa70 6482
01fa71 003d              .db     NFA|2,"d=",0
01fa72 dfbd              rcall   DMINUS
01fa73 940d fa5c         jmp     DZEROEQUAL
                 ;***************************************************
01fa75 f4e0              fdw     DEQUAL_L
                 DLESS_L:
01fa76 6482
01fa77 003c              .db     NFA|2,"d<",0
                 DLESS:
01fa78 dfb7              rcall   DMINUS
01fa79 940d fa68         jmp     DZEROLESS
                 ;***************************************************
01fa7b f4ec              fdw     DLESS_L
                 DGREATER_L:
01fa7c 6482
01fa7d 003e              .db     NFA|2,"d>",0
                 DGREATER:
01fa7e 940f f14c         call    TWOSWAP
01fa80 940d fa78         jmp     DLESS
                 ;***************************************************
01fa82 f4f8              fdw     DGREATER_L
                 UDDOT_L:
01fa83 7583
01fa84 2e64              .db     NFA|3,"ud."
01fa85 d930              rcall   LESSNUM
01fa86 d950              rcall   NUMS
01fa87 d958              rcall   NUMGREATER
01fa88 940f f1bf         call    TYPE
01fa8a 940d f155         jmp     SPACE_
                 ;***************************************************
01fa8c f506              fdw     UDDOT_L
                 DDOT_L:
01fa8d 6482
01fa8e 002e              .db     NFA|2,"d.",0
01fa8f d926              rcall   LESSNUM
01fa90 940f f734         call    DUP
01fa92 940f f224         call    TOR
01fa94 df85              rcall   DABS
01fa95 d941              rcall   NUMS
01fa96 940f f22f         call    RFROM
01fa98 d952              rcall   SIGN
01fa99 d946              rcall   NUMGREATER
01fa9a 940f f1bf         call    TYPE
01fa9c 940d f155         jmp     SPACE_
                 ;****************************************************
01fa9e f51a              fdw      DDOT_L
                 MEMHI_L:
01fa9f 6882
01faa0 0069              .db     NFA|2,"hi",0
                 MEMHI:
01faa1 dc88              rcall   DOLIT
01faa2 f552              fdw     FLASHHI
01faa3 940f f0b1         call    CSE_
01faa5 940f f24c         call    PLUS
01faa7 940d fec7         jmp     FETCH
                 FLASHHI:
01faa9 ddff              .dw      FLASH_HI
01faaa 31ff              .dw      EEPROM_HI
01faab 21ff              .dw      RAM_HI
                 ;***************************************************
                 
01faac f53e              fdw      MEMHI_L
                 L_FETCH_P:
01faad 40a2
01faae 0070              .db      NFA|INLINE|2,"@p", 0
                 FETCH_P:
01faaf 939a
01fab0 938a              pushtos
01fab1 01ca              movw    tosl, pl
01fab2 9508              ret
                 ;***************************************************
01fab3 f55a              fdw     L_FETCH_P
                 L_PCFETCH:
01fab4 7083
01fab5 4063              .db     NFA|3,"pc@" ; ( -- c ) Fetch char from pointer
                 PCFETCH:
01fab6 939a
01fab7 938a              pushtos
01fab8 01ca              movw    tosl, pl
01fab9 940d fef2         jmp     CFETCH
                 ;***************************************************
01fabb f568              fdw      L_PCFETCH
                 L_PTWOPLUS:
                 kernellink:
01fabc 70a3
01fabd 2b32              .db     NFA|INLINE|3,"p2+" ; ( n -- ) Add 2 to p
                 PTWOPLUS:
01fabe 0d47              add     pl, r_two
01fabf 1d55              adc     ph, zero
01fac0 9508              ret
                 
                 ;***************************************************
                 ; marker --- name
01fac1 0000              .dw     0
                 L_MARKER:
                 lastword:
01fac2 6d86
01fac3 7261
01fac4 656b
01fac5 0072              .db     NFA|6,"marker",0
                 MARKER:
01fac6 940f f096         call    ROM_
01fac8 dcb6              rcall   CREATE
01fac9 dc60              rcall   DOLIT
01faca 2200              .dw     dp_start
01facb 940f f0bb         call    HERE
01facd dbd6              rcall   TEN
01face d9e6              rcall   CMOVE
01facf dbd4              rcall   TEN
01fad0 940f f1fd         call    ALLOT
01fad2 940f f0a4         call    FRAM
01fad4 dcfa              rcall   XDOES
01fad5 940f f04e         call    DODOES
01fad7 dd90              rcall   INI
01fad8 dbcb              rcall   TEN
01fad9 940d f4b5         jmp     CMOVE
                 
                 
                 ;;; Enable load led
01fadb de66              fdw     BUSY_L
                 LOADON_L:
01fadc 6c85
01fadd 616f
01fade 2b64              .db     NFA|5,"load+"
01fadf 6170              sbr     FLAGS2, (1<<fLOADled)
01fae0 9508              ret
                 
                 ;;; Disable load led
01fae1 f5b8              fdw     LOADON_L
                 LOADOFF_L:
01fae2 6c85
01fae3 616f
01fae4 2d64              .db     NFA|5,"load-"
01fae5 7e7f              cbr     FLAGS2, (1<<fLOADled)
                 .if CPU_LOAD_LED == 1
01fae6 9827              cbi_    CPU_LOAD_DDR, CPU_LOAD_BIT
                 .if CPU_LOAD_LED_POLARITY == 1
01fae7 982f              cbi_    CPU_LOAD_PORT, CPU_LOAD_BIT
                 .else
                 .endif
                 .endif
01fae8 9508              ret
                 ;;; Enable load led
01fae9 f5c4              fdw     LOADOFF_L
                 LOAD_L:
01faea 6c84
01faeb 616f
01faec 0064              .db     NFA|4,"load",0
01faed 939a
01faee 938a              pushtos
01faef 9180 03c9         lds     tosl, load_res
01faf1 9190 03ca         lds     tosh, load_res+1
01faf3 939a
01faf4 938a              pushtos
01faf5 9180 03cb         lds     tosl, load_res+2
01faf7 2799              clr     tosh
01faf8 939a
01faf9 938a              pushtos
01fafa e080              ldi     tosl, low(CPU_LOAD_VAL)
01fafb ea90              ldi     tosh, high(CPU_LOAD_VAL)
01fafc 940f f34c         call    UMSLASHMOD
01fafe 940d f37b         jmp     NIP 
                 
                 ;;; *************************************************
                 ;;; WARM user area data
                 .equ warmlitsize= 28
                 WARMLIT:
01fb00 0200              .dw      0x0200                ; cse, state
01fb01 0488              .dw      utibbuf-4             ; S0
01fb02 044b              .dw      usbuf-1               ; R0
01fb03 f992              fdw      OP_TX_
01fb04 f9e4              fdw      OP_RX_
01fb05 fa24              fdw      OP_RXQ
01fb06 000a              .dw      BASE_DEFAULT          ; BASE
01fb07 048c              .dw      utibbuf               ; TIB
01fb08 ff3e              fdw      OPERATOR_AREA         ; TASK
01fb09 0000              .dw      0                     ; ustatus & uflg
01fb0a 0000              .dw      0                     ; source
01fb0b 0000              .dw      0                     ; source
01fb0c 0000              .dw      0                     ; TOIN
01fb0d 03ea              .dw      up0                   ; Task link
                 
                 .ifdef UCSR1A
                 ;***************************************************
                 ; TX1   c --    output character to UART 1
01fb0e fa1e              fdw     RX0Q_L
                 TX1_L:
01fb0f 7483
01fb10 3178              .db     NFA|3,"tx1"
                 TX1_:
01fb11 3181              cpi     tosl, XON
01fb12 f071              breq    XXON_TX1_TOS
01fb13 3183              cpi     tosl, XOFF
01fb14 f0a1              breq    XXOFF_TX1_TOS
                 TX1_LOOP:
01fb15 6870              sbr     FLAGS2, (1<<fBUSY)
01fb16 d462              rcall   PAUSE
01fb17 9100 00c8         in_     t0, UCSR1A
01fb19 ff05              sbrs    t0, UDRE1
01fb1a cffa              rjmp    TX1_LOOP
01fb1b 9380 00ce         out_    UDR1, tosl
01fb1d 9189
01fb1e 9199              poptos
01fb1f 777f              cbr     FLAGS2, (1<<fBUSY)
01fb20 9508              ret
                 
                 XXON_TX1_TOS:
01fb21 9189
01fb22 9199              poptos
01fb23 c002              rjmp    XXON_TX1_1
                 XXON_TX1:
01fb24 ff71              sbrs    FLAGS2, ixoff_tx1
01fb25 9508              ret
                 XXON_TX1_1:
01fb26 7f7d              cbr     FLAGS2, (1<<ixoff_tx1)
01fb27 e1f1              ldi     zh, XON
01fb28 c007              rjmp    TX1_SEND
                 
                 XXOFF_TX1_TOS:
01fb29 9189
01fb2a 9199              poptos
01fb2b c002              rjmp    XXOFF_TX1_1
                 XXOFF_TX1:
01fb2c fd71              sbrc    FLAGS2, ixoff_tx1
01fb2d 9508              ret     
                 XXOFF_TX1_1:
01fb2e 6072              sbr     FLAGS2, (1<<ixoff_tx1)
01fb2f e1f3              ldi     zh, XOFF
                 TX1_SEND:
01fb30 91e0 00c8         in_     zl, UCSR1A
01fb32 ffe5              sbrs    zl, UDRE1
01fb33 cffc              rjmp    TX1_SEND
01fb34 93f0 00ce         out_    UDR1, zh
01fb36 9508              ret
                 ;***************************************************
                 ; RX1    -- c    get character from the serial line
01fb37 f61e              fdw     TX1_L
                 RX1_L:
01fb38 7283
01fb39 3178              .db     NFA|3,"rx1"
                 RX1_:
01fb3a d43e              rcall   PAUSE
01fb3b d01e              rcall   RX1Q
01fb3c 940f f33a         call    ZEROSENSE
01fb3e f3d9              breq    RX1_
01fb3f 939a
01fb40 938a              pushtos
01fb41 e9e8              ldi     zl, low(rbuf1)
01fb42 e0f3              ldi     zh, high(rbuf1)
01fb43 91a0 0396         lds     xl, rbuf1_rd
01fb45 0fea              add     zl, xl
01fb46 1df5              adc     zh, zero
01fb47 8180              ld      tosl, z
01fb48 2799              clr     tosh
01fb49 b70f              in_     t0, SREG
01fb4a 94f8              cli
01fb4b 95a3              inc     xl
01fb4c 71af              andi    xl, (RX1_BUF_SIZE-1)
01fb4d 93a0 0396         sts     rbuf1_rd, xl
01fb4f 91a0 0397         lds     xl, rbuf1_lv
01fb51 95aa              dec     xl
01fb52 93a0 0397         sts     rbuf1_lv, xl
01fb54 bf0f              out_    SREG, t0
01fb55 9508              ret
                 ;***************************************************
                 ; RX1?  -- n    return the number of characters in queue
01fb56 f670              fdw     RX1_L
                 RX1Q_L:
01fb57 7284
01fb58 3178
01fb59 003f              .db     NFA|4,"rx1?",0
                 RX1Q:
01fb5a 91a0 0397         lds     xl, rbuf1_lv
01fb5c 11a5              cpse    xl, zero
01fb5d 940d f6d5         jmp     TRUE_
                 .if U1FC_TYPE == 1
01fb5f dfc4              rcall   XXON_TX1
                 .endif
                 .if U1FC_TYPE == 2
                 .endif
01fb60 940d f6cc         jmp     FALSE_
                 
                 ;****************************************************
                 RX1_ISRR:
01fb62 e9e8              ldi     zl, low(rbuf1)
01fb63 e0f3              ldi     zh, high(rbuf1)
01fb64 91a0 0395         lds     xl, rbuf1_wr
01fb66 0fea              add     zl, xl
01fb67 1df5              adc     zh, zero
01fb68 91b0 00ce         in_     xh, UDR1
                 .if OPERATOR_UART == 1
                 .if CTRL_O_WARM_RESET == 1
                 .endif
                 .endif
01fb6a 83b0              st      z, xh
01fb6b 95a3              inc     xl
01fb6c 71af              andi    xl, (RX1_BUF_SIZE-1)
01fb6d 93a0 0395         sts     rbuf1_wr, xl
01fb6f 91a0 0397         lds     xl, rbuf1_lv
01fb71 95a3              inc     xl
01fb72 93a0 0397         sts     rbuf1_lv, xl
01fb74 31ae              cpi     xl, RX1_BUF_SIZE-2
01fb75 f409              brne    PC+2
01fb76 d004              rcall   RX1_OVF
01fb77 30a4              cpi     xl, RX0_OFF_FILL
01fb78 f00a              brmi    RX1_ISR_SKIP_XOFF
                 .if U1FC_TYPE == 1
01fb79 dfb4              rcall   XXOFF_TX1_1
                 .endif
                 .if U1FC_TYPE == 2
                 .endif
                 RX1_ISR_SKIP_XOFF:
01fb7a c0f6              rjmp    FF_ISR_EXIT
                 RX1_OVF:
01fb7b e7fc              ldi     zh, '|'
01fb7c cfb3              rjmp    TX1_SEND
                 TX1_ISR:
                 .endif
                 ;***************************************************
                 RQ_EMIT:
01fb7d fe00              sbrs    t2, PORF
01fb7e c003              rjmp    RQ_EXTR
01fb7f dbaa              rcall   DOLIT
01fb80 0050              .dw     'P'
01fb81 dbf6              rcall   EMIT_A
                 RQ_EXTR:
01fb82 fe01              sbrs    t2, EXTRF
01fb83 c003              rjmp    RQ_BORF
01fb84 dba5              rcall   DOLIT
01fb85 0045              .dw     'E'
01fb86 dbf1              rcall   EMIT_A
                 RQ_BORF:
01fb87 fe02              sbrs    t2, BORF
01fb88 c003              rjmp    RQ_WDRF
01fb89 dba0              rcall   DOLIT
01fb8a 0042              .dw     'B'
01fb8b dbec              rcall   EMIT_A
                 RQ_WDRF:
01fb8c fe03              sbrs    t2, WDRF
01fb8d c003              rjmp    RQ_DIVZERO
01fb8e db9b              rcall   DOLIT
01fb8f 0057              .dw     'W'
01fb90 dbe7              rcall   EMIT_A
                 RQ_DIVZERO:
01fb91 fe16              sbrs    t3, 6 ; T bit MATH error
01fb92 c003              rjmp    RQ_END
01fb93 db96              rcall   DOLIT
01fb94 004d              .dw     'M'
01fb95 dbe2              rcall   EMIT_A
                 RQ_END: 
01fb96 940d f155         jmp    SPACE_
                 
                 ;*****************************************************
                 .if IDLE_MODE == 1
                 IDLE_LOAD:
                 .if CPU_LOAD == 1       
01fb98 ff75              sbrs    FLAGS2, fLOAD
01fb99 c00d              rjmp    CPU_LOAD_END
01fb9a b70f              in_     t0, SREG
01fb9b 94f8              cli
01fb9c 7d7f              cbr     FLAGS2, (1<<fLOAD)
01fb9d 9240 03c9         sts     load_res, loadreg0
01fb9f 92c0 03ca         sts     load_res+1,loadreg1
01fba1 92d0 03cb         sts     load_res+2, loadreg2
01fba3 2444              clr     loadreg0
01fba4 24cc              clr     loadreg1
01fba5 24dd              clr     loadreg2
01fba6 bf0f              out_    SREG, t0
                 CPU_LOAD_END:
                 .endif
                 .if CPU_LOAD_LED == 1
01fba7 ff74              sbrs    FLAGS2, fLOADled
01fba8 c002              rjmp    LOAD_LED_END
01fba9 9a27              sbi_    CPU_LOAD_DDR, CPU_LOAD_BIT
                 .if CPU_LOAD_LED_POLARITY == 1
01fbaa 982f              cbi_    CPU_LOAD_PORT, CPU_LOAD_BIT
                 .else
                 .endif
                 LOAD_LED_END:
                 .endif
01fbab fd76              sbrc    FLAGS2, fIDLE
01fbac c00b              rjmp    IDLE_LOAD1
01fbad fd77              sbrc    FLAGS2, fBUSY
01fbae c009              rjmp    IDLE_LOAD1
01fbaf ee0a              ldi     t0, low(up0)
01fbb0 1620              cp      upl, t0
01fbb1 f431              brne    IDLE_LOAD1
                 .ifdef SMCR
01fbb2 e001              ldi     t0, (1<<SE)
01fbb3 bf03              out_    SMCR, t0
                 .else
                 .endif
                 .if CPU_LOAD == 1
01fbb4 9250 0081         out_    TCCR1B, zero    ; Stop load counter
                 .endif
01fbb6 9588              sleep               ; IDLE mode
                 .ifdef SMCR
01fbb7 be53              out_    SMCR, zero
                 .else
                 .endif
                 IDLE_LOAD1:
                 .if CPU_LOAD_LED == 1
01fbb8 fd74              sbrc    FLAGS2, fLOADled
                 .if CPU_LOAD_LED_POLARITY == 1
01fbb9 9a2f              sbi_    CPU_LOAD_PORT, CPU_LOAD_BIT
                 .else
                 .endif
                 .endif
01fbba 9508              ret
                 .endif
                 end_of_dict:
                 
                 ;FF_DP code:
                 dpcode:
                 ;****************************************************
                 ;        org h'f00000'
                 ;        de  h'ff', h'ff'
                 ;        de  dp_user_dictionary&0xff, (dp_user_dictionary>>8)&0xff
                 ;        de  dpeeprom&0xff, (dpeeprom>>8)&0xff
                 ;        de  (dpdata)&0xff, ((dpdata)>>8)&0xff
                 ;        de  lastword_lo, lastword_hi
                 ;        de  DOTSTATUS;&0xff;, (DOTSTATUS>>8)&0xff
                 
                 ; .end
                 ;********************************************************** 
                 .cseg
                 .org BOOT_START
01fc00 940d fd95 RESET_:     jmp  WARM_
                 .org BOOT_START + 0x02
01fc02 d079                  rcall FF_ISR
                 .org BOOT_START + 0x04
01fc04 d077                  rcall FF_ISR
                 .org BOOT_START + 0x06
01fc06 d075                  rcall FF_ISR
                 .org BOOT_START + 0x08
                 .if MS_TIMER_ADDR == 0x08
                 .else
01fc08 d073                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x0a
01fc0a d071                  rcall FF_ISR
                 .org BOOT_START + 0x0c
01fc0c d06f                  rcall FF_ISR
                 .org BOOT_START + 0x0e
                 .if MS_TIMER_ADDR == 0x0e
                 .else
01fc0e d06d                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x10
01fc10 d06b                  rcall FF_ISR
                 .org BOOT_START + 0x12
                 .if MS_TIMER_ADDR == 0x12
                 .else
01fc12 d069                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x14
                 .if MS_TIMER_ADDR == 0x14
                 .else
01fc14 d067                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x16
                 .if MS_TIMER_ADDR == 0x16
                 .else
01fc16 d065                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x18
                 .if MS_TIMER_ADDR == 0x18
                 .else
01fc18 d063                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x1a
                 .if MS_TIMER_ADDR == 0x1a
                 .else
01fc1a d061                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x1c
                 .if MS_TIMER_ADDR == 0x1c
                 .else
01fc1c d05f                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x1e
                 .if MS_TIMER_ADDR == 0x1e
                 .else
01fc1e d05d                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x20
                 .if MS_TIMER_ADDR == 0x20
                 .else
01fc20 d05b                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x22
                 .if MS_TIMER_ADDR == 0x22
                 .else
01fc22 d059                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x24
01fc24 d057                  rcall FF_ISR
                 .if 0x26 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x26
01fc26 d055                  rcall FF_ISR
                 .endif
                 .if 0x28 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x28
01fc28 d053                  rcall FF_ISR
                 .endif
                 .if 0x2a < INT_VECTORS_SIZE
                 .org BOOT_START + 0x2a
                 .if MS_TIMER_ADDR == 0x2a
01fc2a c065                  rjmp  MS_TIMER_ISR
                 .else
                 .endif
                 .endif
                 .if 0x2c < INT_VECTORS_SIZE
                 .org BOOT_START + 0x2c
01fc2c d04f                  rcall FF_ISR
                 .endif
                 .if 0x2e < INT_VECTORS_SIZE
                 .org BOOT_START + 0x2e
01fc2e d04d                  rcall FF_ISR
                 .endif
                 .if 0x30 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x30
01fc30 d04b                  rcall FF_ISR
                 .endif
                 .if 0x32 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x32
01fc32 d049                  rcall FF_ISR
                 .endif
                 .if 0x34 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x34
01fc34 d047                  rcall FF_ISR
                 .endif
                 .if 0x36 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x36
01fc36 d045                  rcall FF_ISR
                 .endif
                 .if 0x38 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x38
01fc38 d043                  rcall FF_ISR
                 .endif
                 .if 0x3a < INT_VECTORS_SIZE
                 .org BOOT_START + 0x3a
01fc3a d041                  rcall FF_ISR
                 .endif
                 .if 0x3c < INT_VECTORS_SIZE
                 .org BOOT_START + 0x3c
01fc3c d03f                  rcall FF_ISR
                 .endif
                 .if 0x3e < INT_VECTORS_SIZE
                 .org BOOT_START + 0x3e
01fc3e d03d                  rcall FF_ISR
                 .endif
                 .if 0x40 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x40
01fc40 d03b                  rcall FF_ISR
                 .endif
                 .if 0x42 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x42
01fc42 d039                  rcall FF_ISR
                 .endif
                 .if 0x44 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x44
01fc44 d037                  rcall FF_ISR
                 .endif
                 .if 0x46 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x46
01fc46 d035                  rcall FF_ISR
                 .endif
                 .if 0x48 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x48
01fc48 d033                  rcall FF_ISR
                 .endif
                 .if 0x4a < INT_VECTORS_SIZE
                 .org BOOT_START + 0x4a
01fc4a d031                  rcall FF_ISR
                 .endif
                 .if 0x4c < INT_VECTORS_SIZE
                 .org BOOT_START + 0x4c
01fc4c d02f                  rcall FF_ISR
                 .endif
                 .if 0x4e < INT_VECTORS_SIZE
                 .org BOOT_START + 0x4e
01fc4e d02d                  rcall FF_ISR
                 .endif
                 .if 0x50 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x50
01fc50 d02b                  rcall FF_ISR
                 .endif
                 .if 0x52 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x52
01fc52 d029                  rcall FF_ISR
                 .endif
                 .if 0x54 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x54
01fc54 d027                  rcall FF_ISR
                 .endif
                 .if 0x56 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x56
01fc56 d025                  rcall FF_ISR
                 .endif
                 .if 0x58 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x58
01fc58 d023                  rcall FF_ISR
                 .endif
                 .if 0x5a < INT_VECTORS_SIZE
                 .org BOOT_START + 0x5a
01fc5a d021                  rcall FF_ISR
                 .endif
                 .if 0x5c < INT_VECTORS_SIZE
                 .org BOOT_START + 0x5c
01fc5c d01f                  rcall FF_ISR
                 .endif
                 .if 0x5e < INT_VECTORS_SIZE
                 .org BOOT_START + 0x5e
01fc5e d01d                  rcall FF_ISR
                 .endif
                 .if 0x60 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x60
01fc60 d01b                  rcall FF_ISR
                 .endif
                 .if 0x62 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x62
01fc62 d019                  rcall FF_ISR
                 .endif
                 .if 0x64 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x64
01fc64 d017                  rcall FF_ISR
                 .endif
                 .if 0x66 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x66
01fc66 d015                  rcall FF_ISR
                 .endif
                 .if 0x68 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x68
01fc68 d013                  rcall FF_ISR
                 .endif
                 .if 0x6a < INT_VECTORS_SIZE
                 .org BOOT_START + 0x6a
01fc6a d011                  rcall FF_ISR
                 .endif
                 .if 0x6c < INT_VECTORS_SIZE
                 .org BOOT_START + 0x6c
01fc6c d00f                  rcall FF_ISR
                 .endif
                 .if 0x6e < INT_VECTORS_SIZE
                 .org BOOT_START + 0x6e
01fc6e d00d                  rcall FF_ISR
                 .endif
                 .if 0x70 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x70
01fc70 d00b                  rcall FF_ISR
                 .endif
                 
                 .org BOOT_START + INT_VECTORS_SIZE - 1
                 FF_ISR_EXIT:
01fc71 919f              pop     tosh
01fc72 918f              pop     tosl
01fc73 911f              pop     t1
01fc74 910f              pop     t0
01fc75 91ff              pop     zh
01fc76 91ef              pop     zl
                 MS_TIMER_ISR_EXIT:
01fc77 91a9              ld      xl, y+
01fc78 91b9              ld      xh, y+
01fc79 bfbf              out_    SREG, xh
01fc7a 91b9              ld      xh, y+
01fc7b 9518              reti
                         
                 FF_ISR:
                 .if IDLE_MODE == 1
                 .if CPU_LOAD == 1
01fc7c 9260 0081         out_    TCCR1B, r_one   ; Start load counter
                 .endif
                 .endif
01fc7e 93ba              st      -y, xh
01fc7f b7bf              in_     xh, SREG
01fc80 93ba              st      -y, xh
01fc81 93aa              st      -y, xl
01fc82 91bf              m_pop_xh
01fc83 91bf              pop     xh
01fc84 91af              pop     xl
01fc85 93ef              push    zl
01fc86 93ff              push    zh
01fc87 930f              push    t0
01fc88 931f              push    t1
01fc89 938f              push    tosl
01fc8a 939f              push    tosh
                 .if low(ivec) == 0x80
                 .else
01fc8b 50a1              subi    xl, 1
                 .endif
01fc8c e0b3              ldi     xh, high(ivec)
01fc8d 91ed              ld      zl, x+
01fc8e 91fd              ld      zh, x+
01fc8f 9419              mijmp   ;(z)
                 
                 ;;; *************************************************
                 MS_TIMER_ISR:
                 .if IDLE_MODE == 1
                 .if CPU_LOAD == 1
01fc90 9260 0081         out_    TCCR1B, r_one   ; Start load counter
                 .endif
                 .endif
01fc92 93ba              st      -y, xh
01fc93 b7bf              in_     xh, SREG
01fc94 93ba              st      -y, xh
01fc95 93aa              st      -y, xl
01fc96 0ce6              add     ms_count,  r_one
01fc97 1cf5              adc     ms_count1, zero
                 .if CPU_LOAD == 1
                 LOAD_ADD:
01fc98 91a0 0084         in_     xl, TCNT1L
01fc9a 91b0 0085         in_     xh, TCNT1H
01fc9c 9250 0085         out_    TCNT1H, zero
01fc9e 9270 0084         out_    TCNT1L, r_two
                 
01fca0 0e4a              add     loadreg0, xl
01fca1 1ecb              adc     loadreg1, xh
01fca2 1cd5              adc     loadreg2, zero
                 
01fca3 20ee              tst     ms_count
01fca4 f409              brne    LOAD_ADD_END
01fca5 6270              sbr     FLAGS2, (1<<fLOAD)
                 LOAD_ADD_END:
                 .endif
01fca6 cfd0              rjmp    MS_TIMER_ISR_EXIT
                 ;;; ***************************************************
                 RX0_ISR:
01fca7 e7e5              ldi     zl, low(rbuf0)
01fca8 e0f3              ldi     zh, high(rbuf0)
01fca9 91a0 0372         lds     xl, rbuf0_wr
01fcab 0fea              add     zl, xl
01fcac 1df5              adc     zh, zero
01fcad 91b0 00c6         in_     xh, UDR0_
                 .if OPERATOR_UART == 0
                 .if CTRL_O_WARM_RESET == 1
01fcaf 30bf              cpi     xh, 0xf
01fcb0 f409              brne    pc+2
01fcb1 cf4e              rjmp    RESET_
                 .endif
                 .endif
01fcb2 83b0              st      z, xh
01fcb3 95a3              inc     xl
01fcb4 71af              andi    xl, (RX0_BUF_SIZE-1)
01fcb5 93a0 0372         sts     rbuf0_wr, xl
01fcb7 91a0 0374         lds     xl, rbuf0_lv
01fcb9 95a3              inc     xl
01fcba 93a0 0374         sts     rbuf0_lv, xl
01fcbc 31ae              cpi     xl, RX0_BUF_SIZE-2
01fcbd f409              brne    PC+2
01fcbe d004              rcall   RX0_OVF
01fcbf 30a4              cpi     xl, RX0_OFF_FILL
01fcc0 f00a              brmi    RX0_ISR_SKIP_XOFF
                 .if U0FC_TYPE == 1
01fcc1 d024              rcall   XXOFF_TX0_1
                 .endif
                 .if U0FC_TYPE == 2
                 .endif
                 RX0_ISR_SKIP_XOFF:
01fcc2 cfae              rjmp    FF_ISR_EXIT
                 RX0_OVF:
01fcc3 e7fc              ldi     zh, '|'
01fcc4 c023              rjmp    TX0_SEND
                 TX0_ISR:
                 
                 .ifdef UCSR1A
01fcc5 ce9c      RX1_ISR: rjmp   RX1_ISRR
                 .endif
                 ;***************************************************
                 ; TX0   c --    output character to UART 0
01fcc6 f5d4              fdw(LOAD_L)
                 TX0_L:
01fcc7 7483
01fcc8 3078              .db     NFA|3,"tx0"
                 TX0_:
                 .if U0FC_TYPE == 1
01fcc9 3181              cpi     tosl, XON
01fcca f071              breq    XXON_TX0_TOS
01fccb 3183              cpi     tosl, XOFF
01fccc f0a1              breq    XXOFF_TX0_TOS
                 .endif
                 TX0_LOOP:
01fccd 6870              sbr     FLAGS2, (1<<fBUSY)
01fcce d2aa              rcall   PAUSE
01fccf 9100 00c0         in_     t0, UCSR0A
01fcd1 ff05              sbrs    t0, 5        ; UDRE0, UDRE USART Data Register Empty
01fcd2 cffa              rjmp    TX0_LOOP
01fcd3 9380 00c6         out_    UDR0_, tosl
01fcd5 9189
01fcd6 9199              poptos
01fcd7 777f              cbr     FLAGS2, (1<<fBUSY)
01fcd8 9508              ret
                 
                 .if U0FC_TYPE == 1
                 XXON_TX0_TOS:
01fcd9 9189
01fcda 9199              poptos
01fcdb c002              rjmp    XXON_TX0_1
                 XXON_TX0:
01fcdc ff70              sbrs    FLAGS2, ixoff_tx0
01fcdd 9508              ret
                 XXON_TX0_1:
01fcde 7f7e              cbr     FLAGS2, (1<<ixoff_tx0)
01fcdf e1f1              ldi     zh, XON
01fce0 c007              rjmp    TX0_SEND
                 
                 XXOFF_TX0_TOS:
01fce1 9189
01fce2 9199              poptos
01fce3 c002              rjmp    XXOFF_TX0_1
                 XXOFF_TX0:
01fce4 fd70              sbrc    FLAGS2, ixoff_tx0
01fce5 9508              ret     
                 XXOFF_TX0_1:
01fce6 6071              sbr     FLAGS2, (1<<ixoff_tx0)
01fce7 e1f3              ldi     zh, XOFF
                 .endif
                 TX0_SEND:
01fce8 91e0 00c0         in_     zl, UCSR0A
01fcea ffe5              sbrs    zl, 5        ; UDRE0, UDRE USART Data Register Empty
01fceb cffc              rjmp    TX0_SEND
01fcec 93f0 00c6         out_    UDR0_, zh
01fcee 9508              ret
                 ;***************************************************
                 ; RX0    -- c    get character from the UART 0 buffer
01fcef f98e              fdw(TX0_L)
                 RX0_L:
01fcf0 7283
01fcf1 3078              .db     NFA|3,"rx0"
                 RX0_:
01fcf2 d286              rcall   PAUSE
01fcf3 d01e              rcall   RX0Q
01fcf4 940f f33a         call    ZEROSENSE
01fcf6 f3d9              breq    RX0_
01fcf7 939a
01fcf8 938a              pushtos
01fcf9 e7e5              ldi     zl, low(rbuf0)
01fcfa e0f3              ldi     zh, high(rbuf0)
01fcfb 91a0 0373         lds     xl, rbuf0_rd
01fcfd 0fea              add     zl, xl
01fcfe 1df5              adc     zh, zero
01fcff 8180              ld      tosl, z
01fd00 2799              clr     tosh
01fd01 b70f              in_     t0, SREG
01fd02 94f8              cli
01fd03 95a3              inc     xl
01fd04 71af              andi    xl, (RX0_BUF_SIZE-1)
01fd05 93a0 0373         sts     rbuf0_rd, xl
01fd07 91a0 0374         lds     xl, rbuf0_lv
01fd09 95aa              dec     xl
01fd0a 93a0 0374         sts     rbuf0_lv, xl
01fd0c bf0f              out_    SREG, t0
01fd0d 9508              ret
                 ;***************************************************
                 ; RX0?  -- n    return the number of characters in queue
01fd0e f9e0              fdw     RX0_L
                 RX0Q_L:
01fd0f 7284
01fd10 3078
01fd11 003f              .db     NFA|4,"rx0?",0
                 RX0Q:
01fd12 91a0 0374         lds     xl, rbuf0_lv
01fd14 11a5              cpse    xl, zero
01fd15 940d f6d5         jmp     TRUE_
                 .if U0FC_TYPE == 1
01fd17 dfc4              rcall   XXON_TX0
                 .endif
                 .if U0FC_TYPE == 2
                 .endif
01fd18 940d f6cc         jmp     FALSE_
                 
                 
                 ;*************************************************************
                  ISTORERR:
01fd1a dbac              rcall   DOTS
01fd1b 940f f1cc         call    XSQUOTE
01fd1d 4103
01fd1e 3f44              .db     3,"AD?"
01fd1f 940f f1bf         call    TYPE
01fd21 c9e2              rjmp    ABORT
                         
                 ; Coded for max 256 byte pagesize !
                 ;if (ibaselo != (iaddrlo&(~(PAGESIZEB-1))))(ibasehi != iaddrhi)
                 ;   if (idirty)
                 ;       writebuffer_to_imem
                 ;   endif
                 ;   fillbuffer_from_imem
                 ;   ibaselo = iaddrlo&(~(PAGESIZEB-1))
                 ;   ibasehi = iaddrhi
                 ;endif
                 IUPDATEBUF:
01fd22 9380 03c4         sts     iaddrl, tosl
01fd24 9390 03c5         sts     iaddrh, tosh
01fd26 3d9e              cpi     tosh, high(FLASH_HI+1)       ; Dont allow kernel writes
01fd27 f790              brcc    ISTORERR
01fd28 9100 03c4         lds     t0, iaddrl
01fd2a 7000              andi    t0, ~(PAGESIZEB-1)
01fd2b 110a              cpse    t0, ibasel
01fd2c c005              rjmp    IFILL_BUFFER
01fd2d 9100 03c5                 lds     t0, iaddrh
01fd2f 110b              cpse    t0, ibaseh
01fd30 c001              rjmp    IFILL_BUFFER
01fd31 9508              ret
                 
                 IFILL_BUFFER:
01fd32 d04d              rcall   IFLUSH
01fd33 9100 03c4         lds     t0, iaddrl
01fd35 7000              andi    t0, ~(PAGESIZEB-1)
01fd36 2ea0              mov     ibasel, t0
01fd37 90b0 03c5         lds     ibaseh, iaddrh
                 IFILL_BUFFER_1:
01fd39 e000              ldi     t0, PAGESIZEB&0xff ; 0x100 max PAGESIZEB
01fd3a 01f5              movw    zl, ibasel
                         sub_pflash_z
01fd3b e0a0              ldi     xl, low(ibuf)
01fd3c e0b2              ldi     xh, high(ibuf)
                 IFILL_BUFFER_2:
01fd3d 9117              lpm_    t1, z+
01fd3e 931d              st      x+, t1
01fd3f 950a              dec     t0
01fd40 f7e1              brne    IFILL_BUFFER_2
01fd41 9508              ret
                 
                 IWRITE_BUFFER:
                 .if OPERATOR_UART == 0
                 .if U0FC_TYPE == 1
01fd42 d9e7              rcall   DOLIT
01fd43 0013              .dw     XOFF
01fd44 940f eff0         call    EMIT
                 .endif
                 .if U0FC_TYPE == 2
                 .endif
                 .else  ;; UART1
                 .if U1FC_TYPE == 1
                 .endif
                 .if U1FC_TYPE == 2
                 .endif
                 .endif
01fd46 d9e3              rcall   DOLIT
01fd47 000a              .dw     10
01fd48 db31              rcall   MS
                         ; Disable interrupts
01fd49 94f8              cli
01fd4a 01f5              movw    zl, ibasel
                         sub_pflash_z
01fd4b e013              ldi     t1, (1<<PGERS) | (1<<SPMEN) ; Page erase
01fd4c d028              rcall   DO_SPM
01fd4d e111              ldi     t1, (1<<RWWSRE) | (1<<SPMEN); re-enable the RWW section
01fd4e d026              rcall   DO_SPM
                 
                         ; transfer data from RAM to Flash page buffer
01fd4f e000              ldi     t0, low(PAGESIZEB);init loop variable
01fd50 e0a0              ldi     xl, low(ibuf)
01fd51 e0b2              ldi     xh, high(ibuf)
                 IWRITE_BUFFER1:
01fd52 900d              ld      r0, x+
01fd53 901d              ld      r1, x+
01fd54 e011              ldi     t1, (1<<SPMEN)
01fd55 d01f              rcall   DO_SPM
01fd56 9632              adiw    zl, 2
01fd57 5002              subi    t0, 2
01fd58 f7c9              brne    IWRITE_BUFFER1
                 
                         ; execute page write
01fd59 50e0              subi    zl, low(PAGESIZEB) ;restore pointer
01fd5a 40f1              sbci    zh, high(PAGESIZEB)
01fd5b e015              ldi     t1, (1<<PGWRT) | (1<<SPMEN)
01fd5c d018              rcall   DO_SPM
                         ; re-enable the RWW section
01fd5d d011              rcall   IWRITE_BUFFER3
                 
                         ; read back and check, optional
01fd5e e000              ldi     t0, low(PAGESIZEB);init loop variable
01fd5f 50a0              subi    xl, low(PAGESIZEB) ;restore pointer
01fd60 40b1              sbci    xh, high(PAGESIZEB)
                 IWRITE_BUFFER2:
01fd61 9007              lpm_    r0, z+
01fd62 901d              ld      r1, x+
01fd63 1001              cpse    r0, r1
01fd64 c030              rjmp    WARM_     ; reset
01fd65 5001              subi    t0, 1
01fd66 f7d1              brne    IWRITE_BUFFER2
                 
01fd67 24bb              clr     ibaseh
01fd68 7f6e              cbr     FLAGS1, (1<<idirty)
                         // reenable interrupts
01fd69 9478              sei
                 .if OPERATOR_UART == 0
                 .if U0FC_TYPE == 1
01fd6a d9bf              rcall   DOLIT
01fd6b 0011              .dw     XON
01fd6c 940f eff0         call    EMIT
                 .endif
                 .if U0FC_TYPE == 2
                 .endif
                 .else
                 .if U1FC_TYPE == 1
                 .endif
                 .if U1FC_TYPE == 2
                 .endif
                 .endif
01fd6e 9508               ret
                         ; ret to RWW section
                         ; verify that RWW section is safe to read
                 IWRITE_BUFFER3:
01fd6f b687              in_     t8, SPMCSR
01fd70 fe86              sbrs    t8, RWWSB ; If RWWSB is set, the RWW section is not ready yet
01fd71 9508              ret
                         ; re-enable the RWW section
01fd72 e111              ldi     t1, (1<<RWWSRE) | (1<<SPMEN)
01fd73 d001              rcall   DO_SPM
01fd74 cffa              rjmp    IWRITE_BUFFER3
                 
                 DO_SPM:
01fd75 b687              in_     t8, SPMCSR
01fd76 fc80              sbrc    t8, SPMEN
01fd77 cffd              rjmp    DO_SPM       ; Wait for previous write to complete
01fd78 bf17              out_    SPMCSR, t1
01fd79 95e8              spm
01fd7a 9508              ret
                 
                                 
01fd7b feec              fdw     PAUSE_L
                 IFLUSH_L:
01fd7c 6986
01fd7d 6c66
01fd7e 7375
01fd7f 0068              .db     NFA|6,"iflush",0
                 IFLUSH:
01fd80 fd60              sbrc    FLAGS1, idirty
01fd81 cfc0              rjmp    IWRITE_BUFFER
01fd82 9508              ret
                 
                 ;***************************************************
                 .ifdef UCSR1A
01fd83 f6ae              fdw     RX1Q_L
                 .else
                 .endif
                 EMPTY_L:
01fd84 6585
01fd85 706d
01fd86 7974              .db     NFA|5,"empty"
                 EMPTY:
01fd87 d9a2              rcall   DOLIT
01fd88 ffea              fdw     COLDLIT
01fd89 d9a0              rcall   DOLIT
01fd8a 2200              .dw     dp_start
01fd8b d99e              rcall   DOLIT
01fd8c 000c              .dw     coldlitsize
01fd8d 940f f4b5         call    CMOVE
01fd8f 940d f6a8         jmp     DP_TO_RAM
                         
                 ;*******************************************************
01fd91 fb08              fdw     EMPTY_L
                 WARM_L:
01fd92 7784
01fd93 7261
01fd94 006d              .db     NFA|4,"warm",0
                 WARM_:
                 ; Zero memory
01fd95 94f8              cli           ; Disable interrupts
01fd96 27aa              clr     xl
01fd97 27bb              clr     xh
01fd98 e1c9              ldi     yl, 25
01fd99 e0d0              ldi     yh, 0
                 WARM_1:
01fd9a 93dd              st      x+, yh
01fd9b 50c1              subi    yl, 1
01fd9c f7e9              brne    WARM_1
                 
01fd9d b61f              in_     t3, SREG
                 .ifdef MCUCSR
                 .endif
                 .ifdef MCUSR
01fd9e b604              in_     t2, MCUSR
01fd9f 9250 0034         sts     MCUSR, zero
                 .endif
01fda1 e1ac              ldi     xl, 0x1C  ; clear ram from y register upwards
                 WARM_2:
01fda2 925d              st      x+, zero
01fda3 31b0              cpi     xh, 0x10  ; up to 0xfff, 4 Kbytes 
01fda4 f7e9              brne    WARM_2
01fda5 e0c1              ldi     yl, 1
01fda6 2e6c              mov     r_one, yl
01fda7 e0c2              ldi     yl, 2
01fda8 2e7c              mov     r_two, yl
                 ; Init Stack pointer
01fda9 e8c8              ldi     yl, low(utibbuf-4)
01fdaa e0d4              ldi     yh, high(utibbuf-4)
                 
                 ; Init Return stack pointer
01fdab e40b              ldi     t0, low(usbuf-1)
01fdac e014              ldi     t1, high(usbuf-1)
01fdad bf0d              out     spl, t0
01fdae bf1e              out     sph, t1
                 ; Init user pointer
01fdaf ee0a              ldi     t0, low(up0)
01fdb0 e013              ldi     t1, high(up0)
01fdb1 0118              movw    upl, t0
                 ; Set RAMPZ for correct flash addressing
                 .ifdef RAMPZ
01fdb2 e003              ldi     t0, RAMPZV
01fdb3 bf0b              out_    RAMPZ, t0
                 .endif
                 .ifdef EIND
01fdb4 be6c              out_    EIND, r_one
                 .endif
                 ; init warm literals
01fdb5 d974              rcall   DOLIT
01fdb6 f600              fdw     WARMLIT
01fdb7 d972              rcall   DOLIT
01fdb8 03cc              .dw     cse
01fdb9 d970              rcall   DOLIT
01fdba 001c              .dw     warmlitsize
01fdbb 940f f4b5         call    CMOVE
                 ; init cold data to eeprom
01fdbd d96c              rcall   DOLIT
01fdbe 2200              .dw     dp_start
01fdbf d107              rcall   FETCH
01fdc0 d914              rcall   TRUE_
01fdc1 940f f2c8         call    EQUAL
01fdc3 940f f33a         call    ZEROSENSE
01fdc5 f009              breq    WARM_3  
01fdc6 dfc0              rcall   EMPTY
                 WARM_3:
                 ; Move interrupts to boot flash section
01fdc7 be65              out_    MCUCR, r_one   ; (1<<IVCE)
01fdc8 be75              out_    MCUCR, r_two   ; (1<<IVSEL)
                 
                 
                 .if MS_TIMER == 0
                 .ifdef TIMSK0
01fdc9 bc74              out_    TCCR0A, r_two  ; CTC
01fdca e003              ldi     t0, ms_pre_tmr0
01fdcb bd05              out_    TCCR0B, t0
01fdcc ef09              ldi     t0, ms_value_tmr0
01fdcd bd07              out_    OCR0A, t0
01fdce 9270 006e         out_    TIMSK0, r_two ; (1<<OCIE0A)
                 .endif
                 .ifdef TIMSK
                 .endif
                 .endif
                 .if MS_TIMER == 1
                 .ifdef TIMSK
                 .endif
                 .ifdef TIMSK1
                 .endif
                 .endif
                 .if MS_TIMER == 2
                 .ifdef TIMSK2
                 .endif
                 .ifdef TIMSK
                 .endif
                 .endif
                 
                 ; Init UART 0
                 .ifdef UBRR0L
01fdd0 d959              rcall   DOLIT
01fdd1 fca7              .dw     RX0_ISR
01fdd2 d957              rcall   DOLIT
                 .ifdef URXC0addr
01fdd3 0332              .dw     URXC0addr+ivec
                 .else
                 .endif
01fdd4 d0a9              rcall   STORE
                 ;;;     Set baud rate
                 ;        out_    UBRR0H, zero
01fdd5 e607              ldi     t0, ubrr0val
01fdd6 9300 00c4         out_    UBRR0L, t0
                         ; Enable receiver and transmitter, rx1 interrupts
01fdd8 e908              ldi     t0, (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0)
01fdd9 9300 00c1         out_    UCSR0B,t0
                         ; Set frame format: 8data, 1stop bit
01fddb e006              ldi     t0, (3<<UCSZ00)|URSEL_
01fddc 9300 00c2         out_    UCSR0C,t0
                 .if U0FC_TYPE == 1
01fdde 6071              sbr     FLAGS2, (1<<ixoff_tx0)
                 .endif
                 .if U0FC_TYPE == 2
                 .endif
                 .endif
                 ; Init UART 1
                 .ifdef UBRR1L
01fddf d94a              rcall   DOLIT
01fde0 fcc5              .dw     RX1_ISR
01fde1 d948              rcall   DOLIT
01fde2 0348              .dw     URXC1addr+ivec
01fde3 d09a              rcall   STORE
                         ; Set baud rate
                 ;        out_    UBRR1H, zero
01fde4 e109              ldi     t0, ubrr1val
01fde5 9300 00cc         out_    UBRR1L, t0
                         ; Enable receiver and transmitter, rx1 interrupts
01fde7 e908              ldi     t0, (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1)
01fde8 9300 00c9         out_    UCSR1B,t0
                         ; Set frame format: 8data, 1stop bit
01fdea e006              ldi     t0, (3<<UCSZ10)
01fdeb 9300 00ca         out_    UCSR1C,t0
                 .if U1FC_TYPE == 1
01fded 6072              sbr     FLAGS2, (1<<ixoff_tx1)
                 .endif
                 .if U1FC_TYPE == 2
                 .endif
                 .endif
01fdee d8b9              rcall   DP_TO_RAM
01fdef 9478              sei
                 
01fdf0 dd8c              rcall   RQ_EMIT
01fdf1 d023              rcall   VER
                 ; Turnkey ?
01fdf2 d17f              rcall   TURNKEY
01fdf3 940f f33a         call    ZEROSENSE
01fdf5 f0d1              breq    STARTQ2
01fdf6 940f f1cc         call    XSQUOTE
01fdf8 4503
01fdf9 4353              .db     3,"ESC"
01fdfa 940f f1bf         call    TYPE
01fdfc d92d              rcall   DOLIT
01fdfd 07d0              .dw     TURNKEY_DELAY
01fdfe da7b              rcall   MS
01fdff 940f effd         call    KEYQ
01fe01 940f f33a         call    ZEROSENSE
01fe03 f049              breq    STARTQ1
01fe04 940f eff6         call    KEY
01fe06 d923              rcall   DOLIT
01fe07 001b              .dw     0x1b
01fe08 940f f2c8         call    EQUAL
01fe0a 940f f33a         call    ZEROSENSE
01fe0c f419              brne    STARTQ2
                 STARTQ1:
01fe0d d164              rcall   TURNKEY
01fe0e 940f f005         call    EXECUTE
                 STARTQ2:
01fe10 940d f704         jmp     ABORT
                 
                 .equ partlen = strlen(partstring)
                 .equ datelen = strlen(DATE)
                 
01fe12 fb24              fdw     WARM_L
                 VER_L:
01fe13 7683
01fe14 7265              .db     NFA|3,"ver"
                 VER:
01fe15 940f f1cc         call    XSQUOTE
                          ;      1234567890123456789012345678901234567890
                         ;.db 34,"FlashForth Atmega 5.0 ",DATE,0xd,0xa,0
01fe17 4622
01fe18 616c
01fe19 6873
01fe1a 6f46
01fe1b 7472
01fe1c 2068
01fe1d 5441
01fe1e 656d
01fe1f 6167
01fe20 3532
01fe21 3036
01fe22 3120
01fe23 2e30
01fe24 3130
01fe25 322e
01fe26 3130
01fe27 0d35
F:\avr\src\ff-atmega.asm(5288): warning: .cseg .db misalignment - padding zero byte
01fe28 000a                      .db     partlen+datelen+14,"FlashForth ",partstring," ", DATE,0xd,0xa
01fe29 940d f1bf         jmp     TYPE
                 
                 ; ei  ( -- )    Enable interrupts
01fe2b fc26              fdw     VER_L
                 EI_L:
01fe2c 65a2
01fe2d 0069              .db     NFA|INLINE|2,"ei",0
01fe2e 9478              sei
01fe2f 9508              ret
                         
                 ; di  ( -- )    Disable interrupts
01fe30 fc58              fdw     EI_L
                 DI_L:
01fe31 64a2
01fe32 0069              .db     NFA|INLINE|2,"di",0
01fe33 94f8              cli
01fe34 9508              ret
                 ;*******************************************************
                 ; ;i  ( -- )    End definition of user interrupt routine
01fe35 fc62              fdw     DI_L
                 IRQ_SEMI_L:
01fe36 3bc2
01fe37 0069              .db     NFA|IMMED|2,";i",0
                 IRQ_SEMI:
01fe38 d8f1              rcall   DOLIT
                 .ifdef EIND
01fe39 940d              .dw     0x940D     ; jmp
                 .else
                 .endif
01fe3a d16a              rcall   ICOMMA
01fe3b d8ee              rcall   DOLIT
01fe3c fc71              .dw     FF_ISR_EXIT
01fe3d d167              rcall   ICOMMA
01fe3e 940d f7eb         jmp     LEFTBRACKET
                 
                 
                 ; int!  ( addr n  --  )   store to interrupt vector number
01fe40 fc6c              fdw     IRQ_SEMI_L
                 IRQ_V_L:
01fe41 6984
01fe42 746e
01fe43 0021              .db     NFA|4,"int!",0
                 IRQ_V:
01fe44 01fc              movw    zl, tosl
01fe45 9731              sbiw    zl, 1
01fe46 0fee              lsl     zl
                 .if low(ivec) == 0x80
                 .endif
01fe47 e0f3              ldi     zh, high(ivec)
01fe48 9189
01fe49 9199              poptos
01fe4a dad1              rcall   TO_XA
01fe4b 940d fe83         jmp     STORE_RAM_2
                 
                 ; DOLITERAL  x --           compile DOLITeral x as native code
01fe4d fc82              fdw     IRQ_V_L
                 LITERAL_L:
01fe4e 6cc7
01fe4f 7469
01fe50 7265
01fe51 6c61              .db     NFA|IMMED|7,"literal"
                 LITERAL:
01fe52 d8d7              rcall   DOLIT
01fe53 ee68              fdw     DUP
01fe54 db5a              rcall   INLINE0
01fe55 940f f734         call    DUP
01fe57 2f98              mov     tosh, tosl
01fe58 9592              swap    tosh
01fe59 709f              andi    tosh, 0xf
01fe5a 708f              andi    tosl, 0xf
01fe5b 6e90              ori     tosh, 0xe0
01fe5c 6880              ori     tosl, 0x80
01fe5d d147              rcall   ICOMMA
01fe5e 2f89              mov     tosl, tosh
01fe5f 9592              swap    tosh
01fe60 709f              andi    tosh, 0xf
01fe61 708f              andi    tosl, 0xf
01fe62 6e90              ori     tosh, 0xe0
01fe63 6980              ori     tosl, 0x90
01fe64 940d ffa5         jmp     ICOMMA
                 
                 #if 0
                 #endif
                 
                 ;*****************************************************************
                 ISTORE:
01fe66 d039              rcall   LOCKEDQ
01fe67 deba              rcall   IUPDATEBUF
01fe68 9189
01fe69 9199              poptos
01fe6a e0a0              ldi     xl, low(ibuf)
01fe6b e0b2              ldi     xh, high(ibuf)
01fe6c 9100 03c4         lds     t0, iaddrl
01fe6e 7f0f              andi    t0, (PAGESIZEB-1)
01fe6f 0fa0              add     xl, t0
01fe70 938d              st      x+, tosl
01fe71 939d              st      x+, tosh
01fe72 9189
01fe73 9199              poptos
01fe74 6061              sbr     FLAGS1, (1<<idirty)
01fe75 9508              ret
                 
01fe76 fc9c              fdw     LITERAL_L
                 TO_A_L:
01fe77 3e82
01fe78 0061              .db     NFA|2, ">a",0
01fe79 ece2              ldi     zl, low(areg)
01fe7a e0f3              ldi     zh, high(areg)
01fe7b c007              rjmp    STORE_RAM_2
                 
01fe7c fcee              fdw     TO_A_L
                 STORE_L:
01fe7d 2181              .db     NFA|1, "!"
                 STORE:
01fe7e 3292              cpi     tosh, high(PEEPROM)
01fe7f f440              brcc    STORE1
                 STORE_RAM:
01fe80 01fc              movw    zl, tosl
01fe81 9189
01fe82 9199              poptos
                 STORE_RAM_2:
01fe83 8391              std     Z+1, tosh
01fe84 8380              std     Z+0, tosl
01fe85 9189
01fe86 9199              poptos
01fe87 9508              ret
                 STORE1:
01fe88 3392              cpi     tosh, high(OFLASH)
01fe89 f6e0              brcc    ISTORE
                 ESTORE:
01fe8a d015              rcall   LOCKEDQ
01fe8b 99f9              sbic    eecr, eewe
01fe8c cffd              rjmp    ESTORE
01fe8d 5292              subi    tosh, high(PEEPROM)
01fe8e bd81              out     eearl, tosl
01fe8f bd92              out     eearh, tosh
01fe90 9189
01fe91 9199              poptos
01fe92 bd80              out     eedr, tosl
01fe93 9afa              sbi     eecr, eemwe
01fe94 9af9              sbi     eecr, eewe
                 
                 ESTORE1:
01fe95 99f9              sbic    eecr, eewe
01fe96 cffe              rjmp    ESTORE1
                 
01fe97 b581              in      tosl, eearl
01fe98 9583              inc     tosl
01fe99 bd81              out     eearl, tosl
                 
01fe9a bd90              out     eedr, tosh
01fe9b 9afa              sbi     eecr, eemwe
01fe9c 9af9              sbi     eecr, eewe
                 
01fe9d 9189
01fe9e 9199              poptos
01fe9f 9508              ret
                 LOCKEDQ:
01fea0 ff62              sbrs    FLAGS1, fLOCK
01fea1 9508              ret
01fea2 da24              rcall   DOTS
01fea3 940f f1cc         call    XSQUOTE
01fea5 4103
01fea6 3f44              .db     3,"AD?"
01fea7 940f f1bf         call    TYPE
01fea9 cf66              rjmp    STARTQ2        ; goto    ABORT
                         
                 ;***********************************************************
                 IFETCH:
01feaa 01fc              movw    z, tosl
01feab 11fb              cpse    zh, ibaseh
01feac c00b              rjmp    IIFETCH
01fead 2f0e              mov     t0, zl
01feae 7000              andi    t0, ~(PAGESIZEB-1)
01feaf 150a              cp      t0, ibasel
01feb0 f439              brne    IIFETCH
01feb1 e0a0              ldi     xl, low(ibuf)
01feb2 e0b2              ldi     xh, high(ibuf)
01feb3 7fef              andi    zl, (PAGESIZEB-1)
01feb4 0fae              add     xl, zl
01feb5 918d              ld      tosl, x+
01feb6 919d              ld      tosh, x+
01feb7 9508              ret
                 IIFETCH:
                         sub_pflash_z
01feb8 9187              lpm_    tosl, z+     ; Fetch from Flash directly
01feb9 9197              lpm_    tosh, z+
                 .ifdef RAMPZ
01feba e003              ldi     t0, RAMPZV
01febb bf0b              out_    RAMPZ, t0
                 .endif
01febc 9508              ret
                                 
01febd fcfa              fdw     STORE_L
                 A_FROM_L:
01febe 6182
01febf 003e              .db     NFA|2, "a>",0
01fec0 939a
01fec1 938a              pushtos
01fec2 ece2              ldi     zl, low(areg)
01fec3 e0f3              ldi     zh, high(areg)
01fec4 c005              rjmp    FETCH_RAM_2
                 
01fec5 fd7c              fdw     A_FROM_L
                 FETCH_L:
01fec6 4081              .db     NFA|1, "@"
                 FETCH:
01fec7 3292              cpi     tosh, high(PEEPROM)
01fec8 f420              brcc    FETCH1
                 FETCH_RAM:
01fec9 01fc              movw    zl, tosl
                 FETCH_RAM_2:
01feca 9181              ld      tosl, z+
01fecb 9191              ld      tosh, z+
01fecc 9508              ret
                 FETCH1:
01fecd 3392              cpi     tosh, high(OFLASH)
01fece f6d8              brcc    IFETCH
                 EFETCH:
01fecf 99f9              sbic    eecr, eewe
01fed0 cffe              rjmp    EFETCH
01fed1 5292              subi    tosh, high(PEEPROM)
01fed2 bd81              out     eearl, tosl
01fed3 bd92              out     eearh, tosh
01fed4 9af8              sbi     eecr, eere
01fed5 b580              in      tosl, eedr
01fed6 b591              in      tosh, eearl
01fed7 9593              inc     tosh
01fed8 bd91              out     eearl, tosh
01fed9 9af8              sbi     eecr, eere
01feda b590              in      tosh, eedr
01fedb 9508              ret
                 
                 ICFETCH:
01fedc 01fc              movw    z, tosl
01fedd 11fb              cpse    zh, ibaseh
01fede c00b              rjmp    IICFETCH
01fedf 2f0e              mov     t0, zl
01fee0 7000              andi    t0, ~(PAGESIZEB-1)
01fee1 150a              cp      t0, ibasel
01fee2 f439              brne    IICFETCH
01fee3 e0a0              ldi     xl, low(ibuf)
01fee4 e0b2              ldi     xh, high(ibuf)
01fee5 7fef              andi    zl, (PAGESIZEB-1)
01fee6 0fae              add     xl, zl
01fee7 918d              ld      tosl, x+
01fee8 2799              clr     tosh
01fee9 9508              ret
                 IICFETCH:
                         sub_pflash_z
01feea 9187              lpm_    tosl, z+     ; Fetch from Flash directly
01feeb 2799              clr     tosh
                 .ifdef RAMPZ
01feec e003              ldi     t0, RAMPZV
01feed bf0b              out_    RAMPZ, t0
                 .endif
01feee 9508              ret
                 
01feef fd8c              fdw     FETCH_L
                 CFETCH_L:
01fef0 6382
01fef1 0040              .db     NFA|2, "c@",0
                 CFETCH:
01fef2 3292              cpi     tosh, high(PEEPROM)
01fef3 f420              brcc    CFETCH1
                 CFETCH_RAM:
01fef4 01fc              movw    zl, tosl
01fef5 9181              ld      tosl, z+
01fef6 2799              clr     tosh
01fef7 9508              ret
                 CFETCH1:
01fef8 3392              cpi     tosh, high(OFLASH)
01fef9 f710              brcc    ICFETCH
                 ECFETCH:
01fefa 99f9              sbic    eecr, eewe
01fefb cffe              rjmp    ECFETCH
01fefc 5292              subi    tosh, high(PEEPROM)
01fefd bd81              out     eearl, tosl
01fefe bd92              out     eearh, tosh
01feff 9af8              sbi     eecr, eere
01ff00 b580              in      tosl, eedr
01ff01 2799              clr     tosh
01ff02 9508              ret
                 
                 ICSTORE:
01ff03 df9c              rcall   LOCKEDQ
01ff04 de1d              rcall   IUPDATEBUF
01ff05 9189
01ff06 9199              poptos
01ff07 e0a0              ldi     xl, low(ibuf)
01ff08 e0b2              ldi     xh, high(ibuf)
01ff09 9100 03c4         lds     t0, iaddrl
01ff0b 7f0f              andi    t0, (PAGESIZEB-1)
01ff0c 0fa0              add     xl, t0
01ff0d 938d              st      x+, tosl
01ff0e 9189
01ff0f 9199              poptos
01ff10 6061              sbr     FLAGS1, (1<<idirty)
01ff11 9508              ret
                 
01ff12 fde0              fdw     CFETCH_L
                 CSTORE_L:
01ff13 6382
01ff14 0021              .db     NFA|2, "c!",0
                 CSTORE:
01ff15 3292              cpi     tosh, high(PEEPROM)
01ff16 f438              brcc    CSTORE1
                 CSTORE_RAM:
01ff17 01fc              movw zl, tosl
01ff18 9189
01ff19 9199              poptos
01ff1a 8380              std Z+0, tosl
01ff1b 9189
01ff1c 9199              poptos
01ff1d 9508              ret
                 CSTORE1:
01ff1e 3392              cpi     tosh, high(OFLASH)
01ff1f f718              brcc    ICSTORE
                 ECSTORE:
01ff20 df7f              rcall   LOCKEDQ
01ff21 99f9              sbic    eecr, eewe
01ff22 cffd              rjmp    ECSTORE
01ff23 5292              subi    tosh, high(PEEPROM)
01ff24 bd81              out     eearl, tosl
01ff25 bd92              out     eearh, tosh
01ff26 9189
01ff27 9199              poptos
01ff28 bd80              out     eedr, tosl
01ff29 9afa              sbi     eecr, eemwe
01ff2a 9af9              sbi     eecr, eewe
01ff2b 9189
01ff2c 9199              poptos
01ff2d 9508              ret
                 
                 ;;; Disable writes to flash and eeprom
01ff2e fe26              fdw     CSTORE_L
                 
                 FLOCK_L:
01ff2f 6683
01ff30 2d6c              .db     NFA|3,"fl-"
01ff31 6064              sbr     FLAGS1, (1<<fLOCK)
01ff32 9508              ret
                 
                 ;;; Enable writes to flash and eeprom
01ff33 fe5e              fdw     FLOCK_L
                 FUNLOCK_L:
01ff34 6683
01ff35 2b6c              .db     NFA|3,"fl+"
01ff36 7f6b              cbr     FLAGS1, (1<<fLOCK)
01ff37 9508              ret
                 
                 
                 
01ff38 fe68              fdw     FUNLOCK_L
                 VALUE_L:
01ff39 7685
01ff3a 6c61
01ff3b 6575              .db     NFA|5,"value"
                 VALUE:
01ff3c d842              rcall   CREATE
01ff3d 940f f0c0         call    COMMA
01ff3f d88f              rcall   XDOES
                 VALUE_DOES:
01ff40 940f f04e         call    DODOES
01ff42 940d fec7         jmp     FETCH
                 
01ff44 fe72              fdw     VALUE_L
                 DEFER_L:
01ff45 6485
01ff46 6665
01ff47 7265              .db     NFA|5,"defer"
                 DEFER:
01ff48 d836              rcall   CREATE
01ff49 940f f72a         call    DOLIT
01ff4b ee08              fdw     ABORT
01ff4c 940f f0c0         call    COMMA
01ff4e d880              rcall   XDOES
                 DEFER_DOES:
01ff4f 940f f04e         call    DODOES
01ff51 940d f00f         jmp     FEXECUTE
                 
01ff53 fe8a              fdw     DEFER_L
                 IS_L:
01ff54 69c2
01ff55 0073              .db     NFA|IMMED|2,"is",0
                 IS:
01ff56 940f f749         call    TICK
01ff58 940f f294         call    TWOPLUS
01ff5a 940f f294         call    TWOPLUS
01ff5c df6a              rcall   FETCH
01ff5d d8ef              rcall   STATE_
01ff5e 940f f33a         call    ZEROSENSE
01ff60 f029              breq    IS1
01ff61 def0              rcall   LITERAL
01ff62 940f f060         call    DOCOMMAXT
01ff64 fcfc              fdw     STORE
01ff65 c001              rjmp    IS2
                 IS1:
01ff66 df17              rcall   STORE
                 IS2:
01ff67 9508              ret
                 
01ff68 fea8              fdw     IS_L
                 TO_L:
01ff69 74c2
01ff6a 006f              .db     NFA|IMMED|2,"to",0
                 TO:
01ff6b 940d ff56         jmp     IS
                 
01ff6d fed2              fdw     TO_L
                 TURNKEY_L:
01ff6e 7487
01ff6f 7275
01ff70 6b6e
01ff71 7965              .db     NFA|7,"turnkey"
                 TURNKEY:
01ff72 940f ff40         call    VALUE_DOES      ; Must be call for IS to work.
01ff74 03b8              .dw     dpSTART
                 
                 
                 ;;; *******************************************************
                 ; PAUSE  --     switch task
01ff75 fedc              fdw     TURNKEY_L
                 PAUSE_L:
01ff76 7085
01ff77 7561
01ff78 6573              .db     NFA|5,"pause"
                 PAUSE:
                 .if IDLE_MODE == 1
01ff79 dc1e              rcall   IDLE_LOAD
                 .endif
01ff7a b71f              in_     t1, SREG
01ff7b 94f8              cli
01ff7c 93df              push    yh        ; SP
01ff7d 93cf              push    yl
01ff7e 939f              push    tosh      ; TOS
01ff7f 938f              push    tosl
01ff80 935f              push    ph        ; P
01ff81 934f              push    pl
01ff82 01f1              movw    zl, upl
01ff83 b70e              in      t0, sph
01ff84 9302              st      -z, t0
01ff85 b70d              in      t0, spl
01ff86 9302              st      -z, t0
01ff87 91b2              ld      xh, -z     ; UP
01ff88 91a2              ld      xl, -z
01ff89 011d              movw    upl, xl
01ff8a 910e              ld      t0, -x
01ff8b bf0e              out     sph, t0
01ff8c 910e              ld      t0, -x
01ff8d bf0d              out     spl, t0
01ff8e 914f              pop     pl
01ff8f 915f              pop     ph
01ff90 918f              pop     tosl
01ff91 919f              pop     tosh
01ff92 91cf              pop     yl
01ff93 91df              pop     yh
01ff94 bf1f              out_    SREG, t1
01ff95 9508              ret
                 
                 
01ff96 faf8              fdw     IFLUSH_L
                 OPERATOR_L:
01ff97 6f88
01ff98 6570
01ff99 6172
01ff9a 6f74
01ff9b 0072              .db     NFA|8,"operator",0
                 OPERATOR:
01ff9c 940f f044         call    DOCREATE
01ff9e ff3e              fdw     OPERATOR_AREA
                 OPERATOR_AREA:
01ff9f 03ea              .dw     up0
01ffa0 6000              .db     0, ursize
01ffa1 6040              .db     ussize, utibsize
                 
01ffa2 ff2e              fdw     OPERATOR_L
                 ICOMMA_L:
01ffa3 6982
01ffa4 002c              .db     NFA|2, "i,",0
                 ICOMMA:
01ffa5 940f f762         call    IHERE
01ffa7 ded6              rcall   STORE
01ffa8 940f f0d1         call    CELL
01ffaa 940d f908         jmp     IALLOT
                 
                 
                 ;   IHERE ! 1 CHARS IALLOT ;
01ffac ff46              fdw     ICOMMA_L
                 ICCOMMA_L:
01ffad 6983
01ffae 2c63              .db     NFA|3,"ic,"
                 ICCOMMA:
01ffaf 940f f762         call    IHERE
01ffb1 df63              rcall   CSTORE
01ffb2 940f f178         call    ONE
01ffb4 940d f908         jmp     IALLOT
                 
                 L_DOTBASE:
01ffb6 2081              .db      NFA|1," "
                 DOTBASE:
01ffb7 940f f455         call    BASE
01ffb9 df0d              rcall   FETCH
01ffba 3180              cpi     tosl, 0x10
01ffbb f411              brne    DOTBASE1
01ffbc e284              ldi     tosl,'$'
01ffbd c009              rjmp    DOTBASEEND
                 DOTBASE1:
01ffbe 308a              cpi     tosl, 0xa
01ffbf f411              brne    DOTBASE2
01ffc0 e283              ldi     tosl, '#'
01ffc1 c005              rjmp    DOTBASEEND
                 DOTBASE2:
01ffc2 3082              cpi     tosl, 0x2
01ffc3 f411              brne    DOTBASE3
01ffc4 e285              ldi     tosl, '%'
01ffc5 c001              rjmp    DOTBASEEND
                 DOTBASE3:
01ffc6 e38f              ldi     tosl, '?'
                 DOTBASEEND:
01ffc7 9508              ret
                 
                 MEMQADDR_N:
01ffc8 e126              fdw     ROM_N
01ffc9 e134              fdw     EROM_N
01ffca e144              fdw     FRAM_N
                 ; M? -- caddr count    current data space string
                 ;        dw      L_DOTBASE
                 L_MEMQ:
01ffcb 2081              .db     NFA|1," "
                 MEMQ:
01ffcc 940f f0b1         call    CSE_
01ffce 940f f72a         call    DOLIT
01ffd0 ff90              fdw     MEMQADDR_N
01ffd1 940f f24c         call    PLUS
01ffd3 940f f66a         call    FETCH_A
01ffd5 940f f4d0         call    CFETCHPP
01ffd7 940f f72a         call    DOLIT
01ffd9 000f              .dw     NFAmask
01ffda 940d f262         jmp     AND_
                 
                 ;*******************************************************
                 umstar0:
01ffdc 920f              push t2
01ffdd 921f              push t3
01ffde 9109              ld  t0, Y+
01ffdf 9119              ld  t1, Y+
01ffe0 9f80              mul tosl,t0
01ffe1 01d0              movw t4, r0 ; r0=t2, r1=t3
01ffe2 27ee              clr t6
01ffe3 27ff              clr t7
01ffe4 9f90              mul tosh, t0
01ffe5 0db0              add t5, r0
01ffe6 1de1              adc t6, r1
01ffe7 1df5              adc t7, zero
01ffe8 9f81              mul tosl, t1
01ffe9 0db0              add t5, r0
01ffea 1de1              adc t6, r1
01ffeb 1df5              adc t7, zero
01ffec 9f91              mul tosh, t1
01ffed 0de0              add t6, r0
01ffee 1df1              adc t7, r1
01ffef 93ba              st -Y, t5
01fff0 93aa              st -Y, t4
01fff1 01cf              movw tosl, t6
01fff2 901f              pop t3
01fff3 900f              pop t2
01fff4 9508              ret
                 
                 ;;; *************************************
                 ;;; EMPTY dictionary data
                 .equ coldlitsize=12
                 ;.section user_eedata
                 COLDLIT:
01fff5 0000      STARTV: .dw      0
01fff6 3200      DPC:    .dw      OFLASH
01fff7 220c      DPE:    .dw      ehere
01fff8 04ec      DPD:    .dw      dpdata
01fff9 f584      LW:     fdw      lastword
01fffa ed1c      STAT:   fdw      DOTSTATUS
                 ;*******************************************************************
                 ; BOOT sector END **************************************************
                 
                 KERNEL_END:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega2560 register use summary:
r0 :  16 r1 :  17 r2 :   5 r3 :   1 r4 :   3 r5 :  20 r6 :   8 r7 :   7 
r8 :   4 r9 :   4 r10:   6 r11:   5 r12:   3 r13:   3 r14:   3 r15:   2 
r16: 143 r17:  52 r18:   0 r19:   0 r20:  14 r21:   7 r22:  34 r23:  25 
r24: 224 r25: 180 r26:  82 r27:  49 r28:   9 r29:   5 r30:  78 r31:  67 
x  :  17 y  : 189 z  :  36 
Registers used: 33 out of 35 (94.3%)

ATmega2560 instruction use summary:
.lds  :   0 .sts  :   0 adc   :  20 add   :  19 adiw  :   9 and   :   3 
andi  :  22 asr   :   2 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :  20 brcs  :   1 break :   0 breq  :  47 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   7 
brne  :  39 brpl  :   1 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   4 bst   :   0 call  :  93 cbi   :   3 cbr   :  23 
clc   :   0 clh   :   0 cli   :   8 cln   :   0 clr   :  25 cls   :   0 
clt   :   1 clv   :   0 clz   :   0 com   :   7 cp    :   4 cpc   :   2 
cpi   :  27 cpse  :   7 dec   :   4 eicall:   0 eijmp :  14 elpm  :   9 
eor   :   2 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  20 inc   :   9 jmp   : 165 ld    : 132 ldd   :   2 ldi   :  79 
lds   :  30 lpm   :   0 lsl   :  11 lsr   :   2 mov   :  14 movw  :  38 
mul   :   4 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   7 
ori   :   7 out   :  37 pop   : 101 push  :  29 rcall :1020 ret   : 131 
reti  :   1 rjmp  : 104 rol   :  15 ror   :  18 sbc   :   2 sbci  :   3 
sbi   :  11 sbic  :   5 sbis  :   0 sbiw  :   8 sbr   :  21 sbrc  :  15 
sbrs  :  19 sec   :   0 seh   :   0 sei   :   3 sen   :   0 ser   :   6 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   1 spm   :   2 
st    :  88 std   :   3 sts   :  35 sub   :   2 subi  :  12 swap  :   2 
tst   :   4 wdr   :   0 
Instructions used: 71 out of 116 (61.2%)

ATmega2560 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x03de00 0x03fff6   5928   2518   8446  262144   3.2%
[.dseg] 0x000200 0x0004ee      0    750    750    8192   9.2%
[.eseg] 0x000000 0x000002      0      2      2    4096   0.0%

Assembly complete, 0 errors, 8 warnings
