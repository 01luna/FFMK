
AVRASM ver. 2.1.30  avr/src/ff-atmega.asm Wed Mar 22 22:14:14 2017

avr/src/ff-atmega.asm(34): Including file 'avr/src/config.inc'
avr/src/config.inc(5): Including file 'avrasm2/inc\m2560def.inc'
avr/src/ff-atmega.asm(78): warning: Register r26 already defined by the .DEF directive
avr/src/ff-atmega.asm(79): warning: Register r27 already defined by the .DEF directive
avr/src/ff-atmega.asm(80): warning: Register r30 already defined by the .DEF directive
avr/src/ff-atmega.asm(81): warning: Register r31 already defined by the .DEF directive
avr/src/ff-atmega.asm(244): warning: Use of undefined or forward referenced symbol 'TX0_' in .equ/.set
avr/src/ff-atmega.asm(245): warning: Use of undefined or forward referenced symbol 'RX0_' in .equ/.set
avr/src/ff-atmega.asm(246): warning: Use of undefined or forward referenced symbol 'RX0Q' in .equ/.set
                 
                 
                 ;                                                                     *
                 ;    Filename:      FlashForth.asm                                    *
                 ;    Date:          22.03.2017                                        *
                 ;    File Version:  5.0                                               *
                 ;    MCU:           Atmega                                            *
                 ;    Copyright:     Mikael Nordman                                    *
                 ;    Author:        Mikael Nordman                                    *
                 ;                                                                     * 
                 ;**********************************************************************
                 ; FlashForth is a standalone Forth system for microcontrollers that
                 ; can flash their own flash memory.
                 ;
                 ; Copyright (C) 2017  Mikael Nordman
                 
                 ; This program is free software: you can redistribute it and/or modify
                 ; it under the terms of the GNU General Public License version 3 as 
                 ; published by the Free Software Foundation.
                 ;
                 ; This program is distributed in the hope that it will be useful,
                 ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                 ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 ; GNU General Public License for more details.
                 ;
                 ; You should have received a copy of the GNU General Public License
                 ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                 ;
                 ; Modified versions of FlashForth must be clearly marked as such, 
                 ; in the name of this file, and in the identification
                 ; displayed when FlashForth starts.
                 ;**********************************************************************
                 
                 ; Include the FlashForth configuration file
                 .include "config.inc"
                 
                 
                 ; Select the include file for your micro controller
                 ;.include "m2561def.inc"  ; 
                 .include "m2560def.inc"  ; Tested     Fuses: E:0xff H:0xdc L:0xff
                 
                 ;***** Created: 2008-11-07 12:39 ******* Source: ATmega2560.xml **********
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m2560def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega2560
                 ;* Date              : 2008-11-07
                 ;* Version           : 2.31
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega2560
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M2560DEF_INC_
                 #define _M2560DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega2560
                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x98
                 .equ	SIGNATURE_002	= 0x01
                 
                 #pragma AVRPART CORE CORE_VERSION V3
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                 .equ	PINL	= 0x109	; MEMORY MAPPED
                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                 .equ	PINK	= 0x106	; MEMORY MAPPED
                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                 .equ	PINH	= 0x100	; MEMORY MAPPED
                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	EIND	= 0x3c
                 .equ	RAMPZ	= 0x3b
                 .equ	SPMCSR	= 0x37
                 .equ	MCUCR	= 0x35
                 .equ	MCUSR	= 0x34
                 .equ	SMCR	= 0x33
                 .equ	OCDR	= 0x31
                 .equ	ACSR	= 0x30
                 .equ	SPDR	= 0x2e
                 .equ	SPSR	= 0x2d
                 .equ	SPCR	= 0x2c
                 .equ	GPIOR2	= 0x2b
                 .equ	GPIOR1	= 0x2a
                 .equ	OCR0B	= 0x28
                 .equ	OCR0A	= 0x27
                 .equ	TCNT0	= 0x26
                 .equ	TCCR0B	= 0x25
                 .equ	TCCR0A	= 0x24
                 .equ	GTCCR	= 0x23
                 .equ	EEARH	= 0x22
                 .equ	EEARL	= 0x21
                 .equ	EEDR	= 0x20
                 .equ	EECR	= 0x1f
                 .equ	GPIOR0	= 0x1e
                 .equ	EIMSK	= 0x1d
                 .equ	EIFR	= 0x1c
                 .equ	PCIFR	= 0x1b
                 .equ	TIFR5	= 0x1a
                 .equ	TIFR4	= 0x19
                 .equ	TIFR3	= 0x18
                 .equ	TIFR2	= 0x17
                 .equ	TIFR1	= 0x16
                 .equ	TIFR0	= 0x15
                 .equ	PORTG	= 0x14
                 .equ	DDRG	= 0x13
                 .equ	PING	= 0x12
                 .equ	PORTF	= 0x11
                 .equ	DDRF	= 0x10
                 .equ	PINF	= 0x0f
                 .equ	PORTE	= 0x0e
                 .equ	DDRE	= 0x0d
                 .equ	PINE	= 0x0c
                 .equ	PORTD	= 0x0b
                 .equ	DDRD	= 0x0a
                 .equ	PIND	= 0x09
                 .equ	PORTC	= 0x08
                 .equ	DDRC	= 0x07
                 .equ	PINC	= 0x06
                 .equ	PORTB	= 0x05
                 .equ	DDRB	= 0x04
                 .equ	PINB	= 0x03
                 .equ	PORTA	= 0x02
                 .equ	DDRA	= 0x01
                 .equ	PINA	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; ADCSRB - ADC Control and Status Register B
                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 ; DIDR1 - Digital Input Disable Register 1
                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                 
                 
                 ; ***** USART0 ***********************
                 ; UDR0 - USART I/O Data Register
                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR0A - USART Control and Status Register A
                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                 .equ	U2X0	= 1	; Double the USART transmission speed
                 .equ	UPE0	= 2	; Parity Error
                 .equ	DOR0	= 3	; Data overRun
                 .equ	FE0	= 4	; Framing Error
                 .equ	UDRE0	= 5	; USART Data Register Empty
                 .equ	TXC0	= 6	; USART Transmitt Complete
                 .equ	RXC0	= 7	; USART Receive Complete
                 
                 ; UCSR0B - USART Control and Status Register B
                 .equ	TXB80	= 0	; Transmit Data Bit 8
                 .equ	RXB80	= 1	; Receive Data Bit 8
                 .equ	UCSZ02	= 2	; Character Size
                 .equ	TXEN0	= 3	; Transmitter Enable
                 .equ	RXEN0	= 4	; Receiver Enable
                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR0C - USART Control and Status Register C
                 .equ	UCPOL0	= 0	; Clock Polarity
                 .equ	UCSZ00	= 1	; Character Size
                 .equ	UCPHA0	= UCSZ00	; For compatibility
                 .equ	UCSZ01	= 2	; Character Size
                 .equ	UDORD0	= UCSZ01	; For compatibility
                 .equ	USBS0	= 3	; Stop Bit Select
                 .equ	UPM00	= 4	; Parity Mode Bit 0
                 .equ	UPM01	= 5	; Parity Mode Bit 1
                 .equ	UMSEL00	= 6	; USART Mode Select
                 .equ	UMSEL0	= UMSEL00	; For compatibility
                 .equ	UMSEL01	= 7	; USART Mode Select
                 .equ	UMSEL1	= UMSEL01	; For compatibility
                 
                 ; UBRR0H - USART Baud Rate Register High Byte
                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR0L - USART Baud Rate Register Low Byte
                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 ; ***** TWI **************************
                 ; TWAMR - TWI (Slave) Address Mask Register
                 .equ	TWAM0	= 1	; 
                 .equ	TWAMR0	= TWAM0	; For compatibility
                 .equ	TWAM1	= 2	; 
                 .equ	TWAMR1	= TWAM1	; For compatibility
                 .equ	TWAM2	= 3	; 
                 .equ	TWAMR2	= TWAM2	; For compatibility
                 .equ	TWAM3	= 4	; 
                 .equ	TWAMR3	= TWAM3	; For compatibility
                 .equ	TWAM4	= 5	; 
                 .equ	TWAMR4	= TWAM4	; For compatibility
                 .equ	TWAM5	= 6	; 
                 .equ	TWAMR5	= TWAM5	; For compatibility
                 .equ	TWAM6	= 7	; 
                 .equ	TWAMR6	= TWAM6	; For compatibility
                 
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                 .equ	PA3	= 3	; For compatibility
                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                 .equ	PA4	= 4	; For compatibility
                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                 .equ	PA5	= 5	; For compatibility
                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                 .equ	PA6	= 6	; For compatibility
                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                 .equ	PA7	= 7	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                 .equ	PC7	= 7	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** PORTE ************************
                 ; PORTE - Data Register, Port E
                 .equ	PORTE0	= 0	; 
                 .equ	PE0	= 0	; For compatibility
                 .equ	PORTE1	= 1	; 
                 .equ	PE1	= 1	; For compatibility
                 .equ	PORTE2	= 2	; 
                 .equ	PE2	= 2	; For compatibility
                 .equ	PORTE3	= 3	; 
                 .equ	PE3	= 3	; For compatibility
                 .equ	PORTE4	= 4	; 
                 .equ	PE4	= 4	; For compatibility
                 .equ	PORTE5	= 5	; 
                 .equ	PE5	= 5	; For compatibility
                 .equ	PORTE6	= 6	; 
                 .equ	PE6	= 6	; For compatibility
                 .equ	PORTE7	= 7	; 
                 .equ	PE7	= 7	; For compatibility
                 
                 ; DDRE - Data Direction Register, Port E
                 .equ	DDE0	= 0	; 
                 .equ	DDE1	= 1	; 
                 .equ	DDE2	= 2	; 
                 .equ	DDE3	= 3	; 
                 .equ	DDE4	= 4	; 
                 .equ	DDE5	= 5	; 
                 .equ	DDE6	= 6	; 
                 .equ	DDE7	= 7	; 
                 
                 ; PINE - Input Pins, Port E
                 .equ	PINE0	= 0	; 
                 .equ	PINE1	= 1	; 
                 .equ	PINE2	= 2	; 
                 .equ	PINE3	= 3	; 
                 .equ	PINE4	= 4	; 
                 .equ	PINE5	= 5	; 
                 .equ	PINE6	= 6	; 
                 .equ	PINE7	= 7	; 
                 
                 
                 ; ***** PORTF ************************
                 ; PORTF - Data Register, Port F
                 .equ	PORTF0	= 0	; 
                 .equ	PF0	= 0	; For compatibility
                 .equ	PORTF1	= 1	; 
                 .equ	PF1	= 1	; For compatibility
                 .equ	PORTF2	= 2	; 
                 .equ	PF2	= 2	; For compatibility
                 .equ	PORTF3	= 3	; 
                 .equ	PF3	= 3	; For compatibility
                 .equ	PORTF4	= 4	; 
                 .equ	PF4	= 4	; For compatibility
                 .equ	PORTF5	= 5	; 
                 .equ	PF5	= 5	; For compatibility
                 .equ	PORTF6	= 6	; 
                 .equ	PF6	= 6	; For compatibility
                 .equ	PORTF7	= 7	; 
                 .equ	PF7	= 7	; For compatibility
                 
                 ; DDRF - Data Direction Register, Port F
                 .equ	DDF0	= 0	; 
                 .equ	DDF1	= 1	; 
                 .equ	DDF2	= 2	; 
                 .equ	DDF3	= 3	; 
                 .equ	DDF4	= 4	; 
                 .equ	DDF5	= 5	; 
                 .equ	DDF6	= 6	; 
                 .equ	DDF7	= 7	; 
                 
                 ; PINF - Input Pins, Port F
                 .equ	PINF0	= 0	; 
                 .equ	PINF1	= 1	; 
                 .equ	PINF2	= 2	; 
                 .equ	PINF3	= 3	; 
                 .equ	PINF4	= 4	; 
                 .equ	PINF5	= 5	; 
                 .equ	PINF6	= 6	; 
                 .equ	PINF7	= 7	; 
                 
                 
                 ; ***** PORTG ************************
                 ; PORTG - Data Register, Port G
                 .equ	PORTG0	= 0	; 
                 .equ	PG0	= 0	; For compatibility
                 .equ	PORTG1	= 1	; 
                 .equ	PG1	= 1	; For compatibility
                 .equ	PORTG2	= 2	; 
                 .equ	PG2	= 2	; For compatibility
                 .equ	PORTG3	= 3	; 
                 .equ	PG3	= 3	; For compatibility
                 .equ	PORTG4	= 4	; 
                 .equ	PG4	= 4	; For compatibility
                 .equ	PORTG5	= 5	; 
                 .equ	PG5	= 5	; For compatibility
                 
                 ; DDRG - Data Direction Register, Port G
                 .equ	DDG0	= 0	; 
                 .equ	DDG1	= 1	; 
                 .equ	DDG2	= 2	; 
                 .equ	DDG3	= 3	; 
                 .equ	DDG4	= 4	; 
                 .equ	DDG5	= 5	; 
                 
                 ; PING - Input Pins, Port G
                 .equ	PING0	= 0	; 
                 .equ	PING1	= 1	; 
                 .equ	PING2	= 2	; 
                 .equ	PING3	= 3	; 
                 .equ	PING4	= 4	; 
                 .equ	PING5	= 5	; 
                 
                 
                 ; ***** PORTH ************************
                 ; PORTH - PORT H Data Register
                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                 .equ	PH0	= 0	; For compatibility
                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                 .equ	PH1	= 1	; For compatibility
                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                 .equ	PH2	= 2	; For compatibility
                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                 .equ	PH3	= 3	; For compatibility
                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                 .equ	PH4	= 4	; For compatibility
                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                 .equ	PH5	= 5	; For compatibility
                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                 .equ	PH6	= 6	; For compatibility
                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                 .equ	PH7	= 7	; For compatibility
                 
                 ; DDRH - PORT H Data Direction Register
                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                 
                 ; PINH - PORT H Input Pins
                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                 
                 
                 ; ***** PORTJ ************************
                 ; PORTJ - PORT J Data Register
                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                 .equ	PJ0	= 0	; For compatibility
                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                 .equ	PJ1	= 1	; For compatibility
                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                 .equ	PJ2	= 2	; For compatibility
                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                 .equ	PJ3	= 3	; For compatibility
                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                 .equ	PJ4	= 4	; For compatibility
                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                 .equ	PJ5	= 5	; For compatibility
                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                 .equ	PJ6	= 6	; For compatibility
                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                 .equ	PJ7	= 7	; For compatibility
                 
                 ; DDRJ - PORT J Data Direction Register
                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                 
                 ; PINJ - PORT J Input Pins
                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                 
                 
                 ; ***** PORTK ************************
                 ; PORTK - PORT K Data Register
                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                 .equ	PK0	= 0	; For compatibility
                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                 .equ	PK1	= 1	; For compatibility
                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                 .equ	PK2	= 2	; For compatibility
                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                 .equ	PK3	= 3	; For compatibility
                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                 .equ	PK4	= 4	; For compatibility
                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                 .equ	PK5	= 5	; For compatibility
                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                 .equ	PK6	= 6	; For compatibility
                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                 .equ	PK7	= 7	; For compatibility
                 
                 ; DDRK - PORT K Data Direction Register
                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                 
                 ; PINK - PORT K Input Pins
                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                 
                 
                 ; ***** PORTL ************************
                 ; PORTL - PORT L Data Register
                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                 .equ	PL0	= 0	; For compatibility
                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                 .equ	PL1	= 1	; For compatibility
                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                 .equ	PL2	= 2	; For compatibility
                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                 .equ	PL3	= 3	; For compatibility
                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                 .equ	PL4	= 4	; For compatibility
                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                 .equ	PL5	= 5	; For compatibility
                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                 .equ	PL6	= 6	; For compatibility
                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                 .equ	PL7	= 7	; For compatibility
                 
                 ; DDRL - PORT L Data Direction Register
                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                 
                 ; PINL - PORT L Input Pins
                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                 
                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                 
                 ; TCCR0A - Timer/Counter  Control Register A
                 .equ	WGM00	= 0	; Waveform Generation Mode
                 .equ	WGM01	= 1	; Waveform Generation Mode
                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                 
                 ; TCCR0B - Timer/Counter Control Register B
                 .equ	CS00	= 0	; Clock Select
                 .equ	CS01	= 1	; Clock Select
                 .equ	CS02	= 2	; Clock Select
                 .equ	WGM02	= 3	; 
                 .equ	FOC0B	= 6	; Force Output Compare B
                 .equ	FOC0A	= 7	; Force Output Compare A
                 
                 ; TCNT0 - Timer/Counter0
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0A - Timer/Counter0 Output Compare Register
                 .equ	OCROA_0	= 0	; 
                 .equ	OCROA_1	= 1	; 
                 .equ	OCROA_2	= 2	; 
                 .equ	OCROA_3	= 3	; 
                 .equ	OCROA_4	= 4	; 
                 .equ	OCROA_5	= 5	; 
                 .equ	OCROA_6	= 6	; 
                 .equ	OCROA_7	= 7	; 
                 
                 ; OCR0B - Timer/Counter0 Output Compare Register
                 .equ	OCR0B_0	= 0	; 
                 .equ	OCR0B_1	= 1	; 
                 .equ	OCR0B_2	= 2	; 
                 .equ	OCR0B_3	= 3	; 
                 .equ	OCR0B_4	= 4	; 
                 .equ	OCR0B_5	= 5	; 
                 .equ	OCR0B_6	= 6	; 
                 .equ	OCR0B_7	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	PSR10	= PSRSYNC	; For compatibility
                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	TOIE2A	= TOIE2	; For compatibility
                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                 
                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                 
                 ; TCCR2A - Timer/Counter2 Control Register A
                 .equ	WGM20	= 0	; Waveform Genration Mode
                 .equ	WGM21	= 1	; Waveform Genration Mode
                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                 
                 ; TCCR2B - Timer/Counter2 Control Register B
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM22	= 3	; Waveform Generation Mode
                 .equ	FOC2B	= 6	; Force Output Compare B
                 .equ	FOC2A	= 7	; Force Output Compare A
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2A - Timer/Counter2 Output Compare Register A
                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; OCR2B - Timer/Counter2 Output Compare Register B
                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                 .equ	EXCLK	= 6	; Enable External Clock Input
                 
                 ; GTCCR - General Timer Counter Control register
                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PSR2	= PSRASY	; For compatibility
                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCSR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDCE	= 4	; Watchdog Change Enable
                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                 
                 
                 ; ***** USART1 ***********************
                 ; UDR1 - USART I/O Data Register
                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR1A - USART Control and Status Register A
                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                 .equ	U2X1	= 1	; Double the USART transmission speed
                 .equ	UPE1	= 2	; Parity Error
                 .equ	DOR1	= 3	; Data overRun
                 .equ	FE1	= 4	; Framing Error
                 .equ	UDRE1	= 5	; USART Data Register Empty
                 .equ	TXC1	= 6	; USART Transmitt Complete
                 .equ	RXC1	= 7	; USART Receive Complete
                 
                 ; UCSR1B - USART Control and Status Register B
                 .equ	TXB81	= 0	; Transmit Data Bit 8
                 .equ	RXB81	= 1	; Receive Data Bit 8
                 .equ	UCSZ12	= 2	; Character Size
                 .equ	TXEN1	= 3	; Transmitter Enable
                 .equ	RXEN1	= 4	; Receiver Enable
                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR1C - USART Control and Status Register C
                 .equ	UCPOL1	= 0	; Clock Polarity
                 .equ	UCSZ10	= 1	; Character Size
                 .equ	UCPHA1	= UCSZ10	; For compatibility
                 .equ	UCSZ11	= 2	; Character Size
                 .equ	UDORD1	= UCSZ11	; For compatibility
                 .equ	USBS1	= 3	; Stop Bit Select
                 .equ	UPM10	= 4	; Parity Mode Bit 0
                 .equ	UPM11	= 5	; Parity Mode Bit 1
                 .equ	UMSEL10	= 6	; USART Mode Select
                 .equ	UMSEL11	= 7	; USART Mode Select
                 
                 ; UBRR1H - USART Baud Rate Register High Byte
                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR1L - USART Baud Rate Register Low Byte
                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEARH - EEPROM Address Register Low Byte
                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                 
                 ; EEARL - EEPROM Address Register Low Byte
                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                 
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEPE	= 1	; EEPROM Write Enable
                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                 
                 
                 ; ***** TIMER_COUNTER_5 **************
                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                 
                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                 .equ	ICF5	= 5	; Input Capture Flag 5
                 
                 ; TCCR5A - Timer/Counter5 Control Register A
                 .equ	WGM50	= 0	; Waveform Generation Mode
                 .equ	WGM51	= 1	; Waveform Generation Mode
                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR5B - Timer/Counter5 Control Register B
                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                 .equ	WGM52	= 3	; Waveform Generation Mode
                 .equ	WGM53	= 4	; Waveform Generation Mode
                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                 
                 ; TCCR5C - Timer/Counter 5 Control Register C
                 .equ	FOC5C	= 5	; Force Output Compare 5C
                 .equ	FOC5B	= 6	; Force Output Compare 5B
                 .equ	FOC5A	= 7	; Force Output Compare 5A
                 
                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                 
                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                 
                 
                 ; ***** TIMER_COUNTER_4 **************
                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                 
                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                 .equ	ICF4	= 5	; Input Capture Flag 4
                 
                 ; TCCR4A - Timer/Counter4 Control Register A
                 .equ	WGM40	= 0	; Waveform Generation Mode
                 .equ	WGM41	= 1	; Waveform Generation Mode
                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR4B - Timer/Counter4 Control Register B
                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                 .equ	WGM42	= 3	; Waveform Generation Mode
                 .equ	WGM43	= 4	; Waveform Generation Mode
                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                 
                 ; TCCR4C - Timer/Counter 4 Control Register C
                 .equ	FOC4C	= 5	; Force Output Compare 4C
                 .equ	FOC4B	= 6	; Force Output Compare 4B
                 .equ	FOC4A	= 7	; Force Output Compare 4A
                 
                 
                 ; ***** TIMER_COUNTER_3 **************
                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                 
                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                 .equ	ICF3	= 5	; Input Capture Flag 3
                 
                 ; TCCR3A - Timer/Counter3 Control Register A
                 .equ	WGM30	= 0	; Waveform Generation Mode
                 .equ	WGM31	= 1	; Waveform Generation Mode
                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR3B - Timer/Counter3 Control Register B
                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                 .equ	WGM32	= 3	; Waveform Generation Mode
                 .equ	WGM33	= 4	; Waveform Generation Mode
                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                 
                 ; TCCR3C - Timer/Counter 3 Control Register C
                 .equ	FOC3C	= 5	; Force Output Compare 3C
                 .equ	FOC3B	= 6	; Force Output Compare 3B
                 .equ	FOC3A	= 7	; Force Output Compare 3A
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 ; TCCR1C - Timer/Counter 1 Control Register C
                 .equ	FOC1C	= 5	; Force Output Compare 1C
                 .equ	FOC1B	= 6	; Force Output Compare 1B
                 .equ	FOC1A	= 7	; Force Output Compare 1A
                 
                 
                 ; ***** JTAG *************************
                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                 .equ	IDRD	= OCDR7	; For compatibility
                 
                 ; MCUCR - MCU Control Register
                 .equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; MCUSR - MCU Status Register
                 .equ	JTRF	= 4	; JTAG Reset Flag
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; EICRA - External Interrupt Control Register A
                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                 
                 ; EICRB - External Interrupt Control Register B
                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                 
                 ; EIMSK - External Interrupt Mask Register
                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                 
                 ; EIFR - External Interrupt Flag Register
                 .equ	INTF0	= 0	; External Interrupt Flag 0
                 .equ	INTF1	= 1	; External Interrupt Flag 1
                 .equ	INTF2	= 2	; External Interrupt Flag 2
                 .equ	INTF3	= 3	; External Interrupt Flag 3
                 .equ	INTF4	= 4	; External Interrupt Flag 4
                 .equ	INTF5	= 5	; External Interrupt Flag 5
                 .equ	INTF6	= 6	; External Interrupt Flag 6
                 .equ	INTF7	= 7	; External Interrupt Flag 7
                 
                 ; PCICR - Pin Change Interrupt Control Register
                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                 
                 ; PCIFR - Pin Change Interrupt Flag Register
                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                 
                 ; PCMSK2 - Pin Change Mask Register 2
                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                 
                 ; PCMSK1 - Pin Change Mask Register 1
                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                 
                 ; PCMSK0 - Pin Change Mask Register 0
                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	PUD	= 4	; Pull-up disable
                 ;.equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; MCUSR - MCU Status Register
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                 
                 ; XMCRA - External Memory Control Register A
                 .equ	SRW00	= 0	; Wait state select bit lower page
                 .equ	SRW01	= 1	; Wait state select bit lower page
                 .equ	SRW10	= 2	; Wait state select bit upper page
                 .equ	SRW11	= 3	; Wait state select bit upper page
                 .equ	SRL0	= 4	; Wait state page limit
                 .equ	SRL1	= 5	; Wait state page limit
                 .equ	SRL2	= 6	; Wait state page limit
                 .equ	SRE	= 7	; External SRAM Enable
                 
                 ; XMCRB - External Memory Control Register B
                 .equ	XMM0	= 0	; External Memory High Mask
                 .equ	XMM1	= 1	; External Memory High Mask
                 .equ	XMM2	= 2	; External Memory High Mask
                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; CLKPR - 
                 .equ	CLKPS0	= 0	; 
                 .equ	CLKPS1	= 1	; 
                 .equ	CLKPS2	= 2	; 
                 .equ	CLKPS3	= 3	; 
                 .equ	CLKPCE	= 7	; 
                 
                 ; SMCR - Sleep Mode Control Register
                 .equ	SE	= 0	; Sleep Enable
                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                 
                 ; RAMPZ - RAM Page Z Select Register
                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                 
                 ; EIND - Extended Indirect Register
                 .equ	EIND0	= 0	; Bit 0
                 
                 ; GPIOR2 - General Purpose IO Register 2
                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                 
                 ; GPIOR1 - General Purpose IO Register 1
                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                 
                 ; GPIOR0 - General Purpose IO Register 0
                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                 
                 ; PRR1 - Power Reduction Register1
                 .equ	PRUSART1	= 0	; Power Reduction USART1
                 .equ	PRUSART2	= 1	; Power Reduction USART2
                 .equ	PRUSART3	= 2	; Power Reduction USART3
                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                 
                 ; PRR0 - Power Reduction Register0
                 .equ	PRADC	= 0	; Power Reduction ADC
                 .equ	PRUSART0	= 1	; Power Reduction USART
                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                 .equ	PRTWI	= 7	; Power Reduction TWI
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register A
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCSRB - The ADC Control and Status register B
                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                 ;.equ	ACME	= 6	; 
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; DIDR0 - Digital Input Disable Register
                 .equ	ADC0D	= 0	; 
                 .equ	ADC1D	= 1	; 
                 .equ	ADC2D	= 2	; 
                 .equ	ADC3D	= 3	; 
                 .equ	ADC4D	= 4	; 
                 .equ	ADC5D	= 5	; 
                 .equ	ADC6D	= 6	; 
                 .equ	ADC7D	= 7	; 
                 
                 ; DIDR2 - Digital Input Disable Register
                 .equ	ADC8D	= 0	; 
                 .equ	ADC9D	= 1	; 
                 .equ	ADC10D	= 2	; 
                 .equ	ADC11D	= 3	; 
                 .equ	ADC12D	= 4	; 
                 .equ	ADC13D	= 5	; 
                 .equ	ADC14D	= 6	; 
                 .equ	ADC15D	= 7	; 
                 
                 
                 ; ***** BOOT_LOAD ********************
                 ; SPMCSR - Store Program Memory Control Register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read While Write section read enable
                 .equ	SIGRD	= 5	; Signature Row Read
                 .equ	RWWSB	= 6	; Read While Write Section Busy
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 
                 ; ***** USART2 ***********************
                 ; UDR2 - USART I/O Data Register
                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR2A - USART Control and Status Register A
                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                 .equ	U2X2	= 1	; Double the USART transmission speed
                 .equ	UPE2	= 2	; Parity Error
                 .equ	DOR2	= 3	; Data overRun
                 .equ	FE2	= 4	; Framing Error
                 .equ	UDRE2	= 5	; USART Data Register Empty
                 .equ	TXC2	= 6	; USART Transmitt Complete
                 .equ	RXC2	= 7	; USART Receive Complete
                 
                 ; UCSR2B - USART Control and Status Register B
                 .equ	TXB82	= 0	; Transmit Data Bit 8
                 .equ	RXB82	= 1	; Receive Data Bit 8
                 .equ	UCSZ22	= 2	; Character Size
                 .equ	TXEN2	= 3	; Transmitter Enable
                 .equ	RXEN2	= 4	; Receiver Enable
                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR2C - USART Control and Status Register C
                 .equ	UCPOL2	= 0	; Clock Polarity
                 .equ	UCSZ20	= 1	; Character Size
                 .equ	UCSZ21	= 2	; Character Size
                 .equ	USBS2	= 3	; Stop Bit Select
                 .equ	UPM20	= 4	; Parity Mode Bit 0
                 .equ	UPM21	= 5	; Parity Mode Bit 1
                 .equ	UMSEL20	= 6	; USART Mode Select
                 .equ	UMSEL21	= 7	; USART Mode Select
                 
                 ; UBRR2H - USART Baud Rate Register High Byte
                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR2L - USART Baud Rate Register Low Byte
                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 ; ***** USART3 ***********************
                 ; UDR3 - USART I/O Data Register
                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR3A - USART Control and Status Register A
                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                 .equ	U2X3	= 1	; Double the USART transmission speed
                 .equ	UPE3	= 2	; Parity Error
                 .equ	DOR3	= 3	; Data overRun
                 .equ	FE3	= 4	; Framing Error
                 .equ	UDRE3	= 5	; USART Data Register Empty
                 .equ	TXC3	= 6	; USART Transmitt Complete
                 .equ	RXC3	= 7	; USART Receive Complete
                 
                 ; UCSR3B - USART Control and Status Register B
                 .equ	TXB83	= 0	; Transmit Data Bit 8
                 .equ	RXB83	= 1	; Receive Data Bit 8
                 .equ	UCSZ32	= 2	; Character Size
                 .equ	TXEN3	= 3	; Transmitter Enable
                 .equ	RXEN3	= 4	; Receiver Enable
                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR3C - USART Control and Status Register C
                 .equ	UCPOL3	= 0	; Clock Polarity
                 .equ	UCSZ30	= 1	; Character Size
                 .equ	UCSZ31	= 2	; Character Size
                 .equ	USBS3	= 3	; Stop Bit Select
                 .equ	UPM30	= 4	; Parity Mode Bit 0
                 .equ	UPM31	= 5	; Parity Mode Bit 1
                 .equ	UMSEL30	= 6	; USART Mode Select
                 .equ	UMSEL31	= 7	; USART Mode Select
                 
                 ; UBRR3H - USART Baud Rate Register High Byte
                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR3L - USART Baud Rate Register Low Byte
                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	CKOUT	= 6	; Clock output
                 .equ	CKDIV8	= 7	; Divide clock by 8
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	WDTON	= 4	; Watchdog timer always on
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	JTAGEN	= 6	; Enable JTAG
                 .equ	OCDEN	= 7	; Enable OCD
                 
                 ; EXTENDED fuse bits
                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                 .equ	IOEND	= 0x01ff
                 .equ	SRAM_START	= 0x0200
                 .equ	SRAM_SIZE	= 8192
                 .equ	RAMEND	= 0x21ff
                 .equ	XRAMEND	= 0xffff
                 .equ	E2END	= 0x0fff
                 .equ	EEPROMEND	= 0x0fff
                 .equ	EEADRBITS	= 12
                 #pragma AVRPART MEMORY PROG_FLASH 262144
                 #pragma AVRPART MEMORY EEPROM 4096
                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x1f000
                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x1efff
                 .equ	PAGESIZE	= 128
                 .equ	FIRSTBOOTSTART	= 0x1fe00
                 .equ	SECONDBOOTSTART	= 0x1fc00
                 .equ	THIRDBOOTSTART	= 0x1f800
                 .equ	FOURTHBOOTSTART	= 0x1f000
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                 
                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                 
                 #endif  /* _M2560DEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 ;.include "m128def.inc"   ; Tested     Fuses: E:0xff H:0xdc L:0xff
                 ;.include "m168pdef.inc"
                 ;.include "m328pdef.inc"   ; Tested    Fuses: E:0xff H:0xda L:0xff
                 ;.include "m328def.inc"   ; Tested    Fuses: E:0xff H:0xda L:0xff
                 ;.include "m32adef.inc"
                 ;.include "m644pdef.inc"
                 
                 ; Oscillator frequency in herz
                 .equ FREQ_OSC = 16000000
                 
                 ; Define the UART used for the operator
                 .equ OPERATOR_UART = 0              ; 0 or 1
                 
                 ;;; UART0 configuration
                 ;;; Note: With Arduino Uno R3 and MEGA R3 the USB to serial bridge latency and queues 
                 ;;; disturb the XON/XOFF flow control. 
                 ;;; The workaround is to use XON/XOFF flow control and 1 ms intercharacter delay in the terminal program. Or use the ff-shell.py which adds CR LF flow control.
                 .equ BAUDRATE0 = 9600               ; Serial baudrate UART0
                 .equ U0FC_TYPE = 1                  ; 1 = XON/XOFF, 2=CTS/RTS
                 .equ U0RTS_PORT = portd
                 .equ U0RTS_DDR = ddrd
                 .equ U0RTS_BIT = 3
                 
                 ;;; UART1 configuration
                 .equ BAUDRATE1= 38400               ; Serial baudrate UART1
                 .equ U1FC_TYPE = 1                  ; 1 = XON/XOFF, 2=CTS/RTS
                 .equ U1RTS_PORT = portd
                 .equ U1RTS_DDR = ddrd
                 .equ U1RTS_BIT = 4
                 
                 ; Default number base
                 .equ BASE_DEFAULT = 10      ; 16 = hexadecimal, 10 = decimal
                 
                 ; Set to 1 for power save when CPU is idle
                 .equ IDLE_MODE = 1
                 
                 ; Enable the cpu load measurement. Uses Timer 1. Needs IDLE_MODE = 1
                 .equ CPU_LOAD = 0
                 
                 ; CPU load indicator led definitions. Needs IDLE_MODE = 1
                 .equ CPU_LOAD_LED = 1            ; set to 1 to enable
                 .equ CPU_LOAD_DDR = ddrb
                 .equ CPU_LOAD_PORT = portb       ; avr-p28:portc arduinomega:portb arduinouno:portb
                 .equ CPU_LOAD_BIT = 7            ; avr-p28:pin5  arduinomega:pin7  ardinouno:pin5
                 .equ CPU_LOAD_LED_POLARITY = 1   ; avr-p28:  0 = low on port turns on led, 
                                                  ; arduino : 1 = high on port turns on led 
                 
                 ; Define the startup delay for the turnkey words. Milliseconds
                 .equ TURNKEY_DELAY = 2000  ; milliseconds
                 
                 ; UART buffer sizes
                 .equ RX0_BUF_SIZE = 32  ; 8,16,32,64
                 .equ RX0_OFF_FILL = 4   ; Fill level for XOFF
                 
                 .equ RX1_BUF_SIZE = 32  ; 8,16,32,64
                 .equ RX1_OFF_FILL = 4   ; Fill level for XOFF
                 
                 ;;; USER AREA sizes for the OPERATOR task
                 .equ RETURN_STACK_SIZE = 64          ; 48 cells return stack
                 .equ PARAMETER_STACK_SIZE = 96       ; 32 cells parameter stack
                 .equ TIB_SIZE = 90                   ; 80 chars tib size +  10 chars hold area
                 
                 ; Set to 1 to allow control-o to reset FlashForth from the operator UART
                 .equ CTRL_O_WARM_RESET = 1
                 
                 ; Select which timer to use for the system millisecond ticks 0, 1, 2
                 .equ MS_TIMER = 0
                 
                 ; Debug flash and eeprom writes
                 ; Prints F=Write to FLASH E=Write to EEPROM
                 .equ DEBUG_FLASH = 0
                 
                 #if defined(__ATmega2560__)
                 #define partstring "ATmega2560"
                 #elif defined(__ATmega328P__)
                 #elif defined(__ATmega328__)
                 #elif defined(__ATmega128__)
                 #elif defined(__ATmega2561__)
                 #elif defined(__ATmega644__)
                 #else
                 #endif
                 
                 .if MS_TIMER == 0
                 .ifdef OC0Aaddr
                 .equ MS_TIMER_ADDR = OC0Aaddr
                 .else
                 .endif
                 .endif
                 
                 .if MS_TIMER == 1
                 .ifdef OC1Aaddr
                 .else
                 .endif
                 .endif
                 
                 .if MS_TIMER == 2
                 .ifdef OC2Aaddr
                 .else
                 .endif
                 .endif
                 
                 
                 ; Define the FF version date string
                 #define DATE "22.03.2017"
                 
                 
                 ; Register definitions
                   .def upl = r2         ; not in interrupt 
                   .def uph = r3         ; not in interrupt
                   .def r_zero = r5      ; read only zero
                   .def r_one = r6       ; read only one
                   .def r_two = r7       ; read only two
                   .def t8 = r8          ; Not in interrupt
                   .def wflags  = r9     ; not in interrupt
                 
                   .def loadreg0 = r4    ;
                   .def loadreg1 = r12
                   .def loadreg2 = r13
                 
                 
                   .def ibasel=r10       ; Not in interrupt
                   .def ibaseh=r11       ; Not in interrupt
                   .def ms_count  = r14  ; Not in interrupt
                   .def ms_count1 = r15  ; Not in interrupt
                   .def t0 = r16
                   .def t1 = r17
                   .def t2 = r0          ; Not in interrupt
                   .def t3 = r1          ; Not in interrupt
                 
                   .def al = r18
                   .def ah = r19
                   .def pl = r20         ; P Register and FOR..LOOP INDEX variable
                   .def ph = r21
                 
                   .def FLAGS1 = r22     ; Not in interrupt
                   .def FLAGS2 = r23     ; Not in interrupt
                   .def tosl = r24
                   .def tosh = r25
                 ;  xl = r26
                 ;  xh = r27
                 ;  yl = r28  ; StackPointer Ylo
                 ;  yh = r29  ; StackPointer Yhi
                 ;  zl = r30
                 ;  zh = r31
                   .def t4 = r26
                   .def t5 = r27
                   .def t6 = r30
                   .def t7 = r31
                 
                 ; Macros
                 .macro poptos 
                     ld tosl, Y+
                     ld tosh, Y+
                 .endmacro
                 
                 .macro pushtos
                     st -Y, tosh
                     st -Y, tosl
                 .endmacro
                 
                 .macro in_
                 .if (@1 < $40)
                   in @0,@1
                 .else
                   lds @0,@1
                 .endif
                 .endmacro
                 
                 .macro out_
                 .if (@0 < $40)
                   out @0,@1
                 .else
                   sts @0,@1
                 .endif
                 .endmacro
                 
                 .macro sbi_
                 .if (@0 < $40)
                   sbi @0,@1
                 .else
                   in_ @2,@0
                   ori @2,exp2(@1)
                   out_ @0,@2
                 .endif
                 .endmacro
                 
                 .macro cbi_
                 .if (@0 < $40)
                   cbi @0,@1
                 .else
                   in_ @2,@0
                   andi @2,~(exp2(@1))
                   out_ @0,@2
                 .endif
                 .endmacro
                 
                 .macro lpm_
                 .if (FLASHEND < 0x8000) ; Word address
                         lpm @0,@1
                 .else
                         elpm @0,@1
                 .endif
                 .endmacro
                 
                 .macro sub_pflash_z
                 .if (PFLASH > 0)
                         subi    zh, high(PFLASH)
                 .endif
                 .endmacro
                 
                 .macro add_pflash_z
                 .if (PFLASH > 0)
                         subi    zh, high(0x10000-PFLASH)
                 .endif        
                 .endmacro
                 
                 .macro sub_pflash_tos
                 .if (PFLASH > 0)
                         subi    tosh, high(PFLASH)
                 .endif
                 .endmacro
                 
                 .macro add_pflash_tos
                 .if (PFLASH > 0)
                         subi    tosh, high(0x10000-PFLASH)
                 .endif        
                 .endmacro
                 
                 .macro rampv_to_c
                 .if (FLASHEND >= 0x8000)
                         bset    0
                 .else
                         bclr    0
                 .endif
                 .endmacro
                 
                 .macro fdw
                   .dw ((@0<<1)+PFLASH)
                 .endmacro
                 
                 .macro m_pop_zh
                 .ifdef EIND
                         pop     zh
                 .endif
                 .endmacro
                 .macro m_pop_xh
                 .ifdef EIND
                         pop     xh
                  .endif
                 .endmacro
                 .macro m_pop_t0
                 .ifdef EIND
                         pop     t0
                  .endif
                 .endmacro
                 .macro m_push_t0
                 .ifdef EIND
                         push    t0
                  .endif
                 .endmacro
                 .macro mijmp
                 .ifdef EIND
                         eijmp
                 .else
                         ijmp
                 .endif
                 .endmacro
                 
                 ; Symbol naming compatilibity
                 ; UART0 symbols for Atmega32
                 .ifndef UCSR0A
                 .else
                 .equ UDR0_=UDR0
                 .equ URSEL_=0
                 .endif
                 
                 .ifndef SPMCSR
                 .endif
                 
                 .ifndef SPMEN
                 .endif
                 
                 .ifndef EEWE
                 .equ EEWE=EEPE
                 .endif
                 
                 .ifndef EEMWE
                 .equ EEMWE=EEMPE
                 .endif
                 
                 .if OPERATOR_UART == 1
                 .else
                 .if OPERATOR_UART == 0
                 .equ OP_TX_=TX0_
                 .equ OP_RX_=RX0_
                 .equ OP_RXQ=RX0Q
                 .endif
                 .endif
                 
                 #define ubrr0val (FREQ_OSC/16/BAUDRATE0) - 1
                 #define ubrr1val (FREQ_OSC/16/BAUDRATE1) - 1
                 
                 .if FREQ_OSC < 16384000 ; Hz
                 .equ ms_value_tmr0 = ((FREQ_OSC/1000/64) - 1)
                 .equ ms_value_tmr1 = ((FREQ_OSC/1000) - 1)
                 .equ ms_value_tmr2 = ((FREQ_OSC/1000/64) - 1)
                 .ifdef TCCR0B
                 .equ ms_pre_tmr0   = 3
                 .endif
                 .ifdef TCCR0
                 .endif
                 .ifdef TCCR2B
                 .equ ms_pre_tmr2   = 4
                 .endif
                 .ifdef TCCR2
                 .endif
                 
                 .else ; FREQ_OSC >= 16384000 Hz
                 .ifdef TCCR0B
                 .endif
                 .ifdef TCCR0
                 .endif
                 .ifdef TCCR2B
                 .endif
                 .ifdef TCCR2
                 .endif
                 .endif
                 .equ CPU_LOAD_VAL  = (FREQ_OSC*255/100000)
                 ;..............................................................................
                 ;Program Specific Constants (literals used in code)
                 ;..............................................................................
                 ; Flash page size
                 .equ PAGESIZEB=PAGESIZE*2    ; Page size in bytes 
                 
                 ; Forth word header flags
                 .equ NFA= 0x80      ; Name field mask
                 .equ IMMED= 0x40    ; Immediate mask
                 .equ INLINE= 0x20   ; Inline mask for 1 and 2 cell code
                 .equ INLINE4= 0x00   ; Inline mask for 4 cell code
                 .equ INLINE5= 0x00   ; Inline mask for 5 cell code
                 .equ COMPILE= 0x10  ; Compile only mask
                 .equ NFAmask= 0xf   ; Name field length mask
                 
                 ; FLAGS2
                 .equ fIDLE=     6   ; 0 = busy, 1 = idle
                 .equ fLOAD=     5   ; Load measurement ready
                 .equ fLOADled=  4   ; 0 = no load led, 1 = load led on
                 .equ fFC_tx1=   3   ; 0=Flow Control, 1 = no Flow Control   
                 .equ fFC_tx0=   2   ; 0=Flow Control, 1 = no Flow Control   
                 .equ ixoff_tx1= 1                    
                 .equ ixoff_tx0= 0
                 
                 ; FLAGS1
                 .equ fLIT=    7     ; Literal compiled
                 .equ noclear= 6     ; dont clear optimisation flags 
                 .equ idup=    5     ; Use dupzeroequal instead of zeroequal
                 .equ izeroeq= 4     ; Use brne instead of breq if zeroequal
                 .equ istream= 3
                 .equ fLOCK=   2
                 .equ fTAILC=  1
                 .equ idirty=  0
                 
                 ;;; For Flow Control
                 .equ XON=   0x11
                 .equ XOFF=  0x13
                 
                 .equ CR_=0x0d
                 .equ LF_=0x0a
                 .equ BS_=0x08
                 .equ TAB_=0x09
                 
                 ;;; Memory mapping prefixes
                 .equ PRAM    = 0x0000                 ; 8 Kbytes of ram (atm2560)
                 .equ PEEPROM = RAMEND+1               ; 4 Kbytes of eeprom (atm2560)
                 .if (FLASHEND == 0x1ffff)             ; 128 Kwords flash
                 .equ OFLASH  = PEEPROM+EEPROMEND+1    ; 52 Kbytes available for FlashForth(atm2560)
                 .equ PFLASH  = 0
                 .equ RAMPZV  = 3
                 .equ KERNEL_SIZE=0x0d80
                 .else
                 .if (FLASHEND == 0xffff)              ; 64 Kwords flash
                 .else
                 .if (FLASHEND == 0x7fff)              ; 32 Kwords flash
                 .else
                 .if (FLASHEND == 0x3fff)              ; 16 Kwords flash
                 .else
                 .if (FLASHEND == 0x1fff)              ; 8  Kwords flash
                 .endif
                 .endif
                 .endif
                 .endif
                 .endif
                 .equ BOOT_SIZE=0x400
                 .equ BOOT_START=FLASHEND - BOOT_SIZE + 1  ; atm128: 0xfc00, atm328: 0x3c00 
                 .equ KERNEL_START=BOOT_START - KERNEL_SIZE
                 
                 ;;;  High values for memory areas
                 .equ FLASH_HI = 0xffff - (BOOT_SIZE*2) - (KERNEL_SIZE*2)
                 .equ EEPROM_HI =PEEPROM + EEPROMEND
                 .equ RAM_HI = RAMEND
                         
                 ;;; USER AREA for the OPERATOR task
                 .equ ursize=       RETURN_STACK_SIZE
                 .equ ussize=       PARAMETER_STACK_SIZE
                 .equ utibsize=     TIB_SIZE
                 
                 ;;; User variables and area
                 .equ us0=          -28         ; Start of parameter stack
                 .equ ur0=          -26         ; Start of ret stack
                 .equ uemit=        -24         ; User EMIT vector
                 .equ ukey=         -22         ; User KEY vector
                 .equ ukeyq=        -20         ; User KEY? vector
                 .equ ubase=        -18         ; Number Base
                 .equ utib=         -16         ; TIB address
                 .equ utask=        -14         ; Task area pointer
                 .equ ustatus=      -12
                 .equ uflg=         -11
                 .equ usource=      -10         ; Two cells
                 .equ utoin=        -6          ; Input stream
                 .equ ulink=        -4          ; Task link
                 .equ ursave=       -2          ; Saved ret stack pointer
                 .equ uhp=           0          ; Hold pointer
                 
                 
                 ;;; Variables in EEPROM
                 .equ eeprom=       PEEPROM
                 .equ dp_start=     eeprom + 0x0000 ; TURNKEY
                 .equ dp_flash=     eeprom + 0x0002 ; FLASH dictionary pointer
                 .equ dp_eeprom=    eeprom + 0x0004 ; EEPROM dictionary pointer
                 .equ dp_ram=       eeprom + 0x0006 ; RAM dictionary pointer
                 .equ latest=       eeprom + 0x0008 ; Pointer to latest dictionary word
                 .equ prompt=       eeprom + 0x000a ; Deferred prompt
                 .equ ehere=        eeprom + 0x000c
                 
                 ;****************************************************
                 .dseg
000200           ibuf:         .byte PAGESIZEB
000300           ivec:         .byte INT_VECTORS_SIZE
                 
                 rxqueue0:
000372           rbuf0_wr:    .byte 1
000373           rbuf0_rd:    .byte 1
000374           rbuf0_lv:    .byte 1
000375           rbuf0:       .byte RX0_BUF_SIZE
                 
                 .ifdef UCSR1A
                 rxqueue1:
000395           rbuf1_wr:    .byte 1
000396           rbuf1_rd:    .byte 1
000397           rbuf1_lv:    .byte 1
000398           rbuf1:       .byte RX1_BUF_SIZE
                 .endif
                 
0003b8           litbuf0:    .byte 1
0003b9           litbuf1:    .byte 1
                 
0003ba           dpSTART:    .byte 2
0003bc           dpFLASH:    .byte 2 ; DP's and LATEST in RAM
0003be           dpEEPROM:   .byte 2
0003c0           dpRAM:      .byte 2
0003c2           dpLATEST:   .byte 2
                 
0003c4           iaddrl:     .byte 1
0003c5           iaddrh:     .byte 1
                 .ifdef RAMPZ
0003c6           iaddru:	    .byte 1
0003c7           ibaseu:	    .byte 1
                 .endif
                 
                 .if IDLE_MODE == 1
                 .if CPU_LOAD == 1       
                 .endif
                 .endif
                 
0003c8           cse:        .byte 1 ; Current data section 0=flash, 1=eeprom, 2=ram
0003c9           state:      .byte 1 ; Compilation state
0003ca           uvars:      .byte   (-us0)
0003e6           up0:        .byte   2
0003e8           urbuf:      .byte   ursize
000428           usbuf:      .byte   ussize
000488           utibbuf:    .byte   utibsize
0004e2           dpdata:     .byte   2
                 
                 .eseg
                 .org 0
000000 ff ff             .dw 0xffff  ; Force first cell of eeprom to 0xffff
                 ;*******************************************************************
                 ; Start of kernel
                 ;*******************************************************************
                 .cseg
                 .if (FLASHEND == 0x1ffff)
                 .org 0x17e80
                 .else
                 .endif
                 ;***********************************************************
                 CMP:
017e80 940f f1d1         call    TOR
017e82 c009              rjmp    CMP2
                 CMP1:
017e83 940f ef1b         call    NEQUALSFETCH
017e85 940f f206         call    MINUS
017e87 940f f317         call    ZEROSENSE
017e89 f011              breq    CMP2
017e8a 940d f884         jmp     TWODROPZ
                 CMP2:
017e8c 940f f9b4         call    XNEXT
017e8e f7a0              brcc    CMP1
017e8f 940d f880         jmp     TWODROPNZ
                 
                 .if (FLASHEND == 0x1ffff)
                 .org KERNEL_START+0x0
                 .endif
                 ;;; *************************************************
                 ;;; WARM user area data
                 .equ warmlitsize= 28
                 WARMLIT:
01ee80 0200              .dw      0x0200                ; cse, state
01ee81 0484              .dw      utibbuf-4             ; S0
01ee82 0427              .dw      usbuf-1               ; R0
01ee83 f96e              fdw      OP_TX_
01ee84 f9bc              fdw      OP_RX_
01ee85 f9fc              fdw      OP_RXQ
01ee86 000a              .dw      BASE_DEFAULT          ; BASE
01ee87 0488              .dw      utibbuf               ; TIB
01ee88 dda6              fdw      OPERATOR_AREA         ; TASK
01ee89 0000              .dw      0                     ; ustatus & uflg
01ee8a 0000              .dw      0                     ; source
01ee8b 0000              .dw      0                     ; source
01ee8c 0000              .dw      0                     ; TOIN
01ee8d 03e6              .dw      up0                   ; Task link
                 ; M? -- caddr count    current data space string
                 ;        dw      L_DOTBASE
                 L_MEMQ:
01ee8e 2081              .db     NFA|1," "
                 MEMQ:
01ee8f 940f f060         call    CSE_
01ee91 940f f6f7         call    DOLIT
01ee93 ff56              fdw     MEMQADDR_N
01ee94 940f f1f9         call    PLUS
01ee96 940f f638         call    FETCH_A
01ee98 940f f49f         call    CFETCHPP
01ee9a 940f f6f7         call    DOLIT
01ee9c 000f              .dw     NFAmask
01ee9d 940d f241         jmp     AND_
                 
                 .if (FLASHEND == 0x1ffff)
01ee9f fec8              fdw     PAUSE_L
                 WDON_L:
01eea0 7783
01eea1 2b64              .db     NFA|3,"wd+"
                 WDON:
01eea2 94f8              cli
01eea3 95a8              wdr
01eea4 9190 0060         lds     tosh, WDTCSR
01eea6 6198              ori     tosh, (1<<WDCE)|(1<<WDE)
01eea7 9390 0060         sts     WDTCSR, tosh
01eea9 7087              andi    tosl, 7
01eeaa 6088              ori     tosl, (1<<WDE)
01eeab 9380 0060         sts     WDTCSR, tosl
01eead 9478              sei
01eeae 940d f1b0         jmp     DROP
                 
                 ; WD- ( -- )    stop the watchdog
01eeb0 dd40              fdw     WDON_L
                 WDOFF_L:
01eeb1 7783
01eeb2 2d64              .db     NFA|3,"wd-"
                 WDOFF:
01eeb3 94f8              cli
01eeb4 95a8              wdr
                 .ifdef MCUSR
01eeb5 be54              out     MCUSR, r_zero
                 .else
                 .endif
01eeb6 e108              ldi     t0, (1<<WDCE)|(1<<WDE)
01eeb7 9300 0060         sts     WDTCSR, t0
01eeb9 9250 0060         sts     WDTCSR, r_zero
01eebb 9478              sei
01eebc 9508              ret
                 
                 ; WDR ( -- )    kick the dog
01eebd dd62              fdw     WDOFF_L
                 CWD_L:
01eebe 63a3
01eebf 6477              .db     NFA|INLINE|3,"cwd"
                 CWD:
01eec0 95a8              wdr
01eec1 9508              ret
                 .endif
                 ;*********************************************************************
                 ; EXIT --   Compile a return
                 ;        variable link
01eec2 0000              .dw     0
                 EXIT_L:
01eec3 6584
01eec4 6978
01eec5 0074              .db     NFA|4,"exit",0
                 EXIT:
01eec6 910f              m_pop_t0
01eec7 910f              pop     t0
01eec8 910f              pop     t0
01eec9 9508              ret
                 
01eeca fb0c              fdw     IFLUSH_L
                 OPERATOR_L:
01eecb 6f88
01eecc 6570
01eecd 6172
01eece 6f74
01eecf 0072              .db     NFA|8,"operator",0
                 OPERATOR:
01eed0 940f eff2         call    DOCREATE
01eed2 dda6              fdw     OPERATOR_AREA
                 OPERATOR_AREA:
01eed3 03e6              .dw     up0
01eed4 0000
01eed5 0040              .dw     0, ursize
01eed6 0060
01eed7 005a              .dw     ussize, utibsize
                 
                 ; idle
01eed8 dd86              fdw(EXIT_L)
                 IDLE_L:
01eed9 6984
01eeda 6c64
01eedb 0065              .db     NFA|4,"idle",0
                 IDLE:
01eedc 6470              sbr     FLAGS2, (1<<fIDLE)
01eedd 9508              ret
                         
                 ; busy
01eede ddb2              fdw(IDLE_L)
                 BUSY_L:
01eedf 6284
01eee0 7375
01eee1 0079              .db     NFA|4,"busy",0
                 BUSY:
01eee2 7b7f              cbr     FLAGS2, (1<<fIDLE)
01eee3 9508              ret        
                 ; *********************************************
                 ; Bit masking 8 bits, only for ram addresses !
                 ; : mset ( mask addr -- )
                 ;   dup >r c@ swap or r> c!
                 ; ;
01eee4 ff20              fdw     ICCOMMA_L
                 MSET_L:
01eee5 6d84
01eee6 6573
01eee7 0074              .db     NFA|4,"mset",0
                 MSET:
01eee8 01fc              movw    zl, tosl
01eee9 9189
01eeea 9199              poptos
01eeeb 8100              ld      t0, z
01eeec 2b08              or      t0, tosl
01eeed 8300              st      z, t0
01eeee 9189
01eeef 9199              poptos
01eef0 9508              ret
                         
                 ; : mclr  ( mask addr -- )
                 ;  dup >r c@ swap invert and r> c!
                 ; ;
01eef1 ddca              fdw     MSET_L
                 MCLR_L:
01eef2 6d84
01eef3 6c63
01eef4 0072              .db     NFA|4,"mclr",0
                 MCLR_:
01eef5 01fc              movw    zl, tosl
01eef6 9189
01eef7 9199              poptos
01eef8 8100              ld      t0, z
01eef9 9580              com     tosl
01eefa 2308              and     t0, tosl
01eefb 8300              st      z, t0
01eefc 9189
01eefd 9199              poptos
01eefe 9508              ret
                 
                 ;   LSHIFT      x1 u -- x2
01eeff dde4              fdw     MCLR_L
                 LSHIFT_L:
01ef00 6c86
01ef01 6873
01ef02 6669
01ef03 0074              .db     NFA|6,"lshift",0
                 LSHIFT:
01ef04 01fc              movw    zl, tosl
01ef05 9189
01ef06 9199              poptos
                 LSHIFT1:
01ef07 9731              sbiw    zl, 1
01ef08 f01a              brmi    LSHIFT2
01ef09 0f88              lsl     tosl
01ef0a 1f99              rol     tosh
01ef0b cffb              rjmp    LSHIFT1
                 LSHIFT2:
01ef0c 9508              ret
                 
                 ;   RSHIFT      x1 u -- x2
01ef0d de00              fdw     LSHIFT_L
                 RSHIFT_L:
01ef0e 7286
01ef0f 6873
01ef10 6669
01ef11 0074              .db     NFA|6,"rshift",0
                 RSHIFT:
01ef12 01fc              movw    zl, tosl
01ef13 9189
01ef14 9199              poptos
                 RSHIFT1:
01ef15 9731              sbiw    zl, 1
01ef16 f01a              brmi    RSHIFT2
01ef17 9596              lsr     tosh
01ef18 9587              ror     tosl
01ef19 cffb              rjmp    RSHIFT1
                 RSHIFT2:
01ef1a 9508              ret
                 
                 ;**********************************************
                 NEQUALSFETCH:
01ef1b d583              rcall   CFETCHPP
01ef1c d2ac              rcall   ROT
01ef1d d581              rcall   CFETCHPP
01ef1e c2aa              rjmp    ROT
                 ;***************************************************
                 ; N=    c-addr nfa -- n   string:name cmp
                 ;             n=0: s1==s2, n=ffff: s1!=s2
                 ; N= is specificly used for finding dictionary entries
                 ; It can also be used for comparing strings shorter than 16 characters,
                 ; but the first string must be in ram and the second in program memory.
01ef1f de1c              fdw     RSHIFT_L
                 NEQUAL_L:
01ef20 6e82
01ef21 003d              .db     NFA|2,"n=",0
                 NEQUAL:
01ef22 dff8              rcall   NEQUALSFETCH
01ef23 708f              andi    tosl, 0xf
01ef24 d381              rcall   EQUAL
01ef25 d3f1              rcall   ZEROSENSE
01ef26 f0b1              breq    NEQUAL5
01ef27 d347              rcall   ONEMINUS
01ef28 d576              rcall   CFETCHPP
01ef29 d2a7              rcall   TOR
01ef2a c00c              rjmp    NEQUAL4
                 NEQUAL2:
01ef2b dfef              rcall   NEQUALSFETCH
01ef2c d374              rcall   NOTEQUAL
01ef2d d3e9              rcall   ZEROSENSE
01ef2e f021              breq    NEQUAL3
01ef2f d772              rcall   TRUE_
01ef30 940f f9c5         call    LEAVE
01ef32 c004              rjmp    NEQUAL4
                 NEQUAL3:
01ef33 d2b3              rcall   RFETCH
01ef34 d3e2              rcall   ZEROSENSE
01ef35 f409              brne    NEQUAL4
01ef36 d762              rcall   FALSE_
                 NEQUAL4:
01ef37 940f f9b4         call    XNEXT
01ef39 f788              brcc    NEQUAL2
01ef3a 911f              pop     t1
01ef3b 910f              pop     t0
01ef3c c001              rjmp    NEQUAL6
                 NEQUAL5:
01ef3d d764              rcall   TRUE_
                 NEQUAL6:
01ef3e d419              rcall   NIP
01ef3f 940d f358         jmp     NIP
                 
                 ; SKIP   c-addr u c -- c-addr' u'
                 ;                          skip matching chars
                 ; u (count) must be smaller than 256
01ef41 de40              fdw     NEQUAL_L
                 SKIP_L:
01ef42 7384
01ef43 696b
01ef44 0070              .db     NFA|4,"skip",0
                 SKIP:
                 
01ef45 d28b              rcall   TOR
                 SKIP0:
01ef46 d3d6              rcall   DUPZEROSENSE
01ef47 f089              breq    SKIP2
                 
01ef48 d278              rcall   OVER
01ef49 d430              rcall   CFETCH_A
                 
01ef4a d7b6              rcall   DUP
01ef4b d7ab              rcall   DOLIT
01ef4c 0009              .dw     TAB_
01ef4d d358              rcall   EQUAL
01ef4e d3c8              rcall   ZEROSENSE
01ef4f f429              brne    SKIP05    
01ef50 d296              rcall   RFETCH
01ef51 d354              rcall   EQUAL
01ef52 d3c4              rcall   ZEROSENSE
01ef53 f029              breq    SKIP2
01ef54 c001                      rjmp    SKIP1
                 SKIP05:
01ef55 d25a              rcall   DROP
                 SKIP1:
01ef56 d1c9              rcall   ONE
01ef57 d4f2              rcall   SLASHSTRING
01ef58 cfed              rjmp    SKIP0
                 SKIP2:
01ef59 910f              pop     t0
01ef5a 910f              pop     t0
01ef5b 9508              ret
                 
                 
                 ; SCAN   c-addr u c -- c-addr' u'
                 ;                          find matching chars
                 
                 
01ef5c de84              fdw     SKIP_L
                 SCAN_L:
01ef5d 7384
01ef5e 6163
01ef5f 006e              .db     NFA|4,"scan",0
                 SCAN:
01ef60 d36a              rcall   STORE_P_TO_R
01ef61 d26f              rcall   TOR
01ef62 c010              rjmp    SCAN3
                 SCAN1:
01ef63 d53b              rcall   CFETCHPP
01ef64 d79c              rcall   DUP
01ef65 d791              rcall   DOLIT
01ef66 0009              .dw     TAB_
01ef67 d33e              rcall   EQUAL
01ef68 d3ae              rcall   ZEROSENSE
01ef69 f011              breq    SCAN2
01ef6a d245              rcall   DROP
01ef6b c005              rjmp    SCAN25
                 SCAN2:
01ef6c 940f fa9b         call    FETCH_P
01ef6e d337              rcall   EQUAL
01ef6f d3a7              rcall   ZEROSENSE
01ef70 f011              breq    SCAN3
                 SCAN25:
01ef71 d2fd              rcall   ONEMINUS
01ef72 c003              rjmp    SCAN4
                 SCAN3:
01ef73 940f f9b4         call    XNEXT
01ef75 f768              brcc    SCAN1
                 SCAN4:
01ef76 d265              rcall   RFROM
01ef77 d2f2              rcall   ONEPLUS
01ef78 d35e              rcall   R_TO_P
01ef79 9508              ret
                 
                 ; : mtst ( mask addr -- flag )
                 ;   c@ and 
                 ; ;
01ef7a deba              fdw     SCAN_L
                 MTST_L:
01ef7b 6d84
01ef7c 7374
01ef7d 0074              .db     NFA|4,"mtst",0
                 MTST:
01ef7e 01fc              movw    zl, tosl
01ef7f 9181              ld      tosl, z+
01ef80 9109              ld      t0, Y+
01ef81 9119              ld      t1, Y+
01ef82 2380              and     tosl, t0
01ef83 2799              clr     tosh
01ef84 9508              ret
                 
                 
01ef85 def6              fdw     MTST_L
                 FCY_L:
01ef86 4683
01ef87 7963              .db     NFA|3,"Fcy"
01ef88 d069              rcall   DOCREATE
01ef89 3e80              .dw     FREQ_OSC / 1000
                 
                 ;;; Check parameter stack pointer
01ef8a 7383
01ef8b 3f70              .db     NFA|3,"sp?"
                 check_sp:
01ef8c d08e              rcall   SPFETCH
01ef8d 940f f82e         call    R0_
01ef8f d6a8              rcall   FETCH_A
01ef90 940f f829         call    S0
01ef92 d6a5              rcall   FETCH_A
01ef93 d2d6              rcall   ONEPLUS
01ef94 d302              rcall   WITHIN
01ef95 d1de              rcall   XSQUOTE
01ef96 5303
01ef97 3f50              .db     3,"SP?"
01ef98 d74a              rcall   QABORT
01ef99 9508              ret
                 ;***************************************************
                 ; EMIT  c --    output character to the emit vector
01ef9a df0c              fdw     FCY_L
                 EMIT_L:
01ef9b 6584
01ef9c 696d
01ef9d 0074              .db     NFA|4,"emit",0
                 EMIT:
01ef9e d368              rcall   UEMIT_
01ef9f 940d efbd         jmp     FEXECUTE
                 
                 ;***************************************************
                 ; KEY   -- c    get char from UKEY vector
01efa1 df36              fdw     EMIT_L
                 KEY_L:
01efa2 6b83
01efa3 7965              .db     NFA|3,"key"
                 KEY:
01efa4 d368              rcall   UKEY_
01efa5 940d efbd         jmp     FEXECUTE
                 
                 ;***************************************************
                 ; KEY   -- c    get char from UKEY vector
01efa7 df44              fdw     KEY_L
                 KEYQ_L:
01efa8 6b84
01efa9 7965
01efaa 003f              .db     NFA|4,"key?",0
                 KEYQ:
01efab d367              rcall   UKEYQ_
01efac 940d efbd         jmp     FEXECUTE
                 
01efae df50              fdw     KEYQ_L
                 EXECUTE_L:
01efaf 6587
01efb0 6578
01efb1 7563
01efb2 6574              .db     NFA|7,"execute"
                 EXECUTE:
01efb3 01fc              movw    zl, tosl
                         sub_pflash_z
01efb4 9189
01efb5 9199              poptos
01efb6 9408              rampv_to_c
01efb7 95f7              ror     zh
01efb8 95e7              ror     zl
01efb9 9419              mijmp
                 
01efba df5e              fdw     EXECUTE_L
                 FEXECUTE_L:
01efbb 4083
01efbc 7865              .db     NFA|3,"@ex"
                 FEXECUTE:
01efbd d67a              rcall   FETCH_A
01efbe 940d efb3         jmp     EXECUTE
                 
01efc0 df76              fdw     FEXECUTE_L
                 VARIABLE_L:
01efc1 7688
01efc2 7261
01efc3 6169
01efc4 6c62
01efc5 0065              .db     NFA|8,"variable",0
                 VARIABLE_:
01efc6 d0a3              rcall   HERE
01efc7 d0b8              rcall   CELL
01efc8 d1e0              rcall   ALLOT
01efc9 940d efdd         jmp     CONSTANT_
                 
01efcb df82              fdw     VARIABLE_L
                 TWOVARIABLE_L:
01efcc 3289
01efcd 6176
01efce 6972
01efcf 6261
01efd0 656c              .db     NFA|9,"2variable"
                 TWOVARIABLE_:
01efd1 d098              rcall   HERE
01efd2 d724              rcall   DOLIT
01efd3 0004              .dw     0x4
01efd4 d1d4              rcall   ALLOT
01efd5 940d efdd         jmp     CONSTANT_
                 
01efd7 df98              fdw     TWOVARIABLE_L
                 CONSTANT_L:
01efd8 6388
01efd9 6e6f
01efda 7473
01efdb 6e61
01efdc 0074              .db     NFA|8,"constant",0
                 CONSTANT_:
01efdd d7e5              rcall   COLON
01efde 940f fe64         call    LITERAL
01efe0 940d f7d1         jmp     SEMICOLON
                 
01efe2 dfb0              fdw     CONSTANT_L
                 TWOCONSTANT_L:
01efe3 3289
01efe4 6f63
01efe5 736e
01efe6 6174
01efe7 746e              .db     NFA|9,"2constant"
                 TWOCONSTANT_:
01efe8 d1ce              rcall   SWOP
01efe9 d7d9              rcall   COLON
01efea 940f fe64         call    LITERAL
01efec 940f fe64         call    LITERAL
01efee 940d f7d1         jmp     SEMICOLON
                 
                 ; DOCREATE, code action of CREATE
                 ; Fetch the next cell from program memory to the parameter stack
                 DOCREATE_L:
01eff0 2883
01eff1 2963              .db     NFA|3, "(c)"
                 DOCREATE:
01eff2 91ff              m_pop_zh
01eff3 91ff              pop     zh
01eff4 91ef              pop     zl
01eff5 d00f              rcall   FETCHLIT
01eff6 91ff              m_pop_zh
01eff7 91ff              pop     zh
01eff8 91ef              pop     zl
01eff9 9419              mijmp
                 
                 ;;; Resolve the runtime action of the word created by using does>
                 DODOES_L:
01effa 2883
01effb 2964              .db     NFA|3, "(d)"
                 DODOES:
01effc 91bf              m_pop_xh
01effd 91bf              pop     xh
01effe 91af              pop     xl
01efff 91ff              m_pop_zh
01f000 91ff              pop     zh
01f001 91ef              pop     zl
01f002 d002              rcall   FETCHLIT
01f003 01fd              movw    z, x
01f004 9419              mijmp    ; (z)
                 
                 FETCHLIT:
01f005 939a
01f006 938a              pushtos
01f007 0fee              lsl     zl
01f008 1fff              rol     zh
01f009 9187              lpm_    tosl, z+
01f00a 9197              lpm_    tosh, z+
01f00b 9508              ret
                 
01f00c 2883
01f00d 292c              .db     NFA|3, "(,)"
                 DOCOMMAXT:
01f00e 910f              m_pop_t0
01f00f 91ff              pop     zh
01f010 91ef              pop     zl
01f011 dff3              rcall   FETCHLIT
01f012 95f7              ror     zh
01f013 95e7              ror     zl
01f014 93ef              push    zl
01f015 93ff              push    zh
01f016 930f              m_push_t0
01f017 c099              rjmp     COMMAXT
                 
                 ;   SP@     -- addr         get parameter stack pointer
01f018 dfc6              fdw     TWOCONSTANT_L
                 SPFETCH_L:
01f019 7383
01f01a 4070              .db     NFA|3,"sp@"
                 SPFETCH:
01f01b 01fe              movw    z, y
01f01c 939a
01f01d 938a              pushtos
01f01e 01cf              movw    tosl, z
01f01f 9508              ret
                 
                 ;   SP!     addr --         store stack pointer
01f020 7383
01f021 2170              .db     NFA|3,"sp!"
                 SPSTORE:
01f022 01ec              movw    y, tosl
01f023 9508              ret
                 
                 ;   RPEMPTY     -- EMPTY THE RETURN STACK       
01f024 7283
01f025 3070              .db     NFA|3,"rp0"
                 RPEMPTY:
01f026 91bf              m_pop_xh
01f027 91bf              pop     xh
01f028 91af              pop     xl
01f029 940f f82e         call    R0_
01f02b d60c              rcall   FETCH_A
01f02c bf8d              out     spl, tosl
01f02d bf9e              out     sph, tosh
01f02e 9189
01f02f 9199              poptos
01f030 01fd              movw    zl, xl
01f031 9419              mijmp
                 
                 ;   RP@ Fetch the return stack pointer        
01f032 e032              fdw     SPFETCH_L
                 RPFETCH_L:
01f033 72b3
01f034 4070              .db     NFA|INLINE|COMPILE|3,"rp@"
                 RPFETCH:
01f035 939a
01f036 938a              pushtos
01f037 b78d              in      tosl, spl
01f038 b79e              in      tosh, sph
01f039 9508              ret
                 
                 ;   ><  Swap bytes        
01f03a e066              fdw     RPFETCH_L
                 SWAPB_L:
01f03b 3ea2
01f03c 003c              .db     NFA|INLINE|2,"><",0
                 SWAPB:
01f03d 2f08              mov     t0, tosl
01f03e 2f89              mov     tosl, tosh
01f03f 2f90              mov     tosh, t0
01f040 9508              ret
                 
                 ; DICTIONARY POINTER FOR the current section
                 ; Flash -- sets the data section to flash
01f041 e076              fdw     SWAPB_L
                 FLASH_L:
                 ROM_N:  
01f042 6685
01f043 616c
01f044 6873              .db     NFA|5,"flash"
                 ROM_:
01f045 9250 03c8         sts     cse, r_zero
01f047 9508              ret
                 
                 ; EEPROM -- sets the data section to EEPROM data memory
01f048 e084              fdw     FLASH_L
                 EEPROM_L:
                 EROM_N: 
01f049 6586
01f04a 7065
01f04b 6f72
01f04c 006d              .db     NFA|6,"eeprom",0
                 EROM:
01f04d 9270 03c8         sts     cse, r_two
01f04f 9508              ret
                         
                 ; RAM -- sets the data section to RAM memory
01f050 e092              fdw     EEPROM_L
                 RAM_L:
                 FRAM_N: 
01f051 7283
01f052 6d61              .db     NFA|3,"ram"
                 FRAM:
01f053 e004              ldi     t0, 4
01f054 9300 03c8         sts     cse, t0
01f056 9508              ret
                 
                 ; DP    -- a-addr          
                 ; Fetched from EEPROM
01f057 e0a2              fdw     RAM_L
                 DP_L:
01f058 6482
01f059 0070              .db     NFA|2,"dp",0
                 DP:
01f05a d73c              rcall   IDP
01f05b d004              rcall   CSE_
01f05c 940d f1f9         jmp     PLUS
                 
                 
                 ;;; 
01f05e 6383
01f05f 6573              .db     NFA|3,"cse"
                 CSE_:
01f060 939a
01f061 938a              pushtos
01f062 9180 03c8         lds     tosl, cse
01f064 2799              clr     tosh
01f065 9508              ret
                 
                 ; HERE    -- addr    get current data space ptr
                 ;   DP @ ;
01f066 e0b0              fdw     DP_L
                 HERE_L:
01f067 6884
01f068 7265
01f069 0065              .db     NFA|4,"here",0
                 HERE:
01f06a dfef              rcall   DP
01f06b 940d fed0         jmp     FETCH
                 
                 ; ,   x --             append cell to current data space
                 ;   HERE ! CELL ALLOT ;
01f06d e0ce              fdw     HERE_L
                 COMMA_L:
01f06e 2c81              .db     NFA|1,","
                 COMMA:
01f06f dffa              rcall   HERE
01f070 d43c              rcall   STORE_A
01f071 d00e              rcall   CELL
01f072 940d f1a9         jmp     ALLOT
                 
                 ; C,  c --             append char to current data space
                 ;   HERE C! 1 ALLOT ;
01f074 e0dc              fdw     COMMA_L 
                 CCOMMA_L:
01f075 6382
01f076 002c              .db     NFA|2,"c,",0
                 CCOMMA:
01f077 dff2              rcall   HERE
01f078 d305              rcall   CSTORE_A
01f079 d0a6              rcall   ONE
01f07a 940d f1a9         jmp     ALLOT
                 
                 
                 ; CELL     -- n                 size of one cell
01f07c e0ea              fdw     CCOMMA_L
                 CELL_L:
01f07d 6384
01f07e 6c65
01f07f 006c              .db     NFA|4,"cell",0
                 CELL:
01f080 939a
01f081 938a              pushtos
01f082 e082              ldi     tosl, 2
01f083 e090              ldi     tosh, 0
01f084 9508              ret
                 
                 ; ALIGN    --                         align DP
01f085 e0fa              fdw     CELL_L
                 ALIGN_L:
01f086 6185
01f087 696c
01f088 6e67              .db     NFA|5,"align"
                 ALIGN:
01f089 dfe0              rcall   HERE
01f08a d008              rcall   ALIGNED
01f08b dfce              rcall   DP
01f08c 940d fe93         jmp     STORE
                 
                 ; ALIGNED  addr -- a-addr       align given addr
01f08e e10c              fdw     ALIGN_L
                 ALIGNED_L:
01f08f 6187
01f090 696c
01f091 6e67
01f092 6465              .db     NFA|7,"aligned"
                 ALIGNED:
01f093 9601              adiw    tosl, 1
01f094 7f8e              cbr     tosl, 1
01f095 9508              ret
                 
                 ; CELL+    a-addr1 -- a-addr2      add cell size
                 ;   2 + ;
01f096 e11e              fdw     ALIGNED_L
                 CELLPLUS_L:
01f097 63a5
01f098 6c65
01f099 2b6c              .db     NFA|INLINE|5,"cell+"
                 CELLPLUS:
01f09a 9602              adiw    tosl, 2
01f09b 9508              ret
                 
                 ; CELLS    n1 -- n2            cells->adrs units
01f09c e12e              fdw     CELLPLUS_L
                 CELLS_L:
01f09d 63a5
01f09e 6c65
01f09f 736c              .db     NFA|INLINE|5,"cells"
                 CELLS:
01f0a0 0f88              lsl     tosl
01f0a1 1f99              rol     tosh
01f0a2 9508              ret
                 
                 ; CHAR+    c-addr1 -- c-addr2   add char size
01f0a3 e13a              fdw     CELLS_L
                 CHARPLUS_L:
01f0a4 63a5
01f0a5 6168
01f0a6 2b72              .db     NFA|INLINE|5,"char+"
                 CHARPLUS:
01f0a7 9601              adiw    tosl, 1
01f0a8 9508              ret
                 
                 ; CHARS    n1 -- n2            chars->adrs units
01f0a9 e148              fdw     CHARPLUS_L
                 CHARS_L:
01f0aa 63a5
01f0ab 6168
01f0ac 7372              .db     NFA|INLINE|5,"chars"
01f0ad 9508      CHARS:  ret
                 
01f0ae e154              fdw     CHARS_L
                 COMMAXT_L:
01f0af 6383
01f0b0 2c66              .db     NFA|3, "cf,"
                 COMMAXT:
01f0b1 d64f              rcall   DUP
01f0b2 d67b              rcall   IHERE
01f0b3 d152              rcall   MINUS
01f0b4 d13f              rcall   ABS_ 
01f0b5 d641              rcall   DOLIT
01f0b6 0ff0              .dw     0xff0
01f0b7 d1f8              rcall   GREATER
01f0b8 d25e              rcall   ZEROSENSE
01f0b9 f041              breq    STORECF1
                 STORECFF1: 
                 ;        rcall   CALL_
01f0ba d63c              rcall   DOLIT
                 .ifdef EIND
01f0bb 940f              .dw     0x940F  ; On Atmega 2560 all code is on 128 - 256 Kword area.
                 .else
                 .endif
01f0bc 940f ff88         call    ICOMMA
                         sub_pflash_tos
01f0be 9408              rampv_to_c
01f0bf 9597              ror     tosh
01f0c0 9587              ror     tosl
01f0c1 c006              rjmp    STORECF2
                 STORECF1:
01f0c2 d66b              rcall   IHERE
01f0c3 d142              rcall   MINUS
01f0c4 d746              rcall   TWOMINUS
01f0c5 d1bf              rcall   TWOSLASH
                         ;rcall   RCALL_
01f0c6 709f              andi    tosh, 0x0f
01f0c7 6d90              ori     tosh, 0xd0
                 STORECF2:
01f0c8 940d ff88         jmp    ICOMMA
                 
                 
                 ; !COLON   --       change code field to docolon
                 ;   -6 IALLOT ; 
                 ;       .dw    link
                 ;link   set     $
01f0ca 2182
01f0cb 003a              .db     NFA|2,"!:",0
                 STORCOLON:
01f0cc d62a              rcall   DOLIT
01f0cd fffa              .dw     0xfffa         ;  -6
01f0ce 940d f8e7         jmp     IALLOT
                 
                 
                 ; 2@    a-addr -- x1 x2            fetch 2 cells
                 ;   DUP @ SWAP CELL+ @ ;
                 ;   the lower address will appear on top of stack
01f0d0 e15e              fdw     COMMAXT_L
                 TWOFETCH_L:
01f0d1 3282
01f0d2 0040              .db     NFA|2,"2@",0
                 TWOFETCH:
01f0d3 d62d              rcall   DUP
01f0d4 d563              rcall   FETCH_A
01f0d5 d0e1              rcall   SWOP
01f0d6 dfc3              rcall   CELLPLUS
01f0d7 940d f638         jmp     FETCH_A
                 
                 ; 2!    x1 x2 a-addr --            store 2 cells
                 ;   SWAP OVER ! CELL+ ! ;
                 ;   the top of stack is stored at the lower adrs
01f0d9 e1a2              fdw     TWOFETCH_L
                 TWOSTORE_L:
01f0da 3282
01f0db 0021              .db     NFA|2,"2!",0
                 TWOSTORE:
01f0dc d0da              rcall   SWOP
01f0dd d0e3              rcall   OVER
01f0de dfbb              rcall   CELLPLUS
01f0df d3cd              rcall   STORE_A
01f0e0 940d fe93         jmp     STORE
                 
                 ; 2DROP  x1 x2 --                   drop 2 cells
                 ;   DROP DROP ;
01f0e2 e1b4              fdw     TWOSTORE_L
                 TWODROP_L:
01f0e3 3285
01f0e4 7264
01f0e5 706f              .db     NFA|5,"2drop"
                 TWODROP:
01f0e6 d0c9              rcall   DROP
01f0e7 940d f1b0         jmp     DROP
                 
                 ; 2DUP   x1 x2 -- x1 x2 x1 x2    dup top 2 cells
                 ;   OVER OVER ;
01f0e9 e1c6              fdw     TWODROP_L
                 TWODUP_L:
01f0ea 3284
01f0eb 7564
01f0ec 0070              .db     NFA|4,"2dup",0
                 TWODUP:
01f0ed d0d3              rcall   OVER
01f0ee 940d f1c1         jmp     OVER
                 
                 ; 2SWAP   x1 x2 x3 x4 -- x3 x4 x1 x2    dup top 2 cells
01f0f0 e1d4              fdw     TWODUP_L
                 TWOSWAP_L:
01f0f1 3285
01f0f2 7773
01f0f3 7061              .db     NFA|5,"2swap"
                 TWOSWAP:
01f0f4 d0d4              rcall   ROT
01f0f5 d0db              rcall   TOR
01f0f6 d0d2              rcall   ROT
01f0f7 d0e4              rcall   RFROM
01f0f8 9508              ret
                 
                 ; INPUT/OUTPUT ==================================
                 
                 ; SPACE   --                      output a space
                 ;   BL EMIT ;
01f0f9 e1e2              fdw     TWOSWAP_L
                 SPACE_L:
01f0fa 7385
01f0fb 6170
01f0fc 6563              .db     NFA|5,"space"
                 SPACE_:  
01f0fd d712              rcall   BL
01f0fe 940d ef9e         jmp     EMIT
                 
                 ; SPACES   n --                  output n spaces
                 ;   BEGIN DUP WHILE SPACE 1- REPEAT DROP ;
01f100 e1f4              fdw     SPACE_L
                 SPACES_L:
01f101 7386
01f102 6170
01f103 6563
01f104 0073              .db     NFA|6,"spaces",0
                 SPACES:
                 SPCS1:
01f105 d217              rcall   DUPZEROSENSE
01f106 f019              breq    SPCS2
01f107 dff5              rcall   SPACE_
01f108 d166              rcall   ONEMINUS
01f109 cffb              rjmp    SPCS1
01f10a 940d f1b0 SPCS2:  jmp     DROP
                 
                 
                 ; umin     u1 u2 -- u           unsigned minimum
                 ;   2DUP U> IF SWAP THEN DROP ;
01f10c e202              fdw     SPACES_L
                 UMIN_L:
01f10d 7584
01f10e 696d
01f10f 006e              .db     NFA|4,"umin",0
                 UMIN:
01f110 dfdc              rcall   TWODUP
01f111 d1ab              rcall   UGREATER
01f112 c006              rjmp    MINMAX
                 
                 ; umax    u1 u2 -- u            unsigned maximum
                 ;   2DUP U< IF SWAP THEN DROP ;
01f113 e21a              fdw     UMIN_L
                 UMAX_L:
01f114 7584
01f115 616d
01f116 0078              .db     NFA|4,"umax",0
                 UMAX:
01f117 dfd5              rcall   TWODUP
01f118 d19d              rcall   ULESS
                 MINMAX:
01f119 d1fd              rcall   ZEROSENSE
01f11a f009              breq    UMAX1
01f11b d09b              rcall   SWOP
01f11c 940d f1b0 UMAX1:  jmp     DROP
                 
01f11e e228              fdw     UMAX_L
                 ONE_L:
01f11f 3181              .db     NFA|INLINE4|1,"1"
                 ONE:
01f120 939a
01f121 938a              pushtos
01f122 e081              ldi     tosl, 1
01f123 e090              ldi     tosh, 0
01f124 9508              ret
                 
                 ; ACCEPT  c-addr +n -- +n'  get line from terminal
01f125 e23e              fdw     ONE_L
                 ACCEPT_L:
01f126 6186
01f127 6363
01f128 7065
01f129 0074              .db     NFA|6,"accept",0
                 ACCEPT:
01f12a d096              rcall   OVER
01f12b d0cd              rcall   PLUS
01f12c d094              rcall   OVER
                 ACC1:
01f12d de76              rcall   KEY
                 
01f12e 308d              cpi     tosl, CR_
01f12f f429              brne    ACC_LF
                         
01f130 d571              rcall   TRUE_
01f131 d02f              rcall   FCR
01f132 d24b              rcall   CSTORE_A
01f133 d07c              rcall   DROP
01f134 c026              rjmp    ACC6
                 ACC_LF:
01f135 308a              cpi     tosl, LF_
01f136 f449              brne    ACC2
01f137 d078              rcall   DROP
                 
01f138 d028              rcall   FCR
01f139 d240              rcall   CFETCH_A
01f13a d1dc              rcall   ZEROSENSE
01f13b f0f9              breq    ACC6
01f13c d55c              rcall   FALSE_
01f13d d023              rcall   FCR
01f13e d23f              rcall   CSTORE_A
01f13f cfed              rjmp    ACC1
                 ACC2:
01f140 d558              rcall   FALSE_
01f141 d01f              rcall   FCR
01f142 d23b              rcall   CSTORE_A
01f143 d5bd              rcall   DUP
01f144 de59              rcall   EMIT
01f145 d5bb              rcall   DUP
01f146 d5b0              rcall   DOLIT
01f147 0008              .dw     BS_
01f148 d15d              rcall   EQUAL
01f149 d1cd              rcall   ZEROSENSE
01f14a f039              breq    ACC3
01f14b d064              rcall   DROP
01f14c d122              rcall   ONEMINUS
01f14d d083              rcall   TOR
01f14e d072              rcall   OVER
01f14f d08c              rcall   RFROM
01f150 dfc6              rcall   UMAX
01f151 cfdb              rjmp    ACC1
                 ACC3:
01f152 d06e              rcall   OVER
01f153 d22a              rcall   CSTORE_A
01f154 d115              rcall   ONEPLUS
01f155 d06b              rcall   OVER
01f156 dfb9              rcall   UMIN
01f157 df95              rcall   TWODUP
01f158 d148              rcall   NOTEQUAL
01f159 d1bd              rcall   ZEROSENSE
01f15a f691              brne     ACC1
                 ACC6:
01f15b d1fc              rcall   NIP
01f15c d05a              rcall   SWOP
01f15d 940d f206         jmp     MINUS
                 
01f15f 6683
01f160 7263              .db     NFA|3,"fcr"
                 FCR:
01f161 d2d4              rcall   DOUSER
01f162 fff5              .dw     uflg
                 
                 
                 ; TYPE    c-addr u --   type line to terminal u < $100
                 ; : type for c@+ emit next drop ;
                 
01f163 e24c              fdw      ACCEPT_L
                 TYPE_L:
01f164 7484
01f165 7079
01f166 0065              .db     NFA|4,"type",0
                 TYPE:
01f167 d069              rcall   TOR
01f168 c002              rjmp    TYPE2       ; XFOR
                 TYPE1:  
01f169 d335              rcall   CFETCHPP
01f16a de33              rcall   EMIT
                 TYPE2:
01f16b 940f f9b4         call    XNEXT
01f16d f7d8              brcc    TYPE1
01f16e 911f              pop     t1
01f16f 910f              pop     t0
01f170 940d f1b0         jmp     DROP
                 
                 
                 ; (S"    -- c-addr u      run-time code for S"
01f172 2883
01f173 2273              .db      NFA|3,"(s",0x22
                 XSQUOTE:
01f174 91ff              m_pop_zh
01f175 91ff              pop     zh
01f176 91ef              pop     zl
01f177 0fee              lsl     zl
01f178 1fff              rol     zh
01f179 9107              lpm_    t0, z+
01f17a 939a
01f17b 938a              pushtos
01f17c 01cf              movw    tosl, zl
                         add_pflash_tos
01f17d 939a
01f17e 938a              pushtos
01f17f 2f80              mov     tosl, t0
01f180 2799              clr     tosh
01f181 0fe0              add     zl, t0
01f182 1ff9              adc     zh, tosh
01f183 9631              adiw    zl, 1
01f184 9408              rampv_to_c
01f185 95f7              ror     zh
01f186 95e7              ror     zl
01f187 9419              mijmp
                 
01f188 e2c8              fdw     TYPE_L
                 SQUOTE_L:
01f189 73d2
01f18a 0022              .db      NFA|IMMED|COMPILE|2,"s",0x22,0
                 SQUOTE:
01f18b de82              rcall   DOCOMMAXT
01f18c e2e8              fdw     XSQUOTE
01f18d deb7              rcall   ROM_
01f18e d005              rcall   CQUOTE
01f18f 940d f053         jmp     FRAM
                 
01f191 e312              fdw     SQUOTE_L
                 CQUOTE_L:
01f192 2c82
01f193 0022              .db     NFA|2,",",0x22,0
                 CQUOTE: 
01f194 d562              rcall   DOLIT
01f195 0022              .dw     0x22
01f196 d2c6              rcall   PARSE
01f197 ded2              rcall   HERE
01f198 d028              rcall   OVER
01f199 d0d0              rcall   ONEPLUS
01f19a def8              rcall   ALIGNED
01f19b d00d              rcall   ALLOT
01f19c 940d f496         jmp     PLACE
                 
                 
01f19e e324              fdw     CQUOTE_L
                 DOTQUOTE_L:
01f19f 2ed2
01f1a0 0022              .db      NFA|IMMED|COMPILE|2,".",0x22,0
                 DOTQUOTE:
01f1a1 dfe9              rcall   SQUOTE
01f1a2 de6b              rcall   DOCOMMAXT
01f1a3 e2ce              fdw     TYPE
01f1a4 9508              ret
                 
01f1a5 e33e              fdw     DOTQUOTE_L
                 ALLOT_L:
01f1a6 6185
01f1a7 6c6c
01f1a8 746f              .db     NFA|5,"allot"
                 ALLOT:
01f1a9 deb0              rcall   DP
01f1aa 940d f28b         jmp     PLUSSTORE
                 
01f1ac e34c              fdw     ALLOT_L
                 DROP_L:
01f1ad 64a4
01f1ae 6f72
01f1af 0070              .db     NFA|INLINE|4,"drop",0
                 DROP:
01f1b0 9189
01f1b1 9199              poptos
01f1b2 9508              ret
                 
01f1b3 e35a              fdw     DROP_L
                 SWOP_L:
01f1b4 7384
01f1b5 6177
01f1b6 0070              .db     NFA|INLINE5|4,"swap",0
                 SWOP:
01f1b7 9109              ld      t0, y+
01f1b8 9119              ld      t1, y+
01f1b9 939a
01f1ba 938a              pushtos
01f1bb 01c8              movw    tosl, t0
01f1bc 9508              ret
                 
01f1bd e368              fdw     SWOP_L
                 OVER_L:
01f1be 6f84
01f1bf 6576
01f1c0 0072              .db     NFA|INLINE4|4,"over",0
                 OVER:
01f1c1 939a
01f1c2 938a              pushtos
01f1c3 818a              ldd     tosl, y+2
01f1c4 819b              ldd     tosh, y+3
01f1c5 9508              ret
                 
01f1c6 e37c              fdw     OVER_L
                 ROT_L:
01f1c7 7283
01f1c8 746f              .db     NFA|3, "rot"
                 ROT:
01f1c9 d007              rcall   TOR
01f1ca dfec              rcall   SWOP
01f1cb d010              rcall   RFROM
01f1cc 940d f1b7         jmp     SWOP
                 
01f1ce e38e              fdw     ROT_L
                 TOR_L:
01f1cf 3e92
01f1d0 0072              .db     NFA|COMPILE|2,">r",0
                 TOR:
01f1d1 91ff              m_pop_zh
01f1d2 91ff              pop     zh
01f1d3 91ef              pop     zl
01f1d4 938f              push    tosl
01f1d5 939f              push    tosh
01f1d6 9189
01f1d7 9199              poptos
01f1d8 9419              mijmp
                 
01f1d9 e39e              fdw     TOR_L
                 RFROM_L:
01f1da 7292
01f1db 003e              .db     NFA|COMPILE|2,"r>",0
                 RFROM:
01f1dc 91ff              m_pop_zh
01f1dd 91ff              pop     zh
01f1de 91ef              pop     zl
01f1df 939a
01f1e0 938a              pushtos
01f1e1 919f              pop     tosh
01f1e2 918f              pop     tosl
01f1e3 9419              mijmp
                 
01f1e4 e3b4              fdw     RFROM_L
                 RFETCH_L:
01f1e5 7292
01f1e6 0040              .db     NFA|COMPILE|2,"r@",0
                 RFETCH:
01f1e7 91ff              m_pop_zh
01f1e8 91ff              pop     zh
01f1e9 91ef              pop     zl
01f1ea 939a
01f1eb 938a              pushtos
01f1ec 919f              pop     tosh
01f1ed 918f              pop     tosl
01f1ee 938f              push    tosl
01f1ef 939f              push    tosh
01f1f0 9419              mijmp
                 
                 ;   ABS     n   --- n1      absolute value of n
01f1f1 edfe              fdw     DUP_L
                 ABS_L:
01f1f2 6183
01f1f3 7362              .db     NFA|3,"abs"
                 ABS_:
01f1f4 d50c              rcall   DUP
01f1f5 940d f367         jmp     QNEGATE
                 
01f1f7 e3e4              fdw     ABS_L
                 PLUS_L:
01f1f8 2b81              .db     NFA|INLINE4|1, "+"
                 
                 PLUS:
01f1f9 9109              ld      t0, Y+        
01f1fa 9119              ld      t1, Y+
01f1fb 0f80              add     tosl, t0
01f1fc 1f91              adc     tosh, t1
01f1fd 9508              ret
                 
                 ; m+  ( d n -- d1 )
01f1fe e3f0              fdw     PLUS_L
                 MPLUS_L:
01f1ff 6d82
01f200 002b              .db     NFA|2, "m+",0
                 MPLUS:
01f201 d7d6              rcall   STOD
01f202 940d f9fa         jmp     DPLUS
                 
01f204 e3fe              fdw     MPLUS_L
                 MINUS_L:
01f205 2d81              .db     NFA|INLINE5|1, "-"
                 MINUS:
01f206 9109              ld      t0, Y+
01f207 9119              ld      t1, Y+
01f208 1b08              sub     t0, tosl
01f209 0b19              sbc     t1, tosh
01f20a 01c8              movw    tosl, t0
01f20b 9508              ret
                 
                 FROM_LITBUF:
01f20c 9000 03b8         lds     r0, litbuf0
01f20e 9010 03b9         lds     r1, litbuf1
01f210 9508              ret
                 PLUSC_:
01f211 dffa              rcall   FROM_LITBUF
01f212 9400              com     r0
01f213 9410              com     r1
01f214 0c06              add     r0, r_one
01f215 1c15              adc     r1, r_zero
01f216 d00b              rcall   ANDIC1
01f217 c001              rjmp    MINUSC_1
                 MINUSC_:
01f218 d008              rcall   ANDIC0
                 MINUSC_1:
01f219 6590              ori     tosh, 0x50
01f21a d021              rcall   ICOMMA_
01f21b d4e5              rcall   DUP
01f21c 2d81              mov     tosl, r1
01f21d d007              rcall   ANDIC2
01f21e 6980              ori     tosl, 0x90
01f21f 6490              ori     tosh, 0x40
01f220 c01b              rjmp    ICOMMA_
                 ANDIC0:
01f221 dfea              rcall   FROM_LITBUF
                 ANDIC1:
01f222 d6fb              rcall   IDPMINUS
01f223 d6fa              rcall   IDPMINUS
01f224 2d80              mov     tosl, r0
                 ANDIC2:
01f225 2f98              mov     tosh, tosl
01f226 9592              swap    tosh
01f227 708f              andi    tosl, 0x0f
01f228 709f              andi    tosh, 0x0f
01f229 6880              ori     tosl, 0x80
01f22a 9508              ret
                 ANDIC_:
01f22b dff5              rcall   ANDIC0
01f22c 6790              ori     tosh, 0x70
01f22d d00e              rcall   ICOMMA_
01f22e d4d2              rcall   DUP
01f22f 2d81              mov     tosl, r1
01f230 dff4              rcall   ANDIC2
01f231 6980              ori     tosl, 0x90
01f232 6790              ori     tosh, 0x70
01f233 c008              rjmp    ICOMMA_
                 ORIC_:
01f234 dfec              rcall   ANDIC0
01f235 6690              ori     tosh, 0x60
01f236 d005              rcall   ICOMMA_
01f237 d4c9              rcall   DUP
01f238 2d81              mov     tosl, r1
01f239 dfeb              rcall   ANDIC2
01f23a 6980              ori     tosl, 0x90
01f23b 6690              ori     tosh, 0x60
                 ICOMMA_:
01f23c 940d ff88         jmp     ICOMMA
                 
01f23e e40a              fdw     MINUS_L
                 AND_L:
01f23f 6183
01f240 646e              .db     NFA|INLINE4|3, "and"
                 AND_:
01f241 9109              ld      t0, Y+
01f242 9119              ld      t1, Y+
01f243 2380              and     tosl, t0
01f244 2391              and     tosh, t1
01f245 9508              ret
                 
01f246 e47e              fdw     AND_L
                 OR_L:
01f247 6f82
01f248 0072              .db     NFA|INLINE4|2, "or",0
                 OR_:
01f249 9109              ld      t0, Y+
01f24a 9119              ld      t1, Y+
01f24b 2b80              or      tosl, t0
01f24c 2b91              or      tosh, t1
01f24d 9508              ret
                 
01f24e e48e              fdw     OR_L
                 XOR_L:
01f24f 7883
01f250 726f              .db     NFA|INLINE4|3, "xor"
                 XOR_:
01f251 9109              ld      t0, Y+
01f252 9119              ld      t1, Y+
01f253 2780              eor     tosl, t0
01f254 2791              eor     tosh, t1
01f255 9508              ret
                 
01f256 e49e              fdw     XOR_L
                 INVERT_L:
01f257 69a6
01f258 766e
01f259 7265
01f25a 0074              .db     NFA|INLINE|6, "invert",0
                 INVERT:
01f25b 9580              com     tosl
01f25c 9590              com     tosh
01f25d 9508              ret
                 
01f25e e4ae              fdw     INVERT_L
                 NEGATE_L:
01f25f 6e86
01f260 6765
01f261 7461
01f262 0065              .db     NFA|6, "negate",0
                 NEGATE:
01f263 9580              com     tosl
01f264 9590              com     tosh
01f265 9601              adiw    tosl, 1
01f266 9508              ret
                 
01f267 e4be              fdw     NEGATE_L
                 ONEPLUS_L:
01f268 31a2
01f269 002b              .db     NFA|INLINE|2, "1+",0
                 ONEPLUS:
01f26a 9601              adiw    tosl, 1
01f26b 9508              ret
                 
01f26c e4d0              fdw     ONEPLUS_L
                 ONEMINUS_L:
01f26d 31a2
01f26e 002d              .db     NFA|INLINE|2, "1-",0
                 ONEMINUS:
01f26f 9701              sbiw    tosl, 1
01f270 9508              ret
                 
01f271 e4da              fdw     ONEMINUS_L
                 TWOPLUS_L:
01f272 32a2
01f273 002b              .db     NFA|INLINE|2, "2+",0
                 TWOPLUS:
01f274 9602              adiw    tosl, 2
01f275 9508              ret
                 
01f276 e4e4              fdw     TWOPLUS_L
                 TOBODY_L:
01f277 3ea5
01f278 6f62
01f279 7964              .db     NFA|INLINE|5, ">body"
                 TOBODY:
01f27a 9604              adiw    tosl, 4
01f27b 9508              ret
                 
01f27c e4ee              fdw     TOBODY_L
                 TWOSTAR_L:
01f27d 32a2
01f27e 002a              .db     NFA|INLINE|2, "2*",0
                 TWOSTAR:
01f27f 0f88              lsl     tosl
01f280 1f99              rol     tosh
01f281 9508              ret
                 
01f282 e4fa              fdw     TWOSTAR_L
                 TWOSLASH_L:
01f283 32a2
01f284 002f              .db     NFA|INLINE|2, "2/",0
                 TWOSLASH:
01f285 9595              asr     tosh
01f286 9587              ror     tosl
01f287 9508              ret
                 
01f288 e506              fdw     TWOSLASH_L
                 PLUSSTORE_L:
01f289 2b82
01f28a 0021              .db     NFA|2,"+!",0
                 PLUSSTORE:
01f28b df2b              rcall   SWOP
01f28c df34              rcall   OVER
01f28d d3aa              rcall   FETCH_A
01f28e df6a              rcall   PLUS
01f28f df27              rcall   SWOP
01f290 940d fe93         jmp     STORE
                 
01f292 e512              fdw     PLUSSTORE_L
                 WITHIN_L:
01f293 7786
01f294 7469
01f295 6968
01f296 006e              .db     NFA|6,"within",0
                 WITHIN:
01f297 df29              rcall   OVER
01f298 df6d              rcall   MINUS
01f299 df37              rcall   TOR
01f29a df6b              rcall   MINUS
01f29b df40              rcall   RFROM
01f29c 940d f2b6         jmp     ULESS
                 
01f29e e526              fdw     WITHIN_L
                 NOTEQUAL_L:
01f29f 3c82
01f2a0 003e              .db     NFA|2,"<>",0
                 NOTEQUAL:
01f2a1 d004              rcall   EQUAL
01f2a2 940d f707         jmp     ZEROEQUAL
                 
01f2a4 ee18              fdw     ZEROLESS_L
                 EQUAL_L:
01f2a5 3d81              .db     NFA|1, "="
                 EQUAL:
01f2a6 df5f              rcall   MINUS
01f2a7 940d f707         jmp     ZEROEQUAL
                 
                 
01f2a9 e54a              fdw     EQUAL_L
                 LESS_L:
01f2aa 3c81              .db     NFA|1,"<"
                 LESS:
01f2ab df5a              rcall   MINUS
01f2ac 940d f70e         jmp     ZEROLESS
                 
01f2ae e554              fdw     LESS_L
                 GREATER_L:
01f2af 3e81              .db     NFA|1,">"
                 GREATER:
01f2b0 df06              rcall   SWOP
01f2b1 940d f2ab         jmp     LESS
                 
01f2b3 e55e              fdw     GREATER_L
                 ULESS_L:
01f2b4 7582
01f2b5 003c              .db     NFA|2,"u<",0
                 ULESS:
01f2b6 df4f              rcall   MINUS       ; Carry is valid after MINUS
01f2b7 0b88              sbc     tosl, tosl
01f2b8 0b99              sbc     tosh, tosh
01f2b9 9508              ret
                 
01f2ba e568              fdw     ULESS_L
                 UGREATER_L:
01f2bb 7582
01f2bc 003e              .db     NFA|2, "u>",0
                 UGREATER:
01f2bd def9              rcall   SWOP
01f2be 940d f2b6         jmp     ULESS
                 
01f2c0 e576              fdw     UGREATER_L
                 STORE_P_L:
01f2c1 2182
01f2c2 0070              .db     NFA|2,"!p",0
                 STORE_P:
01f2c3 01ac              movw    pl, tosl
01f2c4 9189
01f2c5 9199              poptos
01f2c6 9508              ret
                 
01f2c7 e582              fdw     STORE_P_L
                 STORE_P_TO_R_L:
01f2c8 2194
01f2c9 3e70
01f2ca 0072              .db     NFA|COMPILE|4,"!p>r",0
                 STORE_P_TO_R:
01f2cb 91ff              m_pop_zh
01f2cc 91ff              pop     zh
01f2cd 91ef              pop     zl
01f2ce 934f              push    pl
01f2cf 935f              push    ph
01f2d0 01ac              movw    pl, tosl
01f2d1 9189
01f2d2 9199              poptos
01f2d3 9419              mijmp
                 
01f2d4 e590              fdw     STORE_P_TO_R_L
                 R_TO_P_L:
01f2d5 7293
01f2d6 703e              .db     NFA|COMPILE|3,"r>p"
                 R_TO_P:
01f2d7 91ff              m_pop_zh
01f2d8 91ff              pop     zh
01f2d9 91ef              pop     zl
01f2da 915f              pop     ph
01f2db 914f              pop     pl
01f2dc 9419              mijmp
                 
01f2dd e5aa              fdw     R_TO_P_L
                 PFETCH_L:
01f2de 7082
01f2df 0040              .db     NFA|2,"p@",0
                 PFETCH:
01f2e0 939a
01f2e1 938a              pushtos
01f2e2 01ca              movw    tosl, pl
01f2e3 940d fed0         jmp     FETCH
                 
01f2e5 e5bc              fdw     PFETCH_L
                 PSTORE_L:
01f2e6 7082
01f2e7 0021              .db     NFA|2,"p!",0
                 PSTORE:
01f2e8 939a
01f2e9 938a              pushtos
01f2ea 01ca              movw    tosl, pl
01f2eb 940d fe93         jmp     STORE
                 
01f2ed e5cc              fdw     PSTORE_L
                 PCSTORE_L:
01f2ee 7083
01f2ef 2163              .db     NFA|3,"pc!"
                 PCSTORE:
01f2f0 939a
01f2f1 938a              pushtos
01f2f2 01ca              movw    tosl, pl
01f2f3 940d ff05         jmp     CSTORE
                 
01f2f5 e5dc              fdw     PCSTORE_L
                 PPLUS_L:
01f2f6 70a2
01f2f7 002b              .db     NFA|INLINE|2,"p+",0
                 PPLUS:
01f2f8 0d46              add     pl, r_one
01f2f9 1d55              adc     ph, r_zero
01f2fa 9508              ret   
                 
01f2fb e5ec              fdw     PPLUS_L
                 PNPLUS_L:
01f2fc 7083
01f2fd 2b2b              .db     NFA|3,"p++"
                 PNPLUS:
01f2fe 0f48              add     pl, tosl
01f2ff 1f59              adc     ph, tosh
01f300 9189
01f301 9199              poptos
01f302 9508              ret
                 
01f303 e5f8              fdw     PNPLUS_L
                 UEMIT_L:
01f304 2785
01f305 6d65
01f306 7469              .db     NFA|5,"'emit"
                 UEMIT_:
01f307 d12e              rcall   DOUSER
01f308 ffe8              .dw     uemit
                         
01f309 e608              fdw     UEMIT_L
                 UKEY_L:
01f30a 2784
01f30b 656b
01f30c 0079              .db     NFA|4,"'key",0
                 UKEY_:
01f30d d128              rcall   DOUSER
01f30e ffea              .dw     ukey
                 
01f30f e614              fdw     UKEY_L
                 UKEYQ_L:
01f310 2785
01f311 656b
01f312 3f79              .db     NFA|5,"'key?"
                 UKEYQ_:
01f313 d122              rcall   DOUSER
01f314 ffec              .dw     ukeyq
                 
01f315 3f83
01f316 3d30              .db     NFA|3,"?0="
                 ZEROSENSE:
01f317 9700              sbiw    tosl, 0
01f318 9189
01f319 9199              poptos
01f31a 9508              ret
                 
01f31b 6483
01f31c 3d30              .db     NFA|3,"d0="
                 DUPZEROSENSE:
01f31d 9700              sbiw    tosl, 0
01f31e 9508              ret
                 
01f31f e620              fdw     UKEYQ_L
                 UMSTAR_L:
01f320 7583
01f321 2a6d              .db     NFA|3,"um*"
                 UMSTAR:
01f322 940d ffae         jmp     umstar0
                 
01f324 e640              fdw     UMSTAR_L
                 UMSLASHMOD_L:
01f325 7586
01f326 2f6d
01f327 6f6d
01f328 0064              .db     NFA|6,"um/mod",0
                 UMSLASHMOD:
01f329 940d ffc7         jmp     umslashmod0
                 
                 
01f32b e64a              fdw     UMSLASHMOD_L
                 USLASHMOD_L:
01f32c 7585
01f32d 6d2f
01f32e 646f              .db     NFA|5,"u/mod"
                 USLASHMOD:
01f32f d369              rcall   FALSE_
01f330 de86              rcall   SWOP
01f331 940d ffc7         jmp     umslashmod0
                 
01f333 e658              fdw     USLASHMOD_L
                 STAR_L:
01f334 2a81              .db     NFA|1,"*"
                 STAR: 
01f335 dfec              rcall   UMSTAR
01f336 940d f1b0         jmp     DROP
                 
01f338 e668              fdw     STAR_L
                 USLASH_L:
01f339 7582
01f33a 002f              .db     NFA|2,"u/",0
                 USLASH:
01f33b dff3              rcall   USLASHMOD
01f33c 940d f358         jmp     NIP
                 
01f33e e672              fdw     USLASH_L
                 USSMOD_L:
01f33f 7586
01f340 2f2a
01f341 6f6d
01f342 0064              .db     NFA|6,"u*/mod",0
                 USSMOD:
01f343 de8d              rcall   TOR
01f344 dfdd              rcall   UMSTAR
01f345 de96              rcall   RFROM
01f346 940d f329         jmp     UMSLASHMOD
                 
                 
01f348 e67e              fdw     USSMOD_L
                 SLASH_L:
01f349 2f81              .db     NFA|1,"/"
                 SLASH: 
01f34a dda2              rcall   TWODUP
01f34b df05              rcall   XOR_
01f34c de84              rcall   TOR
01f34d dea6              rcall   ABS_
01f34e de68              rcall   SWOP
01f34f dea4              rcall   ABS_
01f350 de66              rcall   SWOP
01f351 dfe9              rcall   USLASH
01f352 de89              rcall   RFROM
01f353 940d f367         jmp     QNEGATE
                 
01f355 e692              fdw     SLASH_L
                 NIP_L:
01f356 6ea3
01f357 7069              .db     NFA|INLINE|3,"nip"
                 NIP:
01f358 9109              ld      t0, y+
01f359 9109              ld      t0, y+
01f35a 9508              ret
                     
01f35b e6ac              fdw     NIP_L
                 TUCK_L:
01f35c 7484
01f35d 6375
01f35e 006b              .db     NFA|4,"tuck",0
                 TUCK:
01f35f de57              rcall   SWOP
01f360 940d f1c1         jmp     OVER
                 
01f362 e6b8              fdw     TUCK_L
                 QNEGATE_L:
01f363 3f87
01f364 656e
01f365 6167
01f366 6574              .db     NFA|7,"?negate"
                 QNEGATE:
01f367 d3a6              rcall   ZEROLESS
01f368 dfae              rcall   ZEROSENSE
01f369 f009              breq    QNEGATE1
01f36a def8              rcall   NEGATE
                 QNEGATE1:
01f36b 9508              ret
                 
01f36c e6c6              fdw     QNEGATE_L
                 MAX_L:
01f36d 6d83
01f36e 7861              .db     NFA|3,"max"
01f36f dd7d      MAX:    rcall   TWODUP
01f370 df3a              rcall   LESS
01f371 cda7              rjmp    MINMAX
                 
01f372 e6da              fdw     MAX_L
                 MIN_L:
01f373 6d83
01f374 6e69              .db     NFA|3,"min"
01f375 dd77      MIN:    rcall   TWODUP
01f376 df39              rcall   GREATER
01f377 cda1              rjmp    MINMAX
                 
01f378 6382
01f379 0040              .db     NFA|2,"c@",0
                 CFETCH_A:       
01f37a 940d feeb         jmp     CFETCH
                 
01f37c 6382
01f37d 0021              .db     NFA|2,"c!",0
                 CSTORE_A:       
01f37e 940d ff05         jmp     CSTORE
                 
01f380 e6e6              fdw     MIN_L
                 UPTR_L:
01f381 7582
01f382 0070              .db     NFA|2,"up",0
01f383 dc6e      UPTR:   rcall   DOCREATE
01f384 0002              .dw     2 ; upl
                 
01f385 e702              fdw     UPTR_L
                 HOLD_L:
01f386 6884
01f387 6c6f
01f388 0064              .db     NFA|4,"hold",0
01f389 d318      HOLD:   rcall   TRUE_
01f38a d092              rcall   HP
01f38b deff              rcall   PLUSSTORE
01f38c d090              rcall   HP
01f38d d2aa              rcall   FETCH_A
01f38e 940d ff05         jmp     CSTORE
                 
                 ; <#    --              begin numeric conversion
                 ;   PAD HP ! ;          (initialize Hold Pointer)
01f390 e70c              fdw     HOLD_L
                 LESSNUM_L:
01f391 3c82
01f392 0023              .db     NFA|2,"<#",0
                 LESSNUM: 
01f393 d08e              rcall   PAD
01f394 d088              rcall   HP
01f395 940d fe93         jmp     STORE
                 
                 ; digit   n -- c            convert to 0..9a..z
01f397 e722              fdw     LESSNUM_L
                 TODIGIT_L:
01f398 6485
01f399 6769
01f39a 7469              .db     NFA|5,"digit"
                 TODIGIT:
01f39b 308a              cpi     tosl, 0xa
01f39c f00c              brlt    TODIGIT1
01f39d 9687              adiw    tosl, 0x27
                 TODIGIT1:
01f39e 96c0              adiw    tosl, 0x30
01f39f 9508              ret
                 
                 ; #     ud1 -- ud2     convert 1 digit of output
                 ;   base @ ud/mod rot >digit hold ;
01f3a0 e730              fdw     TODIGIT_L
                 NUM_L:
01f3a1 2381              .db     NFA|1,"#"
                 NUM:
01f3a2 d087              rcall   BASE
01f3a3 d294              rcall   FETCH_A
01f3a4 d183              rcall   UDSLASHMOD
01f3a5 de23              rcall   ROT
01f3a6 dff4              rcall   TODIGIT
01f3a7 940d f389         jmp     HOLD
                 
                 ; #S    ud1 -- ud2      convert remaining digits
                 ;   begin # 2dup or 0= until ;
01f3a9 e742              fdw     NUM_L
                 NUMS_L:
01f3aa 2382
01f3ab 0073              .db     NFA|2,"#s",0
                 NUMS:
01f3ac dff5              rcall   NUM
01f3ad dd3f              rcall   TWODUP
01f3ae de9a              rcall   OR_
01f3af df67              rcall   ZEROSENSE
01f3b0 f7d9              brne    NUMS
01f3b1 9508              ret
                 
                 ; #>    ud1 -- c-addr u    end conv., get string
                 ;   2drop hp @ pad over - ;
01f3b2 e754              fdw     NUMS_L
                 NUMGREATER_L:
01f3b3 2382
01f3b4 003e              .db     NFA|2,"#>", 0
                 NUMGREATER:
01f3b5 dd30              rcall   TWODROP
01f3b6 d066              rcall   HP
01f3b7 d280              rcall   FETCH_A
01f3b8 d069              rcall   PAD
01f3b9 de07              rcall   OVER
01f3ba 940d f206         jmp     MINUS
                 
                 ; SIGN  n --               add minus sign if n<0
                 ;   0< IF 2D HOLD THEN ; 
01f3bc e766              fdw     NUMGREATER_L
                 SIGN_L:
01f3bd 7384
01f3be 6769
01f3bf 006e              .db     NFA|4,"sign",0
                 SIGN:
01f3c0 3090              cpi     tosh, 0
01f3c1 f41a              brpl    SIGN1
01f3c2 d334              rcall   DOLIT
01f3c3 002d              .dw     0x2D
01f3c4 dfc4              rcall   HOLD
                 SIGN1:
01f3c5 940d f1b0         jmp     DROP
                 
                 ; U.    u --                  display u unsigned
                 ;   <# 0 #S #> TYPE SPACE ;
01f3c7 e77a              fdw     SIGN_L
                 UDOT_L:
01f3c8 7582
01f3c9 002e              .db     NFA|2,"u.",0
                 UDOT:
01f3ca dfc8              rcall   LESSNUM
01f3cb d2cd              rcall   FALSE_
01f3cc dfdf              rcall   NUMS
01f3cd dfe7              rcall   NUMGREATER
01f3ce dd98              rcall   TYPE
01f3cf 940d f0fd         jmp     SPACE_
                 
                 
                 ; U.R    u +n --      display u unsigned in field of n. 1<n<=255 
                 ;    0 swap <# 1- for # next #s #> type space ;
01f3d1 e790              fdw     UDOT_L
                 UDOTR_L:
01f3d2 7583
01f3d3 722e              .db     NFA|3,"u.r"
                 UDOTR:
01f3d4 dfbe              rcall   LESSNUM
01f3d5 de99              rcall   ONEMINUS
01f3d6 ddfa              rcall   TOR
01f3d7 d2c1              rcall   FALSE_
01f3d8 c001              rjmp    UDOTR2
                 UDOTR1:
01f3d9 dfc8              rcall   NUM
                 UDOTR2: 
01f3da d5d9              rcall   XNEXT
01f3db f7e8              brcc    UDOTR1
01f3dc 911f              pop     t1
01f3dd 910f              pop     t0
01f3de dfcd              rcall   NUMS
01f3df dfd5              rcall   NUMGREATER
01f3e0 dd86              rcall   TYPE
01f3e1 940d f0fd         jmp     SPACE_
                 
                 ; .     n --                    display n signed
                 ;   <# DUP ABS #S SWAP SIGN #> TYPE SPACE ;
01f3e3 e7a4              fdw     UDOTR_L
                 DOT_L:
01f3e4 2e81              .db     NFA|1,"."
01f3e5 dfad      DOT:    rcall   LESSNUM
01f3e6 d31a              rcall   DUP
01f3e7 de0c              rcall   ABS_
01f3e8 d2b0              rcall   FALSE_
01f3e9 dfc2              rcall   NUMS
01f3ea ddde              rcall   ROT
01f3eb dfd4              rcall   SIGN
01f3ec dfc8              rcall   NUMGREATER
01f3ed dd79              rcall   TYPE
01f3ee 940d f0fd         jmp     SPACE_
                 
01f3f0 e7c8              FDW     DOT_L
                 DECIMAL_L:
01f3f1 6487
01f3f2 6365
01f3f3 6d69
01f3f4 6c61              .db     NFA|7,"decimal"
                 DECIMAL: 
01f3f5 d27b              rcall   TEN
01f3f6 d033              rcall   BASE
01f3f7 940d fe93         jmp     STORE
                 
                 ; HEX     --              set number base to hex
                 ;   #16 BASE ! ;
01f3f9 e7e2              Fdw     DECIMAL_l
                 HEX_L:
01f3fa 6883
01f3fb 7865              .db     NFA|3,"hex"
                 HEX:
01f3fc d2fa              rcall   DOLIT
01f3fd 0010              .dw     16
01f3fe d02b              rcall   BASE
01f3ff 940d fe93         jmp     STORE
                 
                 ; BIN     --              set number base to binary
                 ;   #2 BASE ! ;
01f401 e7f4              Fdw     HEX_L
                 BIN_L:
01f402 6283
01f403 6e69              .db     NFA|3,"bin"
01f404 dc7b      BIN:    rcall   CELL
01f405 d024              rcall   BASE
01f406 940d fe93         jmp     STORE
                 
                 ; RSAVE   -- a-addr     Saved return stack pointer
01f408 e804              fdw     BIN_L
                 RSAVE_L:
01f409 7285
01f40a 6173
01f40b 6576              .db     NFA|5,"rsave"
01f40c d029      RSAVE_: rcall   DOUSER
01f40d fffe              .dw     ursave
                 
                 
                 ; ULINK   -- a-addr     link to next task
01f40e e812              fdw     RSAVE_L
                 ULINK_L:
01f40f 7585
01f410 696c
01f411 6b6e              .db     NFA|5,"ulink"
01f412 d023      ULINK_: rcall   DOUSER
01f413 fffc              .dw     ulink
                 
                 
                 ; TASK       -- a-addr              TASK pointer
01f414 e81e              fdw     ULINK_L
                 TASK_L:
01f415 7484
01f416 7361
01f417 006b              .db     NFA|4,"task",0
01f418 d01d      TASK:   rcall   DOUSER
01f419 fff2              .dw     utask
                 
                 
                 ; HP       -- a-addr                HOLD pointer
01f41a e82a              fdw     TASK_L
                 HP_L:
01f41b 6882
01f41c 0070              .db     NFA|2,"hp",0
01f41d d018      HP:     rcall   DOUSER
01f41e 0000              .dw     uhp
                 
                 ; PAD     -- a-addr        User Pad buffer
01f41f e836              fdw     HP_L
                 PAD_L:
01f420 7083
01f421 6461              .db     NFA|3,"pad"
                 PAD:
01f422 d17c              rcall   TIB
01f423 d173              rcall   TIBSIZE
01f424 940d f1f9         jmp     PLUS
                 
                 ; BASE    -- a-addr       holds conversion radix
01f426 e840              fdw     PAD_L
                 BASE_L:
01f427 6284
01f428 7361
01f429 0065              .db     NFA|4,"base",0
                 BASE:
01f42a d00b              rcall   DOUSER
01f42b ffee              .dw     ubase
                 
                 ; USER   n --
01f42c e84e              fdw     BASE_L
                 USER_L:
01f42d 7584
01f42e 6573
01f42f 0072              .db     NFA|4,"user",0
                 USER:
01f430 d31a              rcall   CREATE
01f431 dc4e              rcall   CELL
01f432 de30              rcall   NEGATE
01f433 d4b3              rcall   IALLOT
01f434 de07              rcall   ICOMMA_
01f435 d367              rcall   XDOES
                 DOUSER:
01f436 91ff              m_pop_zh
01f437 91ff              pop     zh
01f438 91ef              pop     zl
01f439 dbcb              rcall   FETCHLIT
01f43a 0d82              add     tosl, upl
01f43b 1d93              adc     tosh, uph
01f43c 9508              ret
                 
                 ; SOURCE   -- adr n         current input buffer
                 ;   'SOURCE 2@ ;        length is at higher adrs
01f43d e85a              fdw     USER_L
                 SOURCE_L:
01f43e 7386
01f43f 756f
01f440 6372
01f441 0065              .db     NFA|6,"source",0
                 SOURCE:
01f442 d16e              rcall   TICKSOURCE
01f443 940d f0d3         jmp     TWOFETCH
                 
                 
                 ; /STRING  a u n -- a+n u-n          trim string
                 ;   swap over - >r + r>
01f445 e87c              fdw      SOURCE_L
                 SLASHSTRING_L:
01f446 2f87
01f447 7473
01f448 6972
01f449 676e              .db     NFA|7,"/string"
                 SLASHSTRING:
01f44a dd6c              rcall   SWOP
01f44b dd75              rcall   OVER
01f44c ddb9              rcall   MINUS
01f44d dd83              rcall   TOR
01f44e ddaa              rcall   PLUS
01f44f dd8c              rcall   RFROM
01f450 9508              ret
                 
                 ; \     Skip the rest of the line
01f451 e88c              fdw     SLASHSTRING_L
                 BSLASH_L:
01f452 5cc1              .db     NFA|IMMED|1,0x5c
                 BSLASH:
01f453 dfee              rcall   SOURCE
01f454 d155              rcall   TOIN
01f455 d057              rcall   STORE_A
01f456 6460              sbr     FLAGS1, (1<<noclear)  ; dont clear flags in case of \
01f457 940d f1b0         jmp     DROP
                 
                 ; PARSE  char -- c-addr u
01f459 e8a4              fdw     BSLASH_L
                 PARSE_L:
01f45a 7085
01f45b 7261
01f45c 6573              .db     NFA|5,"parse"
                 PARSE:
01f45d d2a3              rcall   DUP             ; c c
01f45e dfe3              rcall   SOURCE          ; c c a u
01f45f d14a              rcall   TOIN            ; c c a u a
01f460 d1d7              rcall   FETCH_A         ; c c a u n
01f461 dfe8              rcall   SLASHSTRING     ; c c a u   new tib addr/len
01f462 938f              push    tosl
01f463 939f              push    tosh            ; c c a u                  R: u (new tib len
01f464 dd64              rcall   ROT             ; c a u c
01f465 dadf              rcall   SKIP            ; c a u        
01f466 dd5a              rcall   OVER            ; c a u a
01f467 dd69              rcall   TOR             ; c a u                    R: u a (start of word
01f468 dd60              rcall   ROT             ; a u c
01f469 daf6              rcall   SCAN            ; a u      end of word, tib left       
01f46a deb2              rcall   DUPZEROSENSE
01f46b f009              breq    PARSE1
01f46c de02              rcall   ONEMINUS
01f46d dd6e      PARSE1: rcall   RFROM           ; a u a
01f46e dd6d              rcall   RFROM           ; a u a u
01f46f dd59              rcall   ROT             ; a a u u
01f470 dd95              rcall   MINUS           ; a a n  ( addition to toin
01f471 d138              rcall   TOIN
01f472 de18              rcall   PLUSSTORE       ; aend astart
01f473 deeb              rcall   TUCK            ; astart aend astart
01f474 940d f206         jmp     MINUS           ; astart wlen
                      
                 
                 ; WORD   char -- c-addr        word delimited by char and/or TAB
01f476 e8b4              fdw     PARSE_L
                 WORD_L:
01f477 7784
01f478 726f
01f479 0064              .db     NFA|4,"word",0
                 WORD:
01f47a dfe2              rcall   PARSE           ; c-addr wlen
01f47b dd3b              rcall   SWOP
01f47c ddf2              rcall   ONEMINUS
01f47d dee1              rcall   TUCK
01f47e 940d ff05         jmp     CSTORE          ; Write the length into the TIB ! 
                 
                 ; CMOVE  src dst u --  copy u bytes from src to dst
                 ; cmove swap !p for c@+ pc! p+ next drop ;
01f480 e8ee              fdw     WORD_L
                 CMOVE_L:
01f481 6385
01f482 6f6d
01f483 6576              .db     NFA|5,"cmove"
                 CMOVE:
01f484 dd32              rcall   SWOP
01f485 de45              rcall   STORE_P_TO_R
01f486 dd4a              rcall   TOR
01f487 c003              rjmp    CMOVE2
                 CMOVE1:
01f488 d016              rcall   CFETCHPP
01f489 de66              rcall   PCSTORE
01f48a de6d              rcall   PPLUS
                 CMOVE2:
01f48b d528              rcall   XNEXT
01f48c f7d8              brcc    CMOVE1
01f48d 911f              pop     t1
01f48e 910f              pop     t0
01f48f de47              rcall   R_TO_P
01f490 940d f1b0         jmp     DROP
                 
                 
                 ; place  src n dst --     place as counted str
01f492 e902              fdw     CMOVE_L
                 PLACE_L:
01f493 7085
01f494 616c
01f495 6563              .db     NFA|5,"place"
                 PLACE: 
01f496 dc56              rcall   TWODUP
01f497 dee6              rcall   CSTORE_A
01f498 dc0e              rcall   CHARPLUS
01f499 dd1d              rcall   SWOP
01f49a 940d f484         jmp     CMOVE
                 
                 ; :     c@+ ( addr -- addr+1 n ) dup 1+ swap c@ ;
01f49c e926              fdw     PLACE_L
                 CFETCHPP_L:
01f49d 6383
01f49e 2b40              .db     NFA|3,"c@+"
                 CFETCHPP:
01f49f d261              rcall   DUP
01f4a0 ddc9              rcall   ONEPLUS
01f4a1 dd15              rcall   SWOP
01f4a2 940d feeb         jmp     CFETCH
                 
                 ; :     @+ ( addr -- addr+2 n ) dup 2+ swap @ ;
01f4a4 e93a              fdw     CFETCHPP_L
                 FETCHPP_L:
01f4a5 4082
01f4a6 002b              .db     NFA|2,"@+",0
                 FETCHPP:
01f4a7 d259              rcall   DUP
01f4a8 ddcb              rcall   TWOPLUS
01f4a9 dd0d              rcall   SWOP
01f4aa 940d fed0         jmp     FETCH
                 
01f4ac 2181              .db     NFA|1,"!"
                 STORE_A:        
01f4ad 940d fe93         jmp     STORE
                 
                 ; N>C   nfa -- cfa    name adr -> code field
01f4af e94a              fdw    FETCHPP_L
                 NTOC_L:
01f4b0 6e83
01f4b1 633e              .db     NFA|3,"n>c"
                 NFATOCFA:
01f4b2 dfec              rcall   CFETCHPP
01f4b3 708f              andi    tosl, 0x0f
01f4b4 dd44              rcall   PLUS
01f4b5 940d f093         jmp     ALIGNED
                 
                 ; C>N   cfa -- nfa    code field addr -> name field addr
01f4b7 e960              fdw    NTOC_L
                 CTON_L:
01f4b8 6383
01f4b9 6e3e              .db     NFA|3,"c>n"
                 CFATONFA:
01f4ba d350              rcall   TWOMINUS
01f4bb d245              rcall   DUP
01f4bc debd              rcall   CFETCH_A
01f4bd 940f fe8c         call    TO_A
01f4bf ff27              sbrs    al, 7
01f4c0 f3c9              breq    CFATONFA
01f4c1 9508              ret
                 
                 ; findi   c-addr nfa -- c-addr 0   if not found
                 ;                          xt  1      if immediate
                 ;                          xt -1      if "normal"
01f4c2 e970              fdw     CTON_L
                 BRACFIND_L:
01f4c3 2883
01f4c4 2966              .db     NFA|3,"(f)"
                 findi:
                 findi1:
                 FIND_1: 
01f4c5 dc27              rcall   TWODUP
01f4c6 da5b              rcall   NEQUAL
01f4c7 de55              rcall   DUPZEROSENSE
01f4c8 f021              breq    findi2
01f4c9 dce6              rcall   DROP
01f4ca d340              rcall   TWOMINUS ;;;      NFATOLFA
01f4cb d16c              rcall   FETCH_A
01f4cc d234              rcall   DUP
                 findi2:
01f4cd de49              rcall   ZEROSENSE
01f4ce f7b1              brne    findi1
01f4cf de4d              rcall   DUPZEROSENSE
01f4d0 f041              breq    findi3
01f4d1 de86              rcall   NIP
01f4d2 d22e              rcall   DUP
01f4d3 dfde              rcall   NFATOCFA
01f4d4 dce2              rcall   SWOP
01f4d5 d009              rcall   IMMEDQ
01f4d6 d230              rcall   ZEROEQUAL
01f4d7 dc48              rcall   ONE
01f4d8 dd70              rcall   OR_
                 findi3: 
01f4d9 9508              ret
                 
                 ; IMMED?    nfa -- f        fetch immediate flag
01f4da e986              fdw     BRACFIND_L
                 IMMEDQ_L:
01f4db 6986
01f4dc 6d6d
01f4dd 6465
01f4de 003f              .db     NFA|6,"immed?",0
                 IMMEDQ: 
01f4df de9a              rcall   CFETCH_A
01f4e0 2e98              mov     wflags, tosl  ; COMPILE and INLINE flags for the compiler
01f4e1 7480              andi    tosl, IMMED
01f4e2 9508              ret
                 
                 ; FIND   c-addr -- c-addr 0   if not found
                 ;                  xt  1      if immediate
                 ;                  xt -1      if "normal"
01f4e3 e9b6              fdw     IMMEDQ_L
                 FIND_L:
01f4e4 6684
01f4e5 6e69
01f4e6 0064              .db     NFA|4,"find",0
                 FIND:   
01f4e7 d20f              rcall   DOLIT
01f4e8 f550              fdw     kernellink
01f4e9 dfdb              rcall   findi
01f4ea de32              rcall   DUPZEROSENSE
01f4eb f421              brne    FIND1
01f4ec dcc3              rcall   DROP
01f4ed d335              rcall   LATEST_
01f4ee d149              rcall   FETCH_A
01f4ef dfd5              rcall   findi
                 FIND1:
01f4f0 9508              ret
                 
                 ; DIGIT?   c -- n -1   if c is a valid digit
01f4f1 e9c8              fdw     FIND_L
                 DIGITQ_L:
01f4f2 6486
01f4f3 6769
01f4f4 7469
01f4f5 003f              .db     NFA|6,"digit?",0
                 DIGITQ:
                                                 ; 1 = 0x31    a = 0x61
01f4f6 3480              cpi     tosl, 0x40
01f4f7 f00c              brlt    DIGITQ1
01f4f8 9787              sbiw    tosl, 0x27
                 DIGITQ1:        
01f4f9 97c0              sbiw    tosl, 0x30      ; 1
01f4fa f40a              brpl    DIGITQ2
01f4fb c19d              rjmp    FALSE_
                 DIGITQ2:
01f4fc d204              rcall   DUP             ; 1 1
01f4fd df2c              rcall   BASE            ; 1 1 base
01f4fe d139              rcall   FETCH_A         ; 1 1 10
01f4ff 940d f2ab         jmp     LESS            ; 1 ffff
                 
                 
                 ; SIGN?   adr n -- adr' n' f   get optional sign
                 ; + leaves $0000 flag
                 ; - leaves $0002 flag
01f501 e9e4              fdw     DIGITQ_L
                 SIGNQ_L:
01f502 7385
01f503 6769
01f504 3f6e              .db     NFA|5,"sign?"
                 SIGNQ:
01f505 dcbb              rcall   OVER
01f506 de73              rcall   CFETCH_A
01f507 2f08              mov     t0, tosl
01f508 dca7              rcall   DROP
01f509 320d              cpi     t0, '-'
01f50a f019              breq    SIGNQMINUS
01f50b 320b              cpi     t0, '+'
01f50c f019              breq    SIGNQPLUS
01f50d c003              rjmp    SIGNQEND
                 SIGNQMINUS:
01f50e d004              rcall   SLASHONE
01f50f c192              rjmp    TRUE_
                 SIGNQPLUS:
01f510 d002              rcall   SLASHONE
                 SIGNQEND:
01f511 940d f699         jmp     FALSE_
                 SLASHONE:
01f513 dc0c              rcall   ONE
01f514 940d f44a         jmp     SLASHSTRING
                 
                 ; UD*  ud u -- ud
01f516 ea04              fdw     SIGNQ_L
                 UDSTAR_L:
01f517 7583
01f518 2a64              .db     NFA|3,"ud*"
                 UDSTAR:
01f519 938f              push    tosl
01f51a 939f              push    tosh
01f51b de06              rcall   UMSTAR
01f51c dc93              rcall   DROP
01f51d dc99              rcall   SWOP
01f51e dcbd              rcall   RFROM
01f51f de02              rcall   UMSTAR
01f520 dca8              rcall   ROT
01f521 940d f1f9         jmp     PLUS
                         
                 ; UD/MOD  ud u --u(rem) ud(quot)
01f523 ea2e              fdw     UDSTAR_L
                 UDSLASHMOD_L:
01f524 7586
01f525 2f64
01f526 6f6d
01f527 0064              .db     NFA|6,"ud/mod",0
                 UDSLASHMOD:
01f528 dca8              rcall   TOR             ; ud.l ud.h 
01f529 d16f              rcall   FALSE_          ; ud.l ud.h 0
01f52a dcbc              rcall   RFETCH          ; ud.l ud.h 0 u
01f52b ddfd              rcall   UMSLASHMOD      ; ud.l r.h q.h
01f52c dc9c              rcall   ROT             ; r.h q.h ud.l
01f52d dc9b              rcall   ROT             ; q.h ud.l r.h
01f52e dcad              rcall   RFROM           ; q.h ud.l r.h u
01f52f ddf9              rcall   UMSLASHMOD      ; q.h r.l q.l
01f530 940d f1c9         jmp     ROT             ; r.l q.l q.h
                         
                 ; >NUMBER  0 0 adr u -- ud.l ud.h adr' u'
                 ;                       convert string to number
01f532 ea48              fdw     UDSLASHMOD_L
                 TONUMBER_L:
01f533 3e87
01f534 756e
01f535 626d
01f536 7265              .db     NFA|7,">number"
                 TONUMBER:
01f537 e021              ldi     al, 1
                 TONUM1:
01f538 dde4              rcall   DUPZEROSENSE      ; ud.l ud.h adr u
01f539 f0d1              breq    TONUM3
01f53a dc96              rcall   TOR
01f53b 938f              push    tosl             ; dup >r
01f53c 939f              push    tosh             ; ud.l ud.h adr
01f53d de3c              rcall   CFETCH_A
01f53e 328e              cpi     tosl, '.'
01f53f f079              breq    TONUM_SKIP
01f540 dfb5              rcall   DIGITQ          ; ud.l ud.h digit flag
01f541 ddd5              rcall   ZEROSENSE
01f542 f421              brne    TONUM2
01f543 dc6c              rcall   DROP
01f544 dc97              rcall   RFROM
01f545 dc96              rcall   RFROM
01f546 c00d              rjmp    TONUM3
                 TONUM2: 
01f547 dc89              rcall   TOR             ; ud.l ud.h digit
01f548 dee1              rcall   BASE
01f549 d0ee              rcall   FETCH_A
01f54a dfce              rcall   UDSTAR
01f54b dc90              rcall   RFROM
01f54c dcb4              rcall   MPLUS
01f54d e020              ldi     al, 0
01f54e c001              rjmp    TONUM_CONT
                 TONUM_SKIP:
01f54f dc60              rcall   DROP
                 TONUM_CONT:
01f550 dc8b              rcall   RFROM
01f551 dc8a              rcall   RFROM
01f552 dfc0              rcall   SLASHONE
01f553 cfe4              rjmp    TONUM1
                 TONUM3:
01f554 0f82              add     tosl, al
01f555 9508              ret
                 
                 ; NUMBER?  c-addr -- n 1
                 ;                 -- dl dh 2
                 ;                 -- c-addr 0  if convert error
01f556 ea66              fdw     TONUMBER_L
                 NUMBERQ_L:
01f557 6e87
01f558 6d75
01f559 6562
01f55a 3f72              .db     NFA|7,"number?"
                 NUMBERQ:
01f55b d1a5              rcall   DUP             ; a a
01f55c d13c              rcall   FALSE_          ; a a 0 0
01f55d d13b              rcall   FALSE_          ; a a 0 0
01f55e dc6a              rcall   ROT             ; a 0 0 a
01f55f df3f              rcall   CFETCHPP        ; a 0 0 a' u
01f560 dfa4              rcall   SIGNQ           ; a 0 0 a' u f
01f561 dc6f              rcall   TOR             ; a 0 0 a' u
                 
01f562 dec7              rcall   BASE
01f563 d0d4              rcall   FETCH_A
01f564 dc6c              rcall   TOR             ; a 0 0 a' u
                         
01f565 dc5b              rcall   OVER
01f566 de13              rcall   CFETCH_A
                         
01f567 9783              sbiw    tosl, '#'
01f568 3083              cpi     tosl, 3
01f569 f438              brsh    BASEQ1
                 
01f56a db35              rcall   CELLS
01f56b d18b              rcall   DOLIT
01f56c ffce              fdw     BASEQV
01f56d dc8b              rcall   PLUS
01f56e da4e              rcall   FEXECUTE
                 
01f56f dfa3              rcall   SLASHONE
01f570 c001              rjmp    BASEQ2
                 BASEQ1:
01f571 dc3e              rcall   DROP
                 BASEQ2:                         ; a 0 0 a' u
01f572 dfc4              rcall   TONUMBER        ; a ud.l ud.h  a' u
01f573 dc68              rcall   RFROM           ; a ud.l ud.h  a' u oldbase
01f574 deb5              rcall   BASE            ; a ud.l ud.h  a' u oldbase addr
01f575 df37              rcall   STORE_A         ; a ud.l ud.h  a' u
01f576 dda0              rcall   ZEROSENSE       ; a ud.l ud.h  a' u
01f577 f029              breq    QNUMD
                 QNUM_ERR:                       ; Not a number
01f578 dc63              rcall   RFROM           ; a ud.l ud.h a' u sign
01f579 db6c              rcall   TWODROP
01f57a db6b              rcall   TWODROP
01f57b d11d              rcall   FALSE_          ; a 0           Not a number
01f57c c011              rjmp    QNUM3
                 QNUMD:                          ; Single or Double number
                                                 ; a ud.l ud.h a'
01f57d 9701              sbiw    tosl, 1
01f57e ddfb              rcall   CFETCH_A        ; a ud.l ud.h c
01f57f 940f fe8c         call    TO_A
01f581 dc5a              rcall   RFROM           ; a a' u ud.l ud.d sign
01f582 dd94              rcall   ZEROSENSE
01f583 f009              breq    QNUMD1
01f584 d45b              rcall   DNEGATE
                 QNUMD1:
01f585 322e              cpi     al, '.'         ; a d.l d.h
01f586 f421              brne    QNUM1
01f587 dc41              rcall   ROT             ; d.l d.h a
01f588 e082              ldi     tosl, 2
01f589 e090              ldi     tosh, 0         ; d.l d.h 2    Double number
01f58a c003              rjmp    QNUM3
                 QNUM1:                          ; single precision dumber
                                                 ; a d.l d.h
01f58b dc24              rcall   DROP            ; a n
01f58c ddcb              rcall   NIP             ; n
01f58d db92              rcall   ONE             ; n 1           Single number
                 QNUM3:  
01f58e 9508              ret
                 
                 
01f58f 7384
01f590 6177
01f591 0070              .db     NFA|4,"swap",0
                 SWOP_A:
01f592 940d f1b7         jmp     SWOP
                 
                 ; TI#  -- n                      size of TIB
                 ; : ti# task @ 8 + @ ;
01f594 eaae              fdw     NUMBERQ_L
                 TIBSIZE_L:
01f595 7483
01f596 2369              .db     NFA|3,"ti#"
                 TIBSIZE:
01f597 de80              rcall   TASK
01f598 d09f              rcall   FETCH_A
01f599 9608              adiw    tosl, 8
01f59a 940d fed0         jmp     FETCH
                 
                 ; TIB     -- a-addr        Terminal Input Buffer
01f59c eb2a              fdw     TIBSIZE_L
                 TIB_L:
01f59d 7483
01f59e 6269              .db     NFA|3,"tib"
                 TIB:
01f59f d005              rcall   TIU
01f5a0 940d fed0         jmp     FETCH
                         
                 ; TIU     -- a-addr        Terminal Input Buffer user variable 
01f5a2 eb3a              fdw     TIB_L
                 TIU_L:
01f5a3 7483
01f5a4 7569              .db     NFA|3,"tiu"
                 TIU:
01f5a5 de90              rcall   DOUSER
01f5a6 fff0              .dw     utib       ; pointer to Terminal input buffer
                 
                 ; >IN     -- a-addr        holds offset into TIB
                 ; In RAM
01f5a7 eb46              fdw     TIU_L
                 TOIN_L:
01f5a8 3e83
01f5a9 6e69              .db     NFA|3,">in"
                 TOIN:
01f5aa de8b              rcall   DOUSER
01f5ab fffa              .dw     utoin
                 
                 ; 'SOURCE  -- a-addr        two cells: len, adrs
                 ; In RAM ?
01f5ac eb50              fdw     TOIN_L
                 TICKSOURCE_L:
01f5ad 2787
01f5ae 6f73
01f5af 7275
01f5b0 6563              .db     NFA|7,"'source"
                 TICKSOURCE:
01f5b1 de84              rcall   DOUSER
01f5b2 fff6              .dw     usource       ; two cells !!!!!!
                 
                 WORDQ:
01f5b3 d14d              rcall   DUP
01f5b4 910f              m_pop_t0
01f5b5 91ff              pop     zh
01f5b6 91ef              pop     zl
01f5b7 da4d              rcall   FETCHLIT
01f5b8 95f7              ror     zh
01f5b9 95e7              ror     zl
01f5ba dceb              rcall   EQUAL
01f5bb dd5b              rcall   ZEROSENSE
01f5bc 9419              mijmp
                 
                 ;  INTERPRET  c-addr u --    interpret given buffer
01f5bd eb5a              fdw     TICKSOURCE_L
                 INTERPRET_L:
01f5be 6989
01f5bf 746e
01f5c0 7265
01f5c1 7270
01f5c2 7465              .db     NFA|9,"interpret"
                 INTERPRET: 
01f5c3 dfed              rcall   TICKSOURCE
01f5c4 db17              rcall   TWOSTORE
01f5c5 d0d3              rcall   FALSE_
01f5c6 dfe3              rcall   TOIN
01f5c7 dee5              rcall   STORE_A
                 IPARSEWORD:
01f5c8 d7d2              rcall   INIT_012
01f5c9 d246              rcall   BL
01f5ca deaf              rcall   WORD
                 
01f5cb d135              rcall   DUP
01f5cc ddad              rcall   CFETCH_A
01f5cd dd49              rcall   ZEROSENSE
01f5ce f409              brne    IPARSEWORD1
01f5cf c064              rjmp    INOWORD
                 IPARSEWORD1:
01f5d0 df16              rcall   FIND            ; sets also wflags
01f5d1 dd4b              rcall   DUPZEROSENSE    ; 0 = not found, -1 = normal, 1 = immediate
01f5d2 f409              brne    IPARSEWORD2     ; NUMBER?
01f5d3 c045              rjmp    INUMBER
                 IPARSEWORD2:
01f5d4 dc95              rcall   ONEPLUS         ; 0 = normal 2 = immediate
01f5d5 d241              rcall   STATE_
01f5d6 d130              rcall   ZEROEQUAL
01f5d7 dc71              rcall   OR_
01f5d8 dd3e              rcall   ZEROSENSE
01f5d9 f099              breq    ICOMPILE_1      ; Compile a word
                         
                                                 ; Execute a word
                                                 ; immediate&compiling or interpreting
01f5da fe94              sbrs    wflags, 4       ; Compile only check
01f5db c00a              rjmp    IEXECUTE        ; Not a compile only word
01f5dc d23a              rcall   STATE_          ; Compile only word check
01f5dd db96              rcall   XSQUOTE
01f5de 430c
01f5df 4d4f
01f5e0 4950
01f5e1 454c
01f5e2 4f20
01f5e3 4c4e
01f5e4 0059              .db     12,"COMPILE ONLY",0
01f5e5 d0fd              rcall   QABORT
                 IEXECUTE:
01f5e6 7b6f              cbr     FLAGS1, (1<<noclear)
01f5e7 d9cb              rcall   EXECUTE
01f5e8 fd66              sbrc    FLAGS1, noclear ;  set by \ and by (
01f5e9 cfde              rjmp    IPARSEWORD
01f5ea 7e6f              cbr     FLAGS1, (1<<izeroeq) ; Clear 0= encountered in compilation
01f5eb 7d6f              cbr     FLAGS1, (1<<idup)    ; Clear DUP encountered in compilation
01f5ec c02a              rjmp    ICLRFLIT
                 ICOMPILE_1:
01f5ed 7e6f              cbr     FLAGS1, (1<<izeroeq) ; Clear 0= encountered in compilation
01f5ee dfc4              rcall   WORDQ
01f5ef ee0e              fdw     ZEROEQUAL       ; Check for 0=, modifies IF and UNTIL to use bnz
01f5f0 f011              breq    ICOMPILE_2
01f5f1 6160              sbr     FLAGS1, (1<<izeroeq) ; Mark 0= encountered in compilation
01f5f2 c020              rjmp    ICOMMAXT
                 ICOMPILE_2:
01f5f3 ff67              sbrs    FLAGS1, fLIT
01f5f4 c014              rjmp    ICOMPILE_6
01f5f5 dfbd              rcall   WORDQ
01f5f6 e482              fdw     AND_    
01f5f7 f011              breq    ICOMPILE_3
01f5f8 dc32              rcall   ANDIC_
01f5f9 c01d              rjmp    ICLRFLIT
                 ICOMPILE_3:
01f5fa dfb8              rcall   WORDQ
01f5fb e492              fdw     OR_
01f5fc f011              breq    ICOMPILE_4
01f5fd dc36              rcall   ORIC_
01f5fe c018              rjmp    ICLRFLIT
                 ICOMPILE_4:
01f5ff dfb3              rcall   WORDQ
01f600 e3f2              fdw     PLUS
01f601 f011              breq    ICOMPILE_5
01f602 dc0e              rcall   PLUSC_
01f603 c013              rjmp    ICLRFLIT
                 ICOMPILE_5:
01f604 dfae              rcall   WORDQ
01f605 e40c              fdw     MINUS
01f606 f011              breq    ICOMPILE_6
01f607 dc10              rcall   MINUSC_
01f608 c00e              rjmp    ICLRFLIT
                 ICOMPILE_6:
01f609 7d6f              cbr     FLAGS1, (1<<idup)    ; Clear DUP encountered in compilation
01f60a dfa8              rcall   WORDQ
01f60b ee02              fdw     DUP             ; Check for DUP, modies IF and UNTIl to use DUPZEROSENSE
01f60c f009              breq    ICOMPILE
01f60d 6260              sbr     FLAGS1, (1<<idup)    ; Mark DUP encountered during compilation
                 ICOMPILE:
01f60e fe95              sbrs    wflags, 5       ; Inline check
01f60f c003              rjmp    ICOMMAXT
01f610 940f f98b         call    INLINE0
01f612 c004              rjmp    ICLRFLIT
                 ICOMMAXT:
01f613 d126              rcall   COMMAXT_A
01f614 7f6d              cbr     FLAGS1, (1<<fTAILC)  ; Allow tailjmp  optimisation
01f615 fc94              sbrc    wflags, 4            ; Compile only ?
01f616 6062              sbr     FLAGS1, (1<<fTAILC)  ; Prevent tailjmp  optimisation
                 ICLRFLIT:
01f617 776f              cbr     FLAGS1, (1<<fLIT)
01f618 cfaf              rjmp    IPARSEWORD
                 INUMBER: 
01f619 746f              cbr     FLAGS1, (1<<izeroeq) | (1<<idup) | (1<<fLIT)
01f61a db95              rcall   DROP
01f61b df3f              rcall   NUMBERQ
01f61c dd00              rcall   DUPZEROSENSE
01f61d f081              breq    IUNKNOWN
01f61e d1f8              rcall   STATE_
01f61f dcf7              rcall   ZEROSENSE
01f620 f059              breq    INUMBER1
01f621 2f08              mov     t0, tosl
01f622 9189
01f623 9199              poptos
01f624 ff01              sbrs    t0, 1
01f625 c003              rjmp    ISINGLE
                 IDOUBLE:
01f626 df6b              rcall   SWOP_A
01f627 940f fe64         call    LITERAL
                 ISINGLE:        
01f629 940f fe64         call    LITERAL
01f62b cf9c              rjmp    IPARSEWORD
                 
                 INUMBER1:
01f62c db83              rcall   DROP
01f62d cfe9              rjmp    ICLRFLIT
                 
                 IUNKNOWN:
01f62e db81              rcall   DROP 
01f62f d045              rcall   DP_TO_RAM
01f630 de6e              rcall   CFETCHPP
01f631 db35              rcall   TYPE
01f632 d066              rcall   FALSE_
01f633 d0a6              rcall   QABORTQ         ; Never returns & resets the stacks
                 INOWORD: 
01f634 d766              rcall   INIT_012
01f635 940d f1b0         jmp     DROP
                 
01f637 4081              .db     NFA|1,"@"
                 FETCH_A:        
01f638 940d fed0         jmp     FETCH
                 
                 ;;;    bitmask -- 
01f63a eb7c              fdw     INTERPRET_L
                 SHB_L:
01f63b 7383
01f63c 6268              .db     NFA|3,"shb"     ; Set header bit
                 SHB:
01f63d d1e5              rcall   LATEST_
01f63e dff9              rcall   FETCH_A
01f63f d0c1              rcall   DUP
01f640 dd39              rcall   CFETCH_A
01f641 db87              rcall   ROT
01f642 dc06              rcall   OR_
01f643 df4e              rcall   SWOP_A
01f644 940d ff05         jmp     CSTORE
                         
01f646 ec76              fdw     SHB_L
                 IMMEDIATE_L:
01f647 6989
01f648 6d6d
01f649 6465
01f64a 6169
01f64b 6574              .db     NFA|9,"immediate" ; 
                 IMMEDIATE:
01f64c d0aa              rcall   DOLIT
01f64d 0040              .dw     IMMED
01f64e 940d f63d         jmp     SHB
                 
                 ;***************************************************************
01f650 ec8e              fdw     IMMEDIATE_L
                 INLINED_L:
01f651 6987
01f652 6c6e
01f653 6e69
01f654 6465              .db     NFA|7,"inlined" ; 
                 INLINED:
01f655 d0a1              rcall   DOLIT
01f656 0020              .dw     INLINE
01f657 940d f63d         jmp     SHB
                 
                 ;; .st ( -- ) output a string with current data section and current base info
                 ;;; : .st base @ dup decimal <#  [char] , hold #s  [char] < hold #> type 
                 ;;;     <# [char] > hold cse @ #s #> type base ! ;
01f659 eca2              fdw     INLINED_L
                 DOTSTATUS_L:
01f65a 2e83
01f65b 7473              .db     NFA|3,".st"
                 DOTSTATUS:
01f65c d09a              rcall   DOLIT
01f65d 003c              .dw     '<'
01f65e d93f              rcall   EMIT
01f65f 940f ff9a         call    DOTBASE
01f661 d93c              rcall   EMIT
01f662 d094              rcall   DOLIT
01f663 002c              .dw     ','
01f664 d939              rcall   EMIT
01f665 940f ee8f         call    MEMQ
01f667 daff              rcall   TYPE
01f668 d08e              rcall   DOLIT
01f669 003e              .dw     '>'
01f66a d933              rcall   EMIT
01f66b 940d f8a6         jmp     DOTS
                 
01f66d 3e82
01f66e 0072              .db     NFA|2,">r",0
01f66f 940d f1d1 TOR_A:  jmp     TOR
                 
                 
                 ;;; TEN ( -- n ) Leave decimal 10 on the stack
                 ;        .db     NFA|1,"a"
                 TEN:
01f671 d980              rcall   DOCREATE
01f672 000a              .dw     10
                 
                 ; dp> ( -- ) Copy ini, dps and latest from eeprom to ram
                 ;        .dw     link
                 ; link    set     $
01f673 6483
01f674 3e70              .db     NFA|3,"dp>"
                 DP_TO_RAM:
01f675 d081              rcall   DOLIT
01f676 2200              .dw     dp_start
01f677 d1ba              rcall   INI
01f678 dff8              rcall   TEN
01f679 940d f484         jmp     CMOVE
                 
                 ; >dp ( -- ) Copy only changed turnkey, dp's and latest from ram to eeprom
                 ;        .dw     link
                 ; link    set     $
01f67b 3e83
01f67c 7064              .db     NFA|3,">dp"
                 DP_TO_EEPROM:
01f67d d079              rcall   DOLIT
01f67e 2200              .dw     dp_start
01f67f dc4b              rcall   STORE_P_TO_R
01f680 d1b1              rcall   INI
01f681 d075              rcall   DOLIT
01f682 0004              .dw     4
01f683 db4d              rcall   TOR
                 DP_TO_EEPROM_0: 
01f684 de22              rcall   FETCHPP
01f685 d07b              rcall   DUP
01f686 dc59              rcall   PFETCH
01f687 dc19              rcall   NOTEQUAL
01f688 dc8e              rcall   ZEROSENSE
01f689 f011              breq    DP_TO_EEPROM_1
                 .if DEBUG_FLASH == 1
                 .endif
01f68a dc5d              rcall   PSTORE
01f68b c001              rjmp    DP_TO_EEPROM_2
                 DP_TO_EEPROM_1:
01f68c db23              rcall   DROP
                 DP_TO_EEPROM_2:
01f68d d41c              rcall   PTWOPLUS
                 DP_TO_EEPROM_3:
01f68e d325              rcall   XNEXT
01f68f f7a0              brcc    DP_TO_EEPROM_0
01f690 911f              pop     t1
01f691 910f              pop     t0
01f692 dc44              rcall   R_TO_P
01f693 940d f1b0         jmp     DROP
                 
01f695 ecb4              fdw     DOTSTATUS_L
                 FALSE_L:
01f696 6685
01f697 6c61
01f698 6573              .db     NFA|5,"false"
                 FALSE_:                     ; TOS is 0000 (FALSE)
01f699 939a
01f69a 938a              pushtos
01f69b 2788              clr     tosl
01f69c 2799              clr     tosh
01f69d 9508              ret
                 
01f69e ed2c              fdw     FALSE_L
                 TRUE_L:
01f69f 7484
01f6a0 7572
01f6a1 0065              .db     NFA|4,"true",0
                 TRUE_:                      ; TOS is ffff (TRUE)
01f6a2 939a
01f6a3 938a              pushtos
01f6a4 ef8f              ser     tosl
01f6a5 ef9f              ser     tosh
01f6a6 9508              ret
                 
                 ; QUIT     --    R: i*x --    interpret from kbd
01f6a7 ed3e              fdw     TRUE_L
                 QUIT_L:
01f6a8 7184
01f6a9 6975
01f6aa 0074              .db     NFA|4,"quit",0
                 QUIT:
01f6ab d97a              rcall   RPEMPTY
01f6ac d10c              rcall   LEFTBRACKET
01f6ad d9a5              rcall   FRAM
                 QUIT0:  
                         ;; Copy INI and DP's from eeprom to ram
01f6ae dfc6              rcall   DP_TO_RAM
                 QUIT1: 
01f6af d8dc              rcall   check_sp
01f6b0 d08e              rcall   CR
01f6b1 deed              rcall   TIB
01f6b2 d04e              rcall   DUP
01f6b3 dee3              rcall   TIBSIZE
01f6b4 970a              sbiw    tosl, 10     ; Reserve 10 bytes for hold buffer
01f6b5 da74              rcall   ACCEPT
01f6b6 da46              rcall   SPACE_
01f6b7 df0b              rcall   INTERPRET
01f6b8 d15e              rcall   STATE_
01f6b9 dc5d              rcall   ZEROSENSE
01f6ba f7a1              brne    QUIT1
01f6bb d6ce              rcall   IFLUSH
01f6bc dfc0              rcall   DP_TO_EEPROM
                          
01f6bd dab6              rcall    XSQUOTE
01f6be 2003
01f6bf 6b6f              .db     3," ok"
01f6c0 daa6              rcall    TYPE
01f6c1 d007              rcall   PROMPT_
01f6c2 940d f6ae         jmp     QUIT0
                 
                 
01f6c4 ed50              fdw     QUIT_L
                 PROMPT_L:
01f6c5 7086
01f6c6 6f72
01f6c7 706d
01f6c8 0074              .db     NFA|6,"prompt",0
                 PROMPT_:
01f6c9 940f ff3d         call    DEFER_DOES
01f6cb 220a              .dw     prompt
                 
                 ; ABORT    i*x --   R: j*x --   clear stk & QUIT
01f6cc ed8a              fdw     PROMPT_L
                 ABORT_L:
01f6cd 6185
01f6ce 6f62
01f6cf 7472              .db     NFA|5,"abort"
                 ABORT:
01f6d0 d158              rcall   S0
01f6d1 df66              rcall   FETCH_A
01f6d2 d94f              rcall   SPSTORE
01f6d3 940d f6ab         jmp     QUIT            ; QUIT never rets
                 
                 ; ?ABORT   f --       abort & print ?
01f6d5 ed9a              fdw     ABORT_L
                 QABORTQ_L:
01f6d6 3f87
01f6d7 6261
01f6d8 726f
01f6d9 3f74              .db     NFA|7,"?abort?"
                 QABORTQ:
01f6da da99              rcall   XSQUOTE
01f6db 3f01              .db     1,"?"
01f6dc 940d f6e3         jmp     QABORT
                 
                 
                 ; ?ABORT   f c-addr u --       abort & print msg if flag is false
01f6de edac              fdw     QABORTQ_L
                 QABORT_L:
01f6df 3f86
01f6e0 6261
01f6e1 726f
01f6e2 0074              .db     NFA|6,"?abort",0
                 QABORT:
01f6e3 dae5              rcall   ROT
01f6e4 dc32              rcall   ZEROSENSE
01f6e5 f419              brne    QABO1
                 QABORT1:        
01f6e6 da16              rcall   SPACE_
01f6e7 da7f              rcall   TYPE
01f6e8 dfe7              rcall   ABORT  ; ABORT never returns
01f6e9 940d f0e6 QABO1:  jmp     TWODROP
                 
                 ; ABORT"  i*x 0  -- i*x   R: j*x -- j*x  x1=0
                 ;         i*x x1 --       R: j*x --      x1<>0
01f6eb edbe              fdw     QABORT_L
                 ABORTQUOTE_L:
01f6ec 61d6
01f6ed 6f62
01f6ee 7472
01f6ef 0022              .db     NFA|IMMED|COMPILE|6,"abort",0x22,0
                 ABORTQUOTE:
01f6f0 da9a              rcall   SQUOTE
01f6f1 d91c              rcall   DOCOMMAXT
01f6f2 edc6              fdw     QABORT
01f6f3 9508              ret
                 
                 ;***************************************************
                 ; LIT   -- x    fetch inline 16 bit literal to the stack
01f6f4 edd8              fdw     ABORTQUOTE_L
                 DOLIT_L:
01f6f5 6c83
01f6f6 7469              .db     NFA|3, "lit"
                 DOLIT:
01f6f7 91ff              m_pop_zh
01f6f8 91ff              pop     zh
01f6f9 91ef              pop     zl
01f6fa d90a              rcall   FETCHLIT
01f6fb 95f7              ror     zh
01f6fc 95e7              ror     zl
01f6fd 9419              mijmp    ; (z)
                 
                 ; DUP must not be reachable from user code with rcall
01f6fe e3ca              fdw     RFETCH_L
                 DUP_L:
01f6ff 64a3
01f700 7075              .db     NFA|INLINE|3, "dup"
                 DUP:
01f701 939a
01f702 938a              pushtos
01f703 9508              ret
                 
01f704 e53e              fdw     NOTEQUAL_L
                 ZEROEQUAL_L:
01f705 3082
01f706 003d              .db     NFA|2, "0=",0
                 ZEROEQUAL:
01f707 9701              sbiw    tosl, 1
01f708 0b88              sbc     tosl, tosl
01f709 0b99              sbc     tosh, tosh
01f70a 9508              ret
                 
01f70b ee0a              fdw     ZEROEQUAL_L
                 ZEROLESS_L:
01f70c 3082
01f70d 003c              .db     NFA|2, "0<",0
                 ZEROLESS:
01f70e 0f99              lsl     tosh
01f70f 0b88              sbc     tosl, tosl
01f710 0b99              sbc     tosh, tosh
01f711 9508              ret
                 
                 
                 ; '    -- xt             find word in dictionary
01f712 edea              fdw     DOLIT_L
                 TICK_L:
01f713 2781              .db     NFA|1,0x27    ; 27h = '
                 TICK:
01f714 d0fb              rcall   BL
01f715 dd64              rcall   WORD
01f716 ddd0              rcall   FIND
01f717 940d f6da         jmp     QABORTQ
                 
                 ; CHAR   -- char           parse ASCII character
01f719 ee26              fdw     TICK_L
                 CHAR_L:
01f71a 6384
01f71b 6168
01f71c 0072              .db     NFA|4,"char",0
                 CHAR:
01f71d d0f2              rcall   BL
01f71e dd3e              rcall   PARSE
01f71f da90              rcall   DROP
01f720 940d feeb         jmp     CFETCH
                 
                 ; (    --                     skip input until )
01f722 ee34              fdw     CHAR_L
                 PAREN_L:
01f723 28c1              .db     NFA|IMMED|1,"("
                 PAREN:
01f724 dfd2              rcall   DOLIT
01f725 0029              .dw     ')'
01f726 dd36              rcall   PARSE
01f727 6460              sbr     FLAGS1, (1<<noclear) ; dont clear flags in case of (
01f728 940d f0e6         jmp     TWODROP
                 
                 ; IHERE    -- a-addr    ret Code dictionary ptr
                 ;   IDP @ ;
01f72a ee46              fdw     PAREN_L
                 IHERE_L:
01f72b 6985
01f72c 6568
01f72d 6572              .db     NFA|5,"ihere"
                 IHERE:
01f72e d068              rcall   IDP
01f72f cf08              rjmp    FETCH_A
                 
                 ; [CHAR]   --          compile character DOLITeral
01f730 ee56              fdw     IHERE_L
                 BRACCHAR_L:
01f731 5bd6
01f732 6863
01f733 7261
01f734 005d              .db     NFA|IMMED|COMPILE|6,"[char]",0
                 BRACCHAR:
01f735 dfe7              rcall   CHAR
01f736 940d fe64         jmp     LITERAL
                 
                 ; COMPILE,  xt --         append codefield
01f738 6383
01f739 2c66              .db     NFA|3,"cf,"
                 COMMAXT_A:
01f73a 940d f0b1         jmp     COMMAXT
                 
                 ; CR      --                      output newline
01f73c ee62              fdw     BRACCHAR_L
                 CR_L:
01f73d 6382
01f73e 0072              .db     NFA|2,"cr",0
                 CR:
01f73f dfb7              rcall   DOLIT
01f740 000d              .dw     0x0d       ; CR \r
01f741 d85c              rcall   EMIT
01f742 dfb4              rcall   DOLIT
01f743 000a              .dw     0x0a       ; LF \n
                 EMIT_A:
01f744 940d ef9e         jmp     EMIT
                 
                 ; CREATE   --         create an empty definition
                 ; Create a definition header and append 
                 ; doCREATE and the current data space dictionary pointer
                 ; in FLASH.
                 ;  Examples :   
                 ; : table create 10 cells allot does> swap cells + ;
                 ; ram table table_a     flash table table_b    eeprom table table_c
                 ; ram variable  qqq
                 ; eeprom variable www ram
                 ; flash variable  rrr ram 
                 ; eeprom create calibrationtable 30 allot ram
                 ; 
01f746 ee7a              fdw     CR_L
                 CREATE_L:
01f747 6386
01f748 6572
01f749 7461
01f74a 0065              .db     NFA|6,"create",0
                 CREATE:
01f74b d0c4              rcall   BL
01f74c dd2d              rcall   WORD            ; Parse a word
                 
01f74d dfb3              rcall   DUP             ; Remember parsed word at rhere
01f74e dd98              rcall   FIND
01f74f dc08              rcall   NIP
01f750 dfb6              rcall   ZEROEQUAL
01f751 da22              rcall   XSQUOTE
01f752 410f
01f753 524c
01f754 4145
01f755 5944
01f756 4420
01f757 4645
01f758 4e49
01f759 4445              .db     15,"ALREADY DEFINED"
01f75a df88              rcall   QABORT         ; ABORT if word has already been defined
01f75b dfa5              rcall   DUP             ; Check the word length 
01f75c dc1d              rcall   CFETCH_A
01f75d d9c2              rcall   ONE
01f75e df98              rcall   DOLIT
01f75f 0010              .dw     16
01f760 db36              rcall   WITHIN
01f761 df78              rcall   QABORTQ          ; Abort if there is no name for create
                 
01f762 dfcb              rcall   IHERE
01f763 d92f              rcall   ALIGNED
01f764 d032              rcall   IDP             ; Align the flash DP.
01f765 dd47              rcall   STORE_A
                 
01f766 d0bc              rcall   LATEST_
01f767 ded0              rcall   FETCH_A
01f768 dad3              rcall   ICOMMA_          ; Link field
01f769 dd35              rcall   CFETCHPP        ; str len
01f76a dfc3              rcall   IHERE
01f76b df95              rcall   DUP             
01f76c d0b6              rcall   LATEST_         ; new 'latest' link
01f76d dd3f              rcall   STORE_A         ; str len ihere
01f76e dd27              rcall   PLACE           ; 
01f76f dfbe              rcall   IHERE           ; ihere
01f770 dc09              rcall   CFETCH_A
01f771 df85              rcall   DOLIT
01f772 0080              .dw     NFA
01f773 dec9              rcall   SHB
01f774 daf5              rcall   ONEPLUS
01f775 d91d              rcall   ALIGNED
01f776 d170              rcall   IALLOT          ; The header has now been created
01f777 df7f              rcall   DOLIT             
01f778 dfe4              fdw     DOCREATE        ; compiles the runtime routine to fetch the next dictionary cell to the parameter stack
01f779 d940              rcall   STORECFF1       ; Append an exeution token, CALL !
01f77a d90e              rcall   ALIGN
01f77b d8ee              rcall   HERE            ; compiles the current dataspace dp into the dictionary
01f77c d8e3              rcall   CSE_
01f77d db99              rcall   ZEROSENSE
01f77e f409              brne    CREATE2
01f77f daf4              rcall   TWOPLUS
                 CREATE2:
01f780 940d ff88         jmp     ICOMMA          ; dp now points to a free cell
                 
                 ;***************************************************************
                 ; POSTPONE
01f782 ee8e              fdw    CREATE_L
                 POSTPONE_L:
01f783 70d8
01f784 736f
01f785 7074
01f786 6e6f
01f787 0065              .db     NFA|IMMED|COMPILE|8,"postpone",0
                 POSTPONE:
01f788 d087              rcall   BL
01f789 dcf0              rcall   WORD
01f78a dd5c              rcall   FIND
01f78b df75              rcall   DUP
01f78c df4d              rcall   QABORTQ
01f78d df80              rcall   ZEROLESS
01f78e db88              rcall   ZEROSENSE
01f78f f019              breq    POSTPONE1
01f790 d87d              rcall   DOCOMMAXT
01f791 e01c              fdw     DOCOMMAXT
01f792 caa9              rjmp    ICOMMA_
                 POSTPONE1:
01f793 940d f0b1         jmp     COMMAXT
                 
                 
                 IDP_L:
01f795 6983
01f796 7064              .db     NFA|3,"idp"
                 IDP:
01f797 d85a              rcall   DOCREATE
01f798 03bc              .dw     dpFLASH
                 
                 ;***************************************************************
                 ; (DOES>)  --      run-time action of DOES>
                 ;        .dw    link
                 ;link   set     $
01f799 2887
01f79a 6f64
01f79b 7365
01f79c 293e              .db     NFA|7,"(does>)"
                 XDOES:
01f79d 91ff              m_pop_zh
01f79e da3d              rcall   RFROM
01f79f d083              rcall   LATEST_
01f7a0 de97              rcall   FETCH_A
01f7a1 dd10              rcall   NFATOCFA
01f7a2 dff4              rcall   IDP
01f7a3 de94              rcall   FETCH_A
01f7a4 deca              rcall   TOR_A
01f7a5 dff1              rcall   IDP
01f7a6 dd06              rcall   STORE_A
01f7a7 0f88              lsl     tosl
01f7a8 1f99              rol     tosh
01f7a9 d910              rcall   STORECFF1 ; Always stores a 4 byte call
01f7aa da31              rcall   RFROM
01f7ab dfeb              rcall   IDP
01f7ac 940d fe93         jmp     STORE
                 
                 
                 ; DOES>    --      change action of latest def'n
01f7ae ef06              fdw     POSTPONE_L
                 DOES_L:
01f7af 64d5
01f7b0 656f
01f7b1 3e73              .db     NFA|IMMED|COMPILE|5,"does>"
01f7b2 d85b      DOES:   rcall   DOCOMMAXT
01f7b3 ef3a              fdw     XDOES
01f7b4 d859              rcall   DOCOMMAXT
01f7b5 dff8              fdw     DODOES
01f7b6 9508              ret
                 
                 
                 ;*****************************************************************
                 ; [        --      enter interpretive state
01f7b7 ef5e              fdw     DOES_L
                 LEFTBRACKET_L:
01f7b8 5bc1              .db     NFA|IMMED|1,"["
                 LEFTBRACKET:
01f7b9 9250 03c9         sts     state, r_zero
01f7bb 9508              ret
                 
                 
                 ; ]        --      enter compiling state
01f7bc ef70              fdw     LEFTBRACKET_L
                 RIGHTBRACKET_L:
01f7bd 5d81              .db     NFA|1,"]"
                 RIGHTBRACKET:
01f7be 9260 03c9         sts     state, r_one
01f7c0 9508              ret
                 
                 ; :        --           begin a colon definition
01f7c1 ef7a              fdw     RIGHTBRACKET_L
                 COLON_L:
01f7c2 3a81              .db     NFA|1,":"
                 COLON:
01f7c3 df87              rcall   CREATE
01f7c4 dff9              rcall   RIGHTBRACKET
01f7c5 940d f0cc         jmp     STORCOLON
                 
                 ; :noname        -- a          define headerless forth code
01f7c7 ef84              fdw     COLON_L
                 NONAME_L:
01f7c8 3a87
01f7c9 6f6e
01f7ca 616e
01f7cb 656d              .db     NFA|7,":noname"
                 NONAME:
01f7cc df61              rcall   IHERE
01f7cd 940d f7be         jmp     RIGHTBRACKET
                 
                 ; ;        --             end a colon definition
01f7cf ef90              fdw     NONAME_L
                 SEMICOLON_L:
01f7d0 3bd1              .db     NFA|IMMED|COMPILE|1,";"
                 SEMICOLON:
01f7d1 dfe7              rcall   LEFTBRACKET
01f7d2 fd61              sbrc    FLAGS1, fTAILC
01f7d3 c023              rjmp    ADD_RETURN_1
01f7d4 df59              rcall   IHERE
01f7d5 d028              rcall   MINUS_FETCH
01f7d6 018c              movw    t0, tosl
01f7d7 7f10              andi    t1, 0xf0
01f7d8 5d10              subi    t1, 0xd0
01f7d9 f059              breq    RCALL_TO_JMP
01f7da 9189
01f7db 9199              poptos
01f7dc d021              rcall   MINUS_FETCH
                 .ifdef EIND
01f7dd 508f              subi    tosl, 0x0f
                 .else
                 .endif
01f7de 4994              sbci    tosh, 0x94
01f7df f4b1              brne    ADD_RETURN
                 CALL_TO_JMP:
                 .ifdef EIND
01f7e0 e08d              ldi     tosl, 0x0d
                 .else
                 .endif
01f7e1 e994              ldi     tosh, 0x94
01f7e2 d9d4              rcall   SWOP
01f7e3 940d fe93         jmp     STORE
                 RCALL_TO_JMP:
01f7e5 db72              rcall   NIP
01f7e6 709f              andi    tosh, 0x0f
01f7e7 fd93              sbrc    tosh, 3
01f7e8 6f90              ori     tosh, 0xf0
01f7e9 da95              rcall   TWOSTAR
01f7ea df43              rcall   IHERE
01f7eb da0d              rcall   PLUS
01f7ec df0a              rcall   DOLIT
01f7ed fffe              .dw     -2
01f7ee d0f8              rcall   IALLOT
01f7ef df07              rcall   DOLIT
                 .ifdef EIND
01f7f0 940d              .dw     0x940d
                 .else
                 .endif
01f7f1 d007              rcall   ICOMMA__
                         sub_pflash_tos
01f7f2 9408              rampv_to_c
01f7f3 9597              ror     tosh
01f7f4 9587              ror     tosl
01f7f5 c003              rjmp    ICOMMA__
                 ADD_RETURN:
01f7f6 d8ef              rcall   TWODROP
                 ADD_RETURN_1:
01f7f7 deff              rcall   DOLIT   ; Compile a ret
01f7f8 9508              .dw     0x9508
                 ICOMMA__:
01f7f9 940d ff88         jmp    ICOMMA
                 
                 
                 
01f7fb efa0              fdw     SEMICOLON_L
                 MINUS_FETCH_L:
01f7fc 2d82
01f7fd 0040              .db     NFA|2,"-@",0
                 MINUS_FETCH:
01f7fe d00c              rcall   TWOMINUS
01f7ff df01              rcall   DUP
01f800 940d fed0         jmp     FETCH
                 
                 ; [']  --         find word & compile as DOLITeral
01f802 eff8              fdw     MINUS_FETCH_L
                 BRACTICK_L:
01f803 5bd3
01f804 5d27              .db     NFA|IMMED|COMPILE|3,"[']"
                 BRACTICK:
01f805 df0e              rcall   TICK       ; get xt of 'xxx'
01f806 940d fe64         jmp     LITERAL
                 
                 ; 2-    n -- n-2
01f808 f006              fdw     BRACTICK_L
                 TWOMINUS_L:
01f809 32a2
01f80a 002d              .db     NFA|INLINE|2,"2-",0
                 TWOMINUS:
01f80b 9702              sbiw    tosl, 2
01f80c 9508              ret
                 
                         
                 ; BL      -- char                 an ASCII space
01f80d f012              fdw     TWOMINUS_L
                 BL_l:
01f80e 6282
01f80f 006c              .db     NFA|2,"bl",0
                 BL:
01f810 940f eff2         call    DOCREATE
01f812 0020              .dw     ' '
                 
                 ; STATE   -- flag                 holds compiler state
01f813 f01c              fdw     BL_L
                 STATE_L:
01f814 7385
01f815 6174
01f816 6574              .db     NFA|5,"state"
                 STATE_:
01f817 939a
01f818 938a              pushtos
01f819 9180 03c9         lds     tosl, state
01f81b 9190 03c9         lds     tosh, state
01f81d 9508              ret
                 
                 ; LATEST    -- a-addr           
01f81e f028              fdw     STATE_L
                 LATEST_L:
01f81f 6c86
01f820 7461
01f821 7365
01f822 0074              .db     NFA|6,"latest",0
                 LATEST_:
01f823 940f eff2         call    DOCREATE
01f825 03c2              .dw     dpLATEST
                 
                 ; S0       -- a-addr      start of parameter stack
01f826 f03e              fdw     LATEST_L
                 S0_L:
01f827 7382
01f828 0030              .db     NFA|2,"s0",0
                 S0:
01f829 dc0c              rcall   DOUSER
01f82a ffe4              .dw     us0
                         
                 ; R0       -- a-addr      start of parameter stack
01f82b f04e              fdw     S0_L
                 R0_L:
01f82c 7282
01f82d 0030              .db     NFA|2,"r0",0
                 R0_:
01f82e dc07              rcall   DOUSER
01f82f ffe6              .dw     ur0
                         
                 ; ini -- a-addr       ini variable contains the user-start xt
                 ; In RAM
                 ;        .dw     link
                 ;link    set     $
01f830 6983
01f831 696e              .db     NFA|3,"ini"
                 INI:
01f832 940f eff2          call   DOCREATE
01f834 03ba              .dw     dpSTART
                 
                 ; ticks  -- u      system ticks (0-ffff) in milliseconds
01f835 f058              fdw     R0_L
                 TICKS_L:
01f836 7485
01f837 6369
01f838 736b              .db     NFA|5,"ticks"
                 TICKS:  
01f839 939a
01f83a 938a              pushtos
01f83b b70f              in_     t0, SREG
01f83c 94f8              cli
01f83d 2d8e              mov     tosl, ms_count
01f83e 2d9f              mov     tosh, ms_count1
01f83f bf0f              out_    SREG, t0
01f840 9508              ret
                 
                         
                 ; ms  +n --      Pause for n millisconds
                 ; : ms ( +n -- )     
                 ;   ticks -
                 ;   begin
                 ;     pause dup ticks - 0<
                 ;   until drop ;
                 ;
01f841 f06c              fdw     TICKS_L
                 MS_L:
01f842 6d82
01f843 0073              .db     NFA|2,"ms",0
                 MS:
01f844 dff4              rcall   TICKS
01f845 d9b3              rcall   PLUS
                 MS1:    
01f846 d720              rcall   PAUSE
01f847 deb9              rcall   DUP
01f848 dff0              rcall   TICKS
01f849 d9bc              rcall   MINUS
01f84a dec3              rcall   ZEROLESS
01f84b dacb              rcall   ZEROSENSE
01f84c f3c9              breq    MS1
01f84d 940d f1b0         jmp     DROP
                 
                 ;  .id ( nfa -- ) 
01f84f f084              fdw     MS_L
                 DOTID_L:
01f850 2e83
01f851 6469              .db     NFA|3,".id"
                 DOTID:
01f852 dc4c              rcall   CFETCHPP
01f853 708f              andi    tosl, 0x0f
01f854 d97c              rcall   TOR
01f855 c003              rjmp    DOTID3
                 DOTID1:
01f856 dc48              rcall   CFETCHPP
01f857 d00a              rcall   TO_PRINTABLE
01f858 deeb              rcall   EMIT_A
                 DOTID3:
01f859 d15a              rcall   XNEXT
01f85a f7d8              brcc    DOTID1  
01f85b 911f              pop     t1
01f85c 910f              pop     t0
01f85d 940d f1b0         jmp     DROP
                 
                  ; >pr   c -- c      Filter a character to printable 7-bit ASCII
01f85f f0a0              fdw     DOTID_L
                 TO_PRINTABLE_L:
01f860 3e83
01f861 7270              .db     NFA|3,">pr"
                 TO_PRINTABLE:
01f862 2799              clr     tosh   
01f863 3080              cpi     tosl, 0
01f864 f012              brmi    TO_PRINTABLE1
01f865 3280              cpi     tosl, 0x20
01f866 f40a              brpl    TO_PRINTABLE2
                 TO_PRINTABLE1:
01f867 e28e              ldi     tosl, '.'
                 TO_PRINTABLE2:
01f868 9508              ret
                 
                 ;;;;;;;;;;;;;;
                 LIKEQ:
01f869 dc35              rcall   CFETCHPP
01f86a de8c              rcall   DOLIT
01f86b 000f              .dw     0x0f
01f86c d9d4              rcall   AND_
01f86d d949              rcall   SWOP
01f86e da54              rcall   STORE_P
01f86f d947              rcall   SWOP
01f870 dc2e              rcall   CFETCHPP
01f871 d957              rcall   ROT
01f872 d94e              rcall   OVER
01f873 d992              rcall   MINUS
01f874 d9f5              rcall   ONEPLUS
01f875 de23              rcall   FALSE_
01f876 daf8              rcall   MAX
01f877 d959              rcall   TOR
01f878 c009              rjmp    LIKEQ3
                 LIKEQ1:
01f879 d873              rcall   TWODUP
01f87a d220              rcall   FETCH_P
01f87b da7c              rcall   PPLUS
01f87c d93a              rcall   SWOP
01f87d 940f 7e80         call    CMP
01f87f f011              breq    LIKEQ3
                 TWODROPNZ:
01f880 9498              clz
01f881 c003              rjmp    LIKEQ4
                 LIKEQ3:
01f882 d131              rcall   XNEXT
01f883 f7a8              brcc    LIKEQ1
                 TWODROPZ:
01f884 9418              sez
                 LIKEQ4:
01f885 911f              pop     t1
01f886 910f              pop     t0
01f887 c00a              rjmp    TWODROP__
                 
                 ;;;;;;;;;;;;;;;;;;;;
                 LIKES:
01f888 d864              rcall   TWODUP
01f889 dfdf              rcall   LIKEQ
01f88a f019              breq    LIKES1
01f88b de75              rcall   DUP
01f88c dfc5              rcall   DOTID
01f88d d86f              rcall   SPACE_
                 LIKES1:
01f88e df7c              rcall   TWOMINUS
01f88f dda8              rcall   FETCH_A
01f890 da8c              rcall   DUPZEROSENSE
01f891 f7b1              brne    LIKES
                 TWODROP__:
01f892 940d f0e6         jmp     TWODROP
                 
                  ; WORDS    -- filter
01f894 f0c0              fdw     TO_PRINTABLE_L
                 WORDS_L:
01f895 7785
01f896 726f
01f897 7364              .db     NFA|5,"words"
01f898 df77              rcall   BL
01f899 dbe0              rcall   WORD
01f89a de66              rcall   DUP
01f89b de5b              rcall   DOLIT
01f89c f550              fdw     kernellink
01f89d d002              rcall   WDS1
01f89e df84              rcall   LATEST_
01f89f dd98              rcall   FETCH_A
01f8a0 de9e      WDS1:   rcall   CR
01f8a1 940d f888         jmp     LIKES
                 
                 ; .S      --           print stack contents
                 ; : .s space sp@ s0 @ 2- begin 2dup < while -@ u. repeat 2drop ;
01f8a3 f12a              fdw     WORDS_L
                 DOTS_L:
01f8a4 2e82
01f8a5 0073              .db     NFA|2,".s",0
                 DOTS:
01f8a6 d856              rcall   SPACE_
01f8a7 de59              rcall   DUP
01f8a8 940f f01b         call    SPFETCH
01f8aa df7e              rcall   S0
01f8ab dd8c              rcall   FETCH_A
01f8ac df5e              rcall   TWOMINUS
                 DOTS1:
01f8ad d83f              rcall   TWODUP
01f8ae d9fc              rcall   LESS
01f8af da67              rcall   ZEROSENSE
01f8b0 f019              breq    DOTS2
01f8b1 df4c              rcall   MINUS_FETCH
01f8b2 db17              rcall   UDOT
01f8b3 cff9              rjmp    DOTS1
                 DOTS2:  
01f8b4 d8fb              rcall   DROP
01f8b5 940d f0e6         jmp     TWODROP
                 
                 ;   DUMP  ADDR U --       DISPLAY MEMORY
01f8b7 f148              fdw     DOTS_L
                 DUMP_L:
01f8b8 6484
01f8b9 6d75
01f8ba 0070              .db     NFA|4,"dump",0
                 DUMP:
01f8bb de3b              rcall   DOLIT
01f8bc 0010              .dw     16
01f8bd da7d              rcall   USLASH
01f8be d912              rcall   TOR
01f8bf c020              rjmp    DUMP7
                 DUMP1:  
01f8c0 de7e              rcall   CR
01f8c1 de3f              rcall   DUP
01f8c2 de34              rcall   DOLIT
01f8c3 0004              .dw     4
01f8c4 db0f              rcall   UDOTR
01f8c5 de31              rcall   DOLIT
01f8c6 003a              .dw     ':'
01f8c7 de7c              rcall   EMIT_A
01f8c8 de2e              rcall   DOLIT
01f8c9 000f              .dw     15
01f8ca d906              rcall   TOR
                 DUMP2:
01f8cb dbd3              rcall   CFETCHPP
01f8cc de2a              rcall   DOLIT
01f8cd 0002              .dw     2
01f8ce db05              rcall   UDOTR
01f8cf d0e4              rcall   XNEXT
01f8d0 f7d0              brcc    DUMP2
01f8d1 911f              pop     t1
01f8d2 910f              pop     t0
                 
01f8d3 de23              rcall   DOLIT
01f8d4 0010              .dw     16
01f8d5 d930              rcall   MINUS
01f8d6 de20              rcall   DOLIT
01f8d7 000f              .dw     15
01f8d8 d8f8              rcall   TOR
                 DUMP4:  
01f8d9 dbc5              rcall   CFETCHPP
01f8da df87              rcall   TO_PRINTABLE
01f8db de68              rcall   EMIT_A
01f8dc d0d7              rcall   XNEXT
01f8dd f7d8              brcc    DUMP4
01f8de 911f              pop     t1
01f8df 910f              pop     t0
                 DUMP7:
01f8e0 d0d3              rcall   XNEXT
01f8e1 f6f0              brcc    DUMP1
01f8e2 911f              pop     t1
01f8e3 910f              pop     t0
01f8e4 940d f1b0         jmp     DROP
                 
                 ; IALLOT   n --    allocate n bytes in ROM
                 ;       .dw     link
                 ;link   set     $
01f8e6 2081              .db     NFA|1," "
                 IALLOT:
01f8e7 deaf              rcall   IDP
01f8e8 940d f28b         jmp     PLUSSTORE
                     
                 
                 ;***************************************************************
                 ;  Store the execcution vector addr to the return stack
                 ; leave the updated return stack pointer on the data stack
                 ; x>r ( addr rsp -- rsp' )
01f8ea f170              fdw     DUMP_L
                 X_TO_R_L:
01f8eb 7883
01f8ec 723e              .db     NFA|3,"x>r"
                 X_TO_R:
01f8ed 01fc              movw    zl, tosl
01f8ee 9189
01f8ef 9199              poptos
01f8f0 d00a              rcall   TO_XA
01f8f1 9631              adiw    zl, 1
01f8f2 9382              st      -z, tosl
01f8f3 9392              st      -z, tosh
                 .ifdef EIND
01f8f4 9262              st      -z, r_one
                 .endif
01f8f5 9252              st      -z, r_zero
01f8f6 01cf              movw    tosl, zl
01f8f7 9508              ret
                 ;***************************************************************
01f8f8 f1d6              fdw     X_TO_R_L
                 TO_XA_L:
01f8f9 3e83
01f8fa 6178              .db NFA|3,">xa"
                 TO_XA:
                          sub_pflash_tos
01f8fb 9408               rampv_to_c
01f8fc 9597               ror tosh
01f8fd 9587               ror tosl
01f8fe 9508               ret
                 
01f8ff f1f2               fdw     TO_XA_L
                 XA_FROM_L:
01f900 7883
01f901 3e61              .db NFA|3,"xa>"
                 XA_FROM:
01f902 0f88               lsl     tosl
01f903 1f99               rol     tosh
                          add_pflash_tos
01f904 9508               ret
                 ;***************************************************************
01f905 f200               fdw    XA_FROM_L
                 PFL_L:
01f906 7083
01f907 6c66              .db     NFA|3,"pfl"
                 PFL:
01f908 940f eff2          call   DOCREATE
01f90a 3200              .dw     OFLASH
                 ;***************************************************************
01f90b f20c              fdw    PFL_L
                 ZFL_L:
01f90c 7a83
01f90d 6c66              .db     NFA|3, "zfl"
                 ZFL:
01f90e 940f eff2          call   DOCREATE
01f910 0003              .dw     RAMPZV
                 ;***************************************************************
                 ; ,?0=    -- addr  Compile ?0= and make make place for a branch instruction
01f911 2c84
01f912 303f
01f913 003d              .db     NFA|4, ",?0=",0    ; Just for see to work !
                 COMMAZEROSENSE:
01f914 fd65              sbrc    FLAGS1, idup
01f915 c003              rjmp    COMMAZEROSENSE1
01f916 dde0              rcall   DOLIT
01f917 e62e              fdw     ZEROSENSE
01f918 c003              rjmp    COMMAZEROSENSE2
                 COMMAZEROSENSE1:
01f919 d004              rcall   IDPMINUS
01f91a dddc              rcall   DOLIT
01f91b e63a              fdw     DUPZEROSENSE
                 COMMAZEROSENSE2:
01f91c 7d6f              cbr     FLAGS1, (1<<idup)
01f91d c06d              rjmp    INLINE0
                 
                 IDPMINUS:
01f91e ddd8              rcall   DOLIT
01f91f fffc              .dw     -4
01f920 cfc6              rjmp    IALLOT
                 
                 ;       rjmp, ( rel-addr -- )
                 RJMPC:
01f921 d963              rcall   TWOSLASH
01f922 709f              andi    tosh, 0x0f
01f923 6c90              ori     tosh, 0xc0
01f924 ced4              rjmp    ICOMMA__
                 
                 
                 BRCCC:
01f925 ddd1              rcall   DOLIT
01f926 f008              .dw     0xf008      ; brcc pc+2
01f927 ced1              rjmp    ICOMMA__
                 ;BREQC:
                 ;        rcall   DOLIT
                 ;        .dw     0xf009      ; breq pc+2
                 ;        sbrc    FLAGS1, izeroeq
                 ;        ori     tosh, 4     ; brne pc+2
                 ;        jmp     ICOMMA
                 BRNEC:
01f928 ddce              rcall   DOLIT
01f929 f409              .dw     0xf409      ; brne pc+2
01f92a fd64              sbrc    FLAGS1, izeroeq
01f92b 7f9b              andi    tosh, ~4
01f92c cecc              rjmp    ICOMMA__
                 
                 ; IF       -- adrs   conditional forward branch
                 ; Leaves address of branch instruction 
                 ; and compiles the condition byte
01f92d f218              fdw     ZFL_L
                 IF_L:
01f92e 69d2
01f92f 0066              .db     NFA|IMMED|COMPILE|2,"if",0
                 IF_:
01f930 fd64              sbrc    FLAGS1, izeroeq
01f931 dfec              rcall   IDPMINUS
01f932 dfe1              rcall   COMMAZEROSENSE
01f933 dff4              rcall   BRNEC
01f934 7e6f              cbr     FLAGS1, (1<<izeroeq)
01f935 ddf8              rcall   IHERE
01f936 dd62              rcall   FALSE_
01f937 940d f921         jmp     RJMPC           ; Dummy, replaced by THEN with rjmp 
                 
                 ; ELSE     adrs1 -- adrs2    branch for IF..ELSE
                 ; Leave adrs2 of bra instruction and store bz in adrs1
                 ; Leave adress of branch instruction and FALSE flag on stack
01f939 f25c              fdw     IF_L
                 ELSE_L:
01f93a 65d4
01f93b 736c
01f93c 0065              .db     NFA|IMMED|COMPILE|4,"else",0
                 ELSE_:
01f93d ddf0              rcall   IHERE
01f93e dd5a              rcall   FALSE_
01f93f dfe1              rcall   RJMPC
01f940 dc51              rcall   SWOP_A      ; else-addr  if-addr 
01f941 940d f947         jmp     THEN_
                 
                 ; THEN     adrs  --        resolve forward branch
01f943 f274              fdw     ELSE_L
                 THEN_L:
01f944 74d4
01f945 6568
01f946 006e              .db     NFA|IMMED|COMPILE|4,"then",0
                 THEN_:
01f947 6062              sbr     FLAGS1, (1<<fTAILC)  ; Prevent tailjmp  optimisation
01f948 dde5              rcall   IHERE
01f949 d877              rcall   OVER
01f94a d8bb              rcall   MINUS
01f94b debf              rcall   TWOMINUS
01f94c d938              rcall   TWOSLASH
01f94d dda9              rcall   DOLIT
01f94e c000              .dw     0xc000      ;  back-addr mask 
01f94f d8f9              rcall   OR_
01f950 dc41              rcall   SWOP_A
01f951 940d fe93         jmp     STORE
                 
                 ; BEGIN    -- adrs        target for bwd. branch
01f953 f288              fdw     THEN_L
                 BEGIN_L:
01f954 62d5
01f955 6765
01f956 6e69              .db     NFA|IMMED|COMPILE|5,"begin"
                 BEGIN:
01f957 940d f72e         jmp     IHERE
                 
                 ; UNTIL    adrs --   Branch bakwards if true
01f959 f2a8              fdw     BEGIN_L
                 UNTIL_L:
01f95a 75d5
01f95b 746e
01f95c 6c69              .db     NFA|IMMED|COMPILE|5,"until"
                 UNTIL:
01f95d 6062              sbr     FLAGS1, (1<<fTAILC)  ; Prevent tailjmp  optimisation
01f95e fd64              sbrc    FLAGS1, izeroeq
01f95f dfbe              rcall   IDPMINUS
01f960 dfb3              rcall   COMMAZEROSENSE
01f961 dfc6              rcall   BRNEC
01f962 7e6f              cbr     FLAGS1, (1<<izeroeq)
01f963 940d f969         jmp     AGAIN_
                 
                                                 ; AGAIN    adrs --      uncond'l backward branch
                 ;   unconditional backward branch
01f965 f2b4              fdw     UNTIL_L
                 AGAIN_L:
01f966 61d5
01f967 6167
01f968 6e69              .db     NFA|IMMED|COMPILE|5,"again"
                 AGAIN_:
01f969 6062              sbr     FLAGS1, (1<<fTAILC)  ; Prevent tailjmp  optimisation
01f96a ddc3              rcall   IHERE
01f96b d89a              rcall   MINUS
01f96c de9e              rcall   TWOMINUS
01f96d 940d f921         jmp     RJMPC
                 
                 ; WHILE    addr1 -- addr2 addr1         branch for WHILE loop
                 ; addr1 : address of BEGIN
                 ; addr2 : address where to store bz instruction
01f96f f2cc              fdw     AGAIN_L
                 WHILE_L:
01f970 77d5
01f971 6968
01f972 656c              .db     NFA|IMMED|COMPILE|5,"while"
                 WHILE_:
01f973 dfbc              rcall   IF_
01f974 940d f1b7         jmp     SWOP
                 
                 ; REPEAT   addr2 addr1 --     resolve WHILE loop
01f976 f2e0              fdw     WHILE_L
                 REPEAT_L:
01f977 72d6
01f978 7065
01f979 6165
01f97a 0074              .db     NFA|IMMED|COMPILE|6,"repeat",0
                 REPEAT_:
01f97b dfed              rcall   AGAIN_
01f97c 940d f947         jmp     THEN_
                 
01f97e f2ee              fdw     REPEAT_L
                 INLINE_L:
01f97f 69d6
01f980 6c6e
01f981 6e69
01f982 0065              .db      NFA|IMMED|COMPILE|6,"inline",0
01f983 7e6f              cbr      FLAGS1, (1<<izeroeq)
01f984 7d6f              cbr      FLAGS1, (1<<idup)
01f985 dd8e              rcall    TICK
01f986 940d f98b         jmp      INLINE0
                 ; in, ( addr -- ) begin @+ dup $9508 <> while i, repeat 2drop ;
01f988 f2fe              fdw      INLINE_L
                 INLINEC_L:
01f989 6983
01f98a 2c6e              .db      NFA|3,"in,"
                 INLINE0:        
01f98b db1b              rcall   FETCHPP
01f98c dd74              rcall   DUP
01f98d dd69              rcall   DOLIT
01f98e 9508              .dw     0x9508
01f98f d911              rcall   NOTEQUAL
01f990 d986              rcall   ZEROSENSE
01f991 f011              breq    INLINE1
01f992 d5f5              rcall   ICOMMA
01f993 cff7              rjmp    INLINE0
                 INLINE1:
01f994 940d f0e6         jmp     TWODROP
                 
                 ; FOR   -- bc-addr bra-addr
01f996 f312              fdw     INLINEC_L
                 FOR_L:
01f997 66d3
01f998 726f              .db     NFA|IMMED|COMPILE|3,"for"
                 FOR:
01f999 940f f00e         call    DOCOMMAXT
01f99b e3a2              fdw     TOR
01f99c dd91              rcall   IHERE
01f99d dcfb              rcall   FALSE_
01f99e df82              rcall   RJMPC
01f99f dd8e              rcall   IHERE
01f9a0 940d f1b7         jmp     SWOP
                 
                 ; NEXT bra-addr bc-addr --
01f9a2 f32e              fdw     FOR_L
                 NEXT_L:
01f9a3 6ed4
01f9a4 7865
01f9a5 0074              .db     NFA|IMMED|COMPILE|4,"next", 0
                 NEXT:
01f9a6 dfa0              rcall   THEN_
01f9a7 940f f00e         call    DOCOMMAXT
01f9a9 f368              fdw     XNEXT
01f9aa df7a              rcall   BRCCC
                 
01f9ab dfbd              rcall   AGAIN_
                 
01f9ac dd4a              rcall   DOLIT
01f9ad f37c              fdw     XNEXT1
01f9ae 940d f98b         jmp     INLINE0
                 ; (next) decrement top of return stack
01f9b0 2887
01f9b1 656e
01f9b2 7478
01f9b3 2029              .db     NFA|7,"(next) "
                 XNEXT:  
01f9b4 91ff              m_pop_zh
01f9b5 91ff              pop     zh
01f9b6 91ef              pop     zl
01f9b7 91bf              pop     xh
01f9b8 91af              pop     xl
01f9b9 9711              sbiw    xl, 1
01f9ba 93af              push    xl
01f9bb 93bf              push    xh
01f9bc 9419              mijmp
01f9bd 9508              ret
                 XNEXT1:
01f9be 911f              pop     t1
01f9bf 910f              pop     t0
01f9c0 9508              ret
                 
                 ; leave clear top of return stack
01f9c1 f346              fdw     NEXT_L
                 LEAVE_L:
01f9c2 6595
01f9c3 646e
01f9c4 7469              .db     NFA|COMPILE|5,"endit"
                 LEAVE:
01f9c5 91ff              m_pop_zh
01f9c6 91ff              pop     zh
01f9c7 91ef              pop     zl
01f9c8 911f              pop     t1
01f9c9 910f              pop     t0
01f9ca 925f              push    r_zero
01f9cb 925f              push    r_zero
01f9cc 9419              mijmp
                 ;***************************************************
                 ; RDROP compile a pop
01f9cd f384              fdw      LEAVE_L
                 RDROP_L:
01f9ce 72d5
01f9cf 7264
01f9d0 706f              .db      NFA|IMMED|COMPILE|5,"rdrop"
                 RDROP:
01f9d1 dd25              rcall   DOLIT
01f9d2 f37c              fdw     XNEXT1
01f9d3 940d f98b         jmp     INLINE0
                 ;***************************************************
01f9d5 f39c              fdw     RDROP_L
                 STOD_L:
01f9d6 7383
01f9d7 643e              .db     NFA|3,"s>d"
                 STOD:
01f9d8 ff97              sbrs    tosh, 7
01f9d9 ccbf              rjmp    FALSE_
01f9da ccc7              rjmp    TRUE_
                 ;***************************************************
01f9db f3ac              fdw     STOD_L
                 DNEGATE_L:
01f9dc 6487
01f9dd 656e
01f9de 6167
01f9df 6574              .db     NFA|7,"dnegate"
                 DNEGATE:
01f9e0 d049              rcall   DINVERT
01f9e1 940f f120         call    ONE
01f9e3 940d f201         jmp     MPLUS
                 ;***************************************************
01f9e5 f3b8              fdw     DNEGATE_L
                 QDNEGATE_L:
01f9e6 3f88
01f9e7 6e64
01f9e8 6765
01f9e9 7461
01f9ea 0065              .db     NFA|8,"?dnegate",0
                 QDNEGATE:
01f9eb dd22              rcall   ZEROLESS
01f9ec d92a              rcall   ZEROSENSE
01f9ed f009              breq    QDNEGATE1
01f9ee dff1              rcall   DNEGATE
                 QDNEGATE1:
01f9ef 9508              ret
                 
                 ;***************************************************
01f9f0 f3cc              fdw     QDNEGATE_L
                 DABS_L:
01f9f1 6484
01f9f2 6261
01f9f3 0073              .db     NFA|4,"dabs",0
                 DABS:
01f9f4 dd0c              rcall   DUP
01f9f5 940d f9eb         jmp     QDNEGATE
                 ;***************************************************
01f9f7 f3e2              fdw     DABS_L
                 DPLUS_L:
01f9f8 6482
01f9f9 002b              .db     NFA|2,"d+",0
                 DPLUS:
01f9fa 91a9              ld      xl, Y+
01f9fb 91b9              ld      xh, Y+
01f9fc 91e9              ld      t6, Y+
01f9fd 91f9              ld      t7, Y+
01f9fe 9109              ld      t0, Y+
01f9ff 9119              ld      t1, Y+
01fa00 0fa0              add     xl, t0
01fa01 1fb1              adc     xh, t1
01fa02 1f8e              adc     tosl, t6
01fa03 1f9f              adc     tosh, t7
01fa04 93ba              st      -Y, xh
01fa05 93aa              st      -Y, xl
01fa06 9508              ret
                 
                 ;***************************************************
01fa07 f3f0              fdw     DPLUS_L
                 DMINUS_L:
01fa08 6482
01fa09 002d              .db     NFA|2,"d-",0
                 DMINUS:
01fa0a dfd5              rcall   DNEGATE
01fa0b 940d f9fa         jmp     DPLUS
                 ;***************************************************
01fa0d f410              fdw     DMINUS_L
                 DTWOSLASH_L:
01fa0e 6483
01fa0f 2f32              .db     NFA|3,"d2/"
01fa10 9109              ld      t0, y+
01fa11 9119              ld      t1, y+
01fa12 9595              asr     tosh
01fa13 9587              ror     tosl
01fa14 9517              ror     t1
01fa15 9507              ror     t0
01fa16 931a              st      -y, t1
01fa17 930a              st      -y, t0
01fa18 9508              ret
                 ;***************************************************
01fa19 f41c              fdw     DTWOSLASH_L
                 DTWOSTAR_L:
01fa1a 6483
01fa1b 2a32              .db     NFA|3,"d2*"
01fa1c 9109              ld      t0, y+
01fa1d 9119              ld      t1, y+
01fa1e 0f00              lsl     t0
01fa1f 1f11              rol     t1
01fa20 1f88              rol     tosl
01fa21 1f99              rol     tosh
01fa22 931a              st      -y, t1
01fa23 930a              st      -y, t0
01fa24 9508              ret
                 ;***************************************************
01fa25 f434              fdw     DTWOSTAR_L
                 DINVERT_L:
01fa26 6487
01fa27 6e69
01fa28 6576
01fa29 7472              .db     NFA|7,"dinvert"
                 DINVERT:
01fa2a 9109              ld      t0, y+
01fa2b 9119              ld      t1, y+
01fa2c 9500              com     t0
01fa2d 9510              com     t1
01fa2e 9580              com     tosl
01fa2f 9590              com     tosh
01fa30 931a              st      -y, t1
01fa31 930a              st      -y, t0
01fa32 9508              ret
                 ;***************************************************
01fa33 f44c              fdw     DINVERT_L
                 DZEROEQUAL_L:
01fa34 6483
01fa35 3d30              .db     NFA|3,"d0="
                 DZEROEQUAL:
01fa36 91a9              ld      xl, y+
01fa37 91b9              ld      xh, y+
01fa38 2b89              or      tosl, tosh
01fa39 2b8a              or      tosl, xl
01fa3a 2b8b              or      tosl, xh
01fa3b f451              brne    DZEROLESS_FALSE
                 DZEROEQUAL_TRUE:
01fa3c ef8f              ser     tosl
01fa3d ef9f              ser     tosh
01fa3e 9508              ret
                 
                 ;***************************************************
01fa3f f468              fdw     DZEROEQUAL_L
                 DZEROLESS_L:
01fa40 6483
01fa41 3c30              .db     NFA|3,"d0<"
                 DZEROLESS:
01fa42 91a9              ld      xl, y+
01fa43 91b9              ld      xh, y+
01fa44 3090              cpi     tosh, 0
01fa45 f3b2              brmi    DZEROEQUAL_TRUE
                 DZEROLESS_FALSE:
01fa46 2788              clr     tosl
01fa47 2799              clr     tosh
01fa48 9508              ret
                 ;***************************************************
01fa49 f480              fdw     DZEROLESS_L
                 DEQUAL_L:
01fa4a 6482
01fa4b 003d              .db     NFA|2,"d=",0
01fa4c dfbd              rcall   DMINUS
01fa4d 940d fa36         jmp     DZEROEQUAL
                 ;***************************************************
01fa4f f494              fdw     DEQUAL_L
                 DLESS_L:
01fa50 6482
01fa51 003c              .db     NFA|2,"d<",0
                 DLESS:
01fa52 dfb7              rcall   DMINUS
01fa53 940d fa42         jmp     DZEROLESS
                 ;***************************************************
01fa55 f4a0              fdw     DLESS_L
                 DGREATER_L:
01fa56 6482
01fa57 003e              .db     NFA|2,"d>",0
                 DGREATER:
01fa58 940f f0f4         call    TWOSWAP
01fa5a 940d fa52         jmp     DLESS
                 ;***************************************************
01fa5c f4ac              fdw     DGREATER_L
                 UDDOT_L:
01fa5d 7583
01fa5e 2e64              .db     NFA|3,"ud."
01fa5f d933              rcall   LESSNUM
01fa60 d94b              rcall   NUMS
01fa61 d953              rcall   NUMGREATER
01fa62 940f f167         call    TYPE
01fa64 940d f0fd         jmp     SPACE_
                 ;***************************************************
01fa66 f4ba              fdw     UDDOT_L
                 DDOT_L:
01fa67 6482
01fa68 002e              .db     NFA|2,"d.",0
01fa69 d929              rcall   LESSNUM
01fa6a 938f              push    tosl     ; dup >r
01fa6b 939f              push    tosh
01fa6c df87              rcall   DABS
01fa6d d93e              rcall   NUMS
01fa6e 940f f1dc         call    RFROM
01fa70 d94f              rcall   SIGN
01fa71 d943              rcall   NUMGREATER
01fa72 940f f167         call    TYPE
01fa74 940d f0fd         jmp     SPACE_
                 ;****************************************************
01fa76 f4ce              fdw      DDOT_L
                 MEMHI_L:
01fa77 6882
01fa78 0069              .db     NFA|2,"hi",0
                 MEMHI:
01fa79 dc7d              rcall   DOLIT
01fa7a f502              fdw     FLASHHI
01fa7b 940f f060         call    CSE_
01fa7d 940f f1f9         call    PLUS
01fa7f 940d fed0         jmp     FETCH
                 FLASHHI:
01fa81 dcff              .dw      FLASH_HI
01fa82 31ff              .dw      EEPROM_HI
01fa83 21ff              .dw      RAM_HI
                 
                 .if FLASHEND > 0x3fff
                 ;;; x@ ( addrl addru -- x )
01fa84 fd8e              fdw     A_FROM_L
                 XFETCH_L:
01fa85 7882
01fa86 0040              .db     NFA|2, "x@",0
                 .ifdef RAMPZ
01fa87 bf8b      	out_    RAMPZ, tosl
                 .endif
01fa88 9189
01fa89 9199      	poptos
01fa8a 01fc              movw    z, tosl
01fa8b 9187              lpm_    tosl, z+     ; Fetch from Flash directly
01fa8c 9197              lpm_    tosh, z+
                 .ifdef RAMPZ
01fa8d e003              ldi     t0, RAMPZV
01fa8e bf0b              out_    RAMPZ, t0
                 .endif
01fa8f 9508      	ret
                 	
                 ;;; x! ( x addrl addru -- )
01fa90 f50a              fdw     XFETCH_L
                 XSTORE_L:
01fa91 7882
01fa92 0021              .db     NFA|2, "x!",0
01fa93 2f08          	mov     t0, tosl
01fa94 940f f1b0         call    DROP
01fa96 d278              rcall   XUPDATEBUF
01fa97 c3e6              rjmp    ISTORE1
                 .endif
                 
                 ;***************************************************
                 
01fa98 f4ee              fdw      MEMHI_L
                 L_FETCH_P:
01fa99 40a2
01fa9a 0070              .db      NFA|INLINE|2,"@p", 0
                 FETCH_P:
01fa9b 939a
01fa9c 938a              pushtos
01fa9d 01ca              movw    tosl, pl
01fa9e 9508              ret
                 ;***************************************************
01fa9f f532              fdw     L_FETCH_P
                 L_PCFETCH:
01faa0 7083
01faa1 4063              .db     NFA|3,"pc@" ; ( -- c ) Fetch char from pointer
                 PCFETCH:
01faa2 939a
01faa3 938a              pushtos
01faa4 01ca              movw    tosl, pl
01faa5 940d feeb         jmp     CFETCH
                 ;***************************************************
01faa7 f540              fdw      L_PCFETCH
                 L_PTWOPLUS:
                 kernellink:
01faa8 70a3
01faa9 2b32              .db     NFA|INLINE|3,"p2+" ; ( n -- ) Add 2 to p
                 PTWOPLUS:
01faaa 0d47              add     pl, r_two
01faab 1d55              adc     ph, r_zero
01faac 9508              ret
                 
                 ;***************************************************
                 ; marker --- name
01faad 0000              .dw     0
                 L_MARKER:
                 lastword:
01faae 6d86
01faaf 7261
01fab0 656b
01fab1 0072              .db     NFA|6,"marker",0
                 MARKER:
01fab2 940f f045         call    ROM_
01fab4 dc96              rcall   CREATE
01fab5 dc41              rcall   DOLIT
01fab6 2200              .dw     dp_start
01fab7 940f f06a         call    HERE
01fab9 dbb7              rcall   TEN
01faba d9c9              rcall   CMOVE
01fabb dbb5              rcall   TEN
01fabc 940f f1a9         call    ALLOT
01fabe 940f f053         call    FRAM
01fac0 dcdc              rcall   XDOES
01fac1 940f effc         call    DODOES
01fac3 dd6e              rcall   INI
01fac4 dbac              rcall   TEN
01fac5 940d f484         jmp     CMOVE
                 
                 .if IDLE_MODE == 1
                 .if CPU_LOAD_LED == 1
                 ;;; Enable load led
01fac7 ddbe              fdw     BUSY_L
                 LOADON_L:
01fac8 6c85
01fac9 616f
01faca 2b64              .db     NFA|5,"load+"
01facb 6170              sbr     FLAGS2, (1<<fLOADled)
01facc 9508              ret
                 
                 ;;; Disable load led
01facd f590              fdw     LOADON_L
                 LOADOFF_L:
01face 6c85
01facf 616f
01fad0 2d64              .db     NFA|5,"load-"
01fad1 7e7f              cbr     FLAGS2, (1<<fLOADled)
                 .if CPU_LOAD_LED == 1
01fad2 9827              cbi_    CPU_LOAD_DDR, CPU_LOAD_BIT
                 .if CPU_LOAD_LED_POLARITY == 1
01fad3 982f              cbi_    CPU_LOAD_PORT, CPU_LOAD_BIT
                 .else
                 .endif
                 .endif
01fad4 9508              ret
                 .endif
                 ;;; 
                 .if CPU_LOAD == 1
                 .if CPU_LOAD_LED == 1
                 .else
                 .endif
                 .endif
                 .endif
                 
                 .ifdef UCSR1A
                 ;***************************************************
                 ; TX1   c --    output character to UART 1
01fad5 f9f6              fdw     RX0Q_L
                 TX1_L:
01fad6 7483
01fad7 3178              .db     NFA|3,"tx1"
                 TX1_:
01fad8 3181              cpi     tosl, XON
01fad9 f061              breq    XXON_TX1_TOS
01fada 3183              cpi     tosl, XOFF
01fadb f091              breq    XXOFF_TX1_TOS
                 TX1_LOOP:
01fadc d48a              rcall   PAUSE
01fadd 9100 00c8         in_     t0, UCSR1A
01fadf ff05              sbrs    t0, UDRE1
01fae0 cffb              rjmp    TX1_LOOP
01fae1 9380 00ce         out_    UDR1, tosl
01fae3 9189
01fae4 9199              poptos
01fae5 9508              ret
                 
                 XXON_TX1_TOS:
01fae6 9189
01fae7 9199              poptos
01fae8 c002              rjmp    XXON_TX1_1
                 XXON_TX1:
01fae9 ff71              sbrs    FLAGS2, ixoff_tx1
01faea 9508              ret
                 XXON_TX1_1:
01faeb 7f7d              cbr     FLAGS2, (1<<ixoff_tx1)
01faec e1f1              ldi     zh, XON
01faed c007              rjmp    TX1_SEND
                 
                 XXOFF_TX1_TOS:
01faee 9189
01faef 9199              poptos
01faf0 c002              rjmp    XXOFF_TX1_1
                 XXOFF_TX1:
01faf1 fd71              sbrc    FLAGS2, ixoff_tx1
01faf2 9508              ret     
                 XXOFF_TX1_1:
01faf3 6072              sbr     FLAGS2, (1<<ixoff_tx1)
01faf4 e1f3              ldi     zh, XOFF
                 TX1_SEND:
01faf5 91e0 00c8         in_     zl, UCSR1A
01faf7 ffe5              sbrs    zl, UDRE1
01faf8 cffc              rjmp    TX1_SEND
01faf9 93f0 00ce         out_    UDR1, zh
01fafb 9508              ret
                 ;***************************************************
                 ; RX1    -- c    get character from the serial line
01fafc f5ac              fdw     TX1_L
                 RX1_L:
01fafd 7283
01fafe 3178              .db     NFA|3,"rx1"
                 RX1_:
01faff d467              rcall   PAUSE
01fb00 d01e              rcall   RX1Q
01fb01 940f f317         call    ZEROSENSE
01fb03 f3d9              breq    RX1_
01fb04 939a
01fb05 938a              pushtos
01fb06 e9e8              ldi     zl, low(rbuf1)
01fb07 e0f3              ldi     zh, high(rbuf1)
01fb08 91a0 0396         lds     xl, rbuf1_rd
01fb0a 0fea              add     zl, xl
01fb0b 1df5              adc     zh, r_zero
01fb0c 8180              ld      tosl, z
01fb0d 2799              clr     tosh
01fb0e b70f              in_     t0, SREG
01fb0f 94f8              cli
01fb10 95a3              inc     xl
01fb11 71af              andi    xl, (RX1_BUF_SIZE-1)
01fb12 93a0 0396         sts     rbuf1_rd, xl
01fb14 91a0 0397         lds     xl, rbuf1_lv
01fb16 95aa              dec     xl
01fb17 93a0 0397         sts     rbuf1_lv, xl
01fb19 bf0f              out_    SREG, t0
01fb1a 9508              ret
                 ;***************************************************
                 ; RX1?  -- n    return the number of characters in queue
01fb1b f5fa              fdw     RX1_L
                 RX1Q_L:
01fb1c 7284
01fb1d 3178
01fb1e 003f              .db     NFA|4,"rx1?",0
                 RX1Q:
01fb1f 91a0 0397         lds     xl, rbuf1_lv
01fb21 11a5              cpse    xl, r_zero
01fb22 940d f6a2         jmp     TRUE_
                 .if U1FC_TYPE == 1
01fb24 dfc4              rcall   XXON_TX1
                 .endif
                 .if U1FC_TYPE == 2
                 .endif
01fb25 940d f699         jmp     FALSE_
                 
                 ;****************************************************
                 RX1_ISRR:
01fb27 e9e8              ldi     zl, low(rbuf1)
01fb28 e0f3              ldi     zh, high(rbuf1)
01fb29 91a0 0395         lds     xl, rbuf1_wr
01fb2b 0fea              add     zl, xl
01fb2c 1df5              adc     zh, r_zero
01fb2d 91b0 00ce         in_     xh, UDR1
                 .if OPERATOR_UART == 1
                 .if CTRL_O_WARM_RESET == 1
                 .endif
                 .endif
01fb2f 83b0              st      z, xh
01fb30 95a3              inc     xl
01fb31 71af              andi    xl, (RX1_BUF_SIZE-1)
01fb32 93a0 0395         sts     rbuf1_wr, xl
01fb34 91a0 0397         lds     xl, rbuf1_lv
01fb36 95a3              inc     xl
01fb37 93a0 0397         sts     rbuf1_lv, xl
01fb39 31ae              cpi     xl, RX1_BUF_SIZE-2
01fb3a f409              brne    PC+2
01fb3b d004              rcall   RX1_OVF
01fb3c 30a4              cpi     xl, RX0_OFF_FILL
01fb3d f00a              brmi    RX1_ISR_SKIP_XOFF
                 .if U1FC_TYPE == 1
01fb3e dfb4              rcall   XXOFF_TX1_1
                 .endif
                 .if U1FC_TYPE == 2
                 .endif
                 RX1_ISR_SKIP_XOFF:
01fb3f c131              rjmp    FF_ISR_EXIT
                 RX1_OVF:
01fb40 e7fc              ldi     zh, '|'
01fb41 cfb3              rjmp    TX1_SEND
                 TX1_ISR:
                 .endif
                 ;***************************************************
                 RQ_EMIT:
01fb42 fe00              sbrs    t2, PORF
01fb43 c003              rjmp    RQ_EXTR
01fb44 dbb2              rcall   DOLIT
01fb45 0050              .dw     'P'
01fb46 dbfd              rcall   EMIT_A
                 RQ_EXTR:
01fb47 fe01              sbrs    t2, EXTRF
01fb48 c003              rjmp    RQ_BORF
01fb49 dbad              rcall   DOLIT
01fb4a 0045              .dw     'E'
01fb4b dbf8              rcall   EMIT_A
                 RQ_BORF:
01fb4c fe02              sbrs    t2, BORF
01fb4d c003              rjmp    RQ_WDRF
01fb4e dba8              rcall   DOLIT
01fb4f 0042              .dw     'B'
01fb50 dbf3              rcall   EMIT_A
                 RQ_WDRF:
01fb51 fe03              sbrs    t2, WDRF
01fb52 c003              rjmp    RQ_DIVZERO
01fb53 dba3              rcall   DOLIT
01fb54 0057              .dw     'W'
01fb55 dbee              rcall   EMIT_A
                 RQ_DIVZERO:
01fb56 fe16              sbrs    t3, 6 ; T bit MATH error
01fb57 c003              rjmp    RQ_END
01fb58 db9e              rcall   DOLIT
01fb59 004d              .dw     'M'
01fb5a dbe9              rcall   EMIT_A
                 RQ_END: 
01fb5b 940d f0fd         jmp    SPACE_
                 
                 ;*****************************************************
                 .if IDLE_MODE == 1
                 IDLE_LOAD:
                 .if CPU_LOAD == 1       
                 .endif
                 .if CPU_LOAD_LED == 1
01fb5d ff74              sbrs    FLAGS2, fLOADled
01fb5e c002              rjmp    LOAD_LED_END
01fb5f 9a27              sbi_    CPU_LOAD_DDR, CPU_LOAD_BIT
                 .if CPU_LOAD_LED_POLARITY == 1
01fb60 982f              cbi_    CPU_LOAD_PORT, CPU_LOAD_BIT
                 .else
                 .endif
                 LOAD_LED_END:
                 .endif
01fb61 ff76              sbrs    FLAGS2, fIDLE
01fb62 c007              rjmp    IDLE_LOAD1
01fb63 ee06              ldi     t0, low(up0)
01fb64 1620              cp      upl, t0
01fb65 f421              brne    IDLE_LOAD1
                 .ifdef SMCR
01fb66 e001              ldi     t0, (1<<SE)
01fb67 bf03              out_    SMCR, t0
                 .else
                 .endif
                 .if CPU_LOAD == 1
                 .endif
01fb68 9588              sleep               ; IDLE mode
                 .ifdef SMCR
01fb69 be53              out_    SMCR, r_zero
                 .else
                 .endif
                 IDLE_LOAD1:
                 .if CPU_LOAD_LED == 1
01fb6a fd74              sbrc    FLAGS2, fLOADled
                 .if CPU_LOAD_LED_POLARITY == 1
01fb6b 9a2f              sbi_    CPU_LOAD_PORT, CPU_LOAD_BIT
                 .else
                 .endif
                 .endif
01fb6c 9508              ret
                 .endif
                 end_of_dict:
                 
                 ;FF_DP code:
                 dpcode:
                 ;****************************************************
                 ;        org h'f00000'
                 ;        de  h'ff', h'ff'
                 ;        de  dp_user_dictionary&0xff, (dp_user_dictionary>>8)&0xff
                 ;        de  dpeeprom&0xff, (dpeeprom>>8)&0xff
                 ;        de  (dpdata)&0xff, ((dpdata)>>8)&0xff
                 ;        de  lastword_lo, lastword_hi
                 ;        de  DOTSTATUS;&0xff;, (DOTSTATUS>>8)&0xff
                 
                 ; .end
                 ;********************************************************** 
                 .cseg
                 .org BOOT_START
01fc00 940d fda4 RESET_:     jmp  WARM_
                 .org BOOT_START + 0x02
01fc02 d079                  rcall FF_ISR
                 .org BOOT_START + 0x04
01fc04 d077                  rcall FF_ISR
                 .org BOOT_START + 0x06
01fc06 d075                  rcall FF_ISR
                 .org BOOT_START + 0x08
                 .if MS_TIMER_ADDR == 0x08
                 .else
01fc08 d073                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x0a
01fc0a d071                  rcall FF_ISR
                 .org BOOT_START + 0x0c
01fc0c d06f                  rcall FF_ISR
                 .org BOOT_START + 0x0e
                 .if MS_TIMER_ADDR == 0x0e
                 .else
01fc0e d06d                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x10
01fc10 d06b                  rcall FF_ISR
                 .org BOOT_START + 0x12
                 .if MS_TIMER_ADDR == 0x12
                 .else
01fc12 d069                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x14
                 .if MS_TIMER_ADDR == 0x14
                 .else
01fc14 d067                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x16
                 .if MS_TIMER_ADDR == 0x16
                 .else
01fc16 d065                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x18
                 .if MS_TIMER_ADDR == 0x18
                 .else
01fc18 d063                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x1a
                 .if MS_TIMER_ADDR == 0x1a
                 .else
01fc1a d061                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x1c
                 .if MS_TIMER_ADDR == 0x1c
                 .else
01fc1c d05f                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x1e
                 .if MS_TIMER_ADDR == 0x1e
                 .else
01fc1e d05d                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x20
                 .if MS_TIMER_ADDR == 0x20
                 .else
01fc20 d05b                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x22
                 .if MS_TIMER_ADDR == 0x22
                 .else
01fc22 d059                  rcall FF_ISR
                 .endif
                 .org BOOT_START + 0x24
01fc24 d057                  rcall FF_ISR
                 .if 0x26 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x26
01fc26 d055                  rcall FF_ISR
                 .endif
                 .if 0x28 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x28
01fc28 d053                  rcall FF_ISR
                 .endif
                 .if 0x2a < INT_VECTORS_SIZE
                 .org BOOT_START + 0x2a
                 .if MS_TIMER_ADDR == 0x2a
01fc2a c063                  rjmp  MS_TIMER_ISR
                 .else
                 .endif
                 .endif
                 .if 0x2c < INT_VECTORS_SIZE
                 .org BOOT_START + 0x2c
01fc2c d04f                  rcall FF_ISR
                 .endif
                 .if 0x2e < INT_VECTORS_SIZE
                 .org BOOT_START + 0x2e
01fc2e d04d                  rcall FF_ISR
                 .endif
                 .if 0x30 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x30
01fc30 d04b                  rcall FF_ISR
                 .endif
                 .if 0x32 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x32
01fc32 d049                  rcall FF_ISR
                 .endif
                 .if 0x34 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x34
01fc34 d047                  rcall FF_ISR
                 .endif
                 .if 0x36 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x36
01fc36 d045                  rcall FF_ISR
                 .endif
                 .if 0x38 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x38
01fc38 d043                  rcall FF_ISR
                 .endif
                 .if 0x3a < INT_VECTORS_SIZE
                 .org BOOT_START + 0x3a
01fc3a d041                  rcall FF_ISR
                 .endif
                 .if 0x3c < INT_VECTORS_SIZE
                 .org BOOT_START + 0x3c
01fc3c d03f                  rcall FF_ISR
                 .endif
                 .if 0x3e < INT_VECTORS_SIZE
                 .org BOOT_START + 0x3e
01fc3e d03d                  rcall FF_ISR
                 .endif
                 .if 0x40 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x40
01fc40 d03b                  rcall FF_ISR
                 .endif
                 .if 0x42 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x42
01fc42 d039                  rcall FF_ISR
                 .endif
                 .if 0x44 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x44
01fc44 d037                  rcall FF_ISR
                 .endif
                 .if 0x46 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x46
01fc46 d035                  rcall FF_ISR
                 .endif
                 .if 0x48 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x48
01fc48 d033                  rcall FF_ISR
                 .endif
                 .if 0x4a < INT_VECTORS_SIZE
                 .org BOOT_START + 0x4a
01fc4a d031                  rcall FF_ISR
                 .endif
                 .if 0x4c < INT_VECTORS_SIZE
                 .org BOOT_START + 0x4c
01fc4c d02f                  rcall FF_ISR
                 .endif
                 .if 0x4e < INT_VECTORS_SIZE
                 .org BOOT_START + 0x4e
01fc4e d02d                  rcall FF_ISR
                 .endif
                 .if 0x50 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x50
01fc50 d02b                  rcall FF_ISR
                 .endif
                 .if 0x52 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x52
01fc52 d029                  rcall FF_ISR
                 .endif
                 .if 0x54 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x54
01fc54 d027                  rcall FF_ISR
                 .endif
                 .if 0x56 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x56
01fc56 d025                  rcall FF_ISR
                 .endif
                 .if 0x58 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x58
01fc58 d023                  rcall FF_ISR
                 .endif
                 .if 0x5a < INT_VECTORS_SIZE
                 .org BOOT_START + 0x5a
01fc5a d021                  rcall FF_ISR
                 .endif
                 .if 0x5c < INT_VECTORS_SIZE
                 .org BOOT_START + 0x5c
01fc5c d01f                  rcall FF_ISR
                 .endif
                 .if 0x5e < INT_VECTORS_SIZE
                 .org BOOT_START + 0x5e
01fc5e d01d                  rcall FF_ISR
                 .endif
                 .if 0x60 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x60
01fc60 d01b                  rcall FF_ISR
                 .endif
                 .if 0x62 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x62
01fc62 d019                  rcall FF_ISR
                 .endif
                 .if 0x64 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x64
01fc64 d017                  rcall FF_ISR
                 .endif
                 .if 0x66 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x66
01fc66 d015                  rcall FF_ISR
                 .endif
                 .if 0x68 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x68
01fc68 d013                  rcall FF_ISR
                 .endif
                 .if 0x6a < INT_VECTORS_SIZE
                 .org BOOT_START + 0x6a
01fc6a d011                  rcall FF_ISR
                 .endif
                 .if 0x6c < INT_VECTORS_SIZE
                 .org BOOT_START + 0x6c
01fc6c d00f                  rcall FF_ISR
                 .endif
                 .if 0x6e < INT_VECTORS_SIZE
                 .org BOOT_START + 0x6e
01fc6e d00d                  rcall FF_ISR
                 .endif
                 .if 0x70 < INT_VECTORS_SIZE
                 .org BOOT_START + 0x70
01fc70 d00b                  rcall FF_ISR
                 .endif
                 
                 .org BOOT_START + INT_VECTORS_SIZE - 1
                 FF_ISR_EXIT:
01fc71 919f              pop     tosh
01fc72 918f              pop     tosl
01fc73 911f              pop     t1
01fc74 910f              pop     t0
01fc75 91ff              pop     zh
01fc76 91ef              pop     zl
                 MS_TIMER_ISR_EXIT:
01fc77 91a9              ld      xl, y+
01fc78 91b9              ld      xh, y+
01fc79 bfbf              out_    SREG, xh
01fc7a 91b9              ld      xh, y+
01fc7b 9518              reti
                         
                 FF_ISR:
                 .if IDLE_MODE == 1
                 .if CPU_LOAD == 1
                 .endif
                 .endif
01fc7c 93ba              st      -y, xh
01fc7d b7bf              in_     xh, SREG
01fc7e 93ba              st      -y, xh
01fc7f 93aa              st      -y, xl
01fc80 91bf              m_pop_xh
01fc81 91bf              pop     xh
01fc82 91af              pop     xl
01fc83 93ef              push    zl
01fc84 93ff              push    zh
01fc85 930f              push    t0
01fc86 931f              push    t1
01fc87 938f              push    tosl
01fc88 939f              push    tosh
                 .if low(ivec) == 0x80
                 .else
01fc89 50a1              subi    xl, 1
                 .endif
01fc8a e0b3              ldi     xh, high(ivec)
01fc8b 91ed              ld      zl, x+
01fc8c 91fd              ld      zh, x+
01fc8d 9419              mijmp   ;(z)
                 
                 ;;; *************************************************
                 MS_TIMER_ISR:
                 .if IDLE_MODE == 1
                 .if CPU_LOAD == 1
                 .endif
                 .endif
01fc8e 93ba              st      -y, xh
01fc8f b7bf              in_     xh, SREG
01fc90 93ba              st      -y, xh
01fc91 93aa              st      -y, xl
01fc92 0ce6              add     ms_count,  r_one
01fc93 1cf5              adc     ms_count1, r_zero
                 .if CPU_LOAD == 1
                 .endif
01fc94 cfe2              rjmp    MS_TIMER_ISR_EXIT
                 ;;; ***************************************************
                 RX0_ISR:
01fc95 e7e5              ldi     zl, low(rbuf0)
01fc96 e0f3              ldi     zh, high(rbuf0)
01fc97 91a0 0372         lds     xl, rbuf0_wr
01fc99 0fea              add     zl, xl
01fc9a 1df5              adc     zh, r_zero
01fc9b 91b0 00c6         in_     xh, UDR0_
                 .if OPERATOR_UART == 0
                 .if CTRL_O_WARM_RESET == 1
01fc9d 30bf              cpi     xh, 0xf
01fc9e f409              brne    pc+2
01fc9f cf60              rjmp    RESET_
                 .endif
                 .endif
01fca0 83b0              st      z, xh
01fca1 95a3              inc     xl
01fca2 71af              andi    xl, (RX0_BUF_SIZE-1)
01fca3 93a0 0372         sts     rbuf0_wr, xl
01fca5 91a0 0374         lds     xl, rbuf0_lv
01fca7 95a3              inc     xl
01fca8 93a0 0374         sts     rbuf0_lv, xl
01fcaa 31ae              cpi     xl, RX0_BUF_SIZE-2
01fcab f409              brne    PC+2
01fcac d004              rcall   RX0_OVF
01fcad 30a4              cpi     xl, RX0_OFF_FILL
01fcae f00a              brmi    RX0_ISR_SKIP_XOFF
                 .if U0FC_TYPE == 1
01fcaf d022              rcall   XXOFF_TX0_1
                 .endif
                 .if U0FC_TYPE == 2
                 .endif
                 RX0_ISR_SKIP_XOFF:
01fcb0 cfc0              rjmp    FF_ISR_EXIT
                 RX0_OVF:
01fcb1 e7fc              ldi     zh, '|'
01fcb2 c021              rjmp    TX0_SEND
                 TX0_ISR:
                 
                 .ifdef UCSR1A
01fcb3 ce73      RX1_ISR: rjmp   RX1_ISRR
                 .endif
                 ;***************************************************
                 ; TX0   c --    output character to UART 0
                 .if IDLE_MODE == 1
                 .if CPU_LOAD == 1
                 .else
                 .if CPU_LOAD_LED == 1
01fcb4 f59c              fdw(LOADOFF_L)
                 .else
                 .endif
                 .endif
                 .else
                 .endif
                 TX0_L:
01fcb5 7483
01fcb6 3078              .db     NFA|3,"tx0"
                 TX0_:
                 .if U0FC_TYPE == 1
01fcb7 3181              cpi     tosl, XON
01fcb8 f061              breq    XXON_TX0_TOS
01fcb9 3183              cpi     tosl, XOFF
01fcba f091              breq    XXOFF_TX0_TOS
                 .endif
                 TX0_LOOP:
01fcbb d2ab              rcall   PAUSE
01fcbc 9100 00c0         in_     t0, UCSR0A
01fcbe ff05              sbrs    t0, 5        ; UDRE0, UDRE USART Data Register Empty
01fcbf cffb              rjmp    TX0_LOOP
01fcc0 9380 00c6         out_    UDR0_, tosl
01fcc2 9189
01fcc3 9199              poptos
01fcc4 9508              ret
                 
                 .if U0FC_TYPE == 1
                 XXON_TX0_TOS:
01fcc5 9189
01fcc6 9199              poptos
01fcc7 c002              rjmp    XXON_TX0_1
                 XXON_TX0:
01fcc8 ff70              sbrs    FLAGS2, ixoff_tx0
01fcc9 9508              ret
                 XXON_TX0_1:
01fcca 7f7e              cbr     FLAGS2, (1<<ixoff_tx0)
01fccb e1f1              ldi     zh, XON
01fccc c007              rjmp    TX0_SEND
                 
                 XXOFF_TX0_TOS:
01fccd 9189
01fcce 9199              poptos
01fccf c002              rjmp    XXOFF_TX0_1
                 XXOFF_TX0:
01fcd0 fd70              sbrc    FLAGS2, ixoff_tx0
01fcd1 9508              ret     
                 XXOFF_TX0_1:
01fcd2 6071              sbr     FLAGS2, (1<<ixoff_tx0)
01fcd3 e1f3              ldi     zh, XOFF
                 .endif
                 TX0_SEND:
01fcd4 91e0 00c0         in_     zl, UCSR0A
01fcd6 ffe5              sbrs    zl, 5        ; UDRE0, UDRE USART Data Register Empty
01fcd7 cffc              rjmp    TX0_SEND
01fcd8 93f0 00c6         out_    UDR0_, zh
01fcda 9508              ret
                 ;***************************************************
                 ; RX0    -- c    get character from the UART 0 buffer
01fcdb f96a              fdw(TX0_L)
                 RX0_L:
01fcdc 7283
01fcdd 3078              .db     NFA|3,"rx0"
                 RX0_:
01fcde d288              rcall   PAUSE
01fcdf d01e              rcall   RX0Q
01fce0 940f f317         call    ZEROSENSE
01fce2 f3d9              breq    RX0_
01fce3 939a
01fce4 938a              pushtos
01fce5 e7e5              ldi     zl, low(rbuf0)
01fce6 e0f3              ldi     zh, high(rbuf0)
01fce7 91a0 0373         lds     xl, rbuf0_rd
01fce9 0fea              add     zl, xl
01fcea 1df5              adc     zh, r_zero
01fceb 8180              ld      tosl, z
01fcec 2799              clr     tosh
01fced b70f              in_     t0, SREG
01fcee 94f8              cli
01fcef 95a3              inc     xl
01fcf0 71af              andi    xl, (RX0_BUF_SIZE-1)
01fcf1 93a0 0373         sts     rbuf0_rd, xl
01fcf3 91a0 0374         lds     xl, rbuf0_lv
01fcf5 95aa              dec     xl
01fcf6 93a0 0374         sts     rbuf0_lv, xl
01fcf8 bf0f              out_    SREG, t0
01fcf9 9508              ret
                 ;***************************************************
                 ; RX0?  -- n    return the number of characters in queue
01fcfa f9b8              fdw     RX0_L
                 RX0Q_L:
01fcfb 7284
01fcfc 3078
01fcfd 003f              .db     NFA|4,"rx0?",0
                 RX0Q:
01fcfe 91a0 0374         lds     xl, rbuf0_lv
01fd00 11a5              cpse    xl, r_zero
01fd01 940d f6a2         jmp     TRUE_
                 .if U0FC_TYPE == 1
01fd03 dfc4              rcall   XXON_TX0
                 .endif
                 .if U0FC_TYPE == 2
                 .endif
01fd04 940d f699         jmp     FALSE_
                 
                 
                 ;*************************************************************
                  ISTORERR:
01fd06 db9f              rcall   DOTS
01fd07 940f f174         call    XSQUOTE
01fd09 4103
01fd0a 3f44              .db     3,"AD?"
01fd0b 940f f167         call    TYPE
01fd0d c9c2              rjmp    ABORT
                         
                 ; Coded for max 256 byte pagesize !
                 ;if (ibaselo != (iaddrlo&(~(PAGESIZEB-1))))(ibaseh != iaddrh)(ibaseu != iaddru)
                 ;   if (idirty)
                 ;       writebuffer_to_imem
                 ;   endif
                 ;   fillbuffer_from_imem
                 ;   ibaselo = iaddrlo&(~(PAGESIZEB-1))
                 ;   ibasehi = iaddrhi
                 ;endif
                 IUPDATEBUF:
                 	sub_pflash_tos
                 .ifdef  RAMPZ
01fd0e e003      	ldi     t0, RAMPZV
                 .endif
                 XUPDATEBUF:
01fd0f 9380 03c4         sts     iaddrl, tosl
01fd11 9390 03c5         sts     iaddrh, tosh
                 .ifdef RAMPZ
01fd13 9300 03c6         sts     iaddru, t0
01fd15 3003      	cpi     t0, RAMPZV
01fd16 f411      	brne    XUPDATEBUF2
                 .endif
01fd17 3d9d              cpi     tosh, high(FLASH_HI-PFLASH+1) ; Dont allow kernel writes
01fd18 f768              brcc    ISTORERR
                 XUPDATEBUF2:	
01fd19 9100 03c4         lds     t0, iaddrl
01fd1b 7000              andi    t0, ~(PAGESIZEB-1)
01fd1c 110a              cpse    t0, ibasel
01fd1d c00b              rjmp    IFILL_BUFFER
01fd1e 9100 03c5         lds     t0, iaddrh
01fd20 110b              cpse    t0, ibaseh
01fd21 c007              rjmp    IFILL_BUFFER
                 .ifdef RAMPZ
01fd22 9100 03c6         lds     t0, iaddru
01fd24 9110 03c7         lds     t1, ibaseu
01fd26 1301              cpse    t0, t1
01fd27 c001              rjmp    IFILL_BUFFER
                 .endif
01fd28 9508              ret
                 
                 IFILL_BUFFER:
01fd29 d060              rcall   IFLUSH
01fd2a 9100 03c4         lds     t0, iaddrl
01fd2c 7000              andi    t0, ~(PAGESIZEB-1)
01fd2d 2ea0              mov     ibasel, t0
01fd2e 90b0 03c5         lds     ibaseh, iaddrh
                 .ifdef RAMPZ
01fd30 9100 03c6 	lds     t0, iaddru
01fd32 9300 03c7 	sts     ibaseu, t0
01fd34 bf0b      	out_    RAMPZ, t0
                 .endif
                 IFILL_BUFFER_1:
01fd35 e000              ldi     t0, PAGESIZEB&0xff ; 0x100 max PAGESIZEB
01fd36 01f5              movw    zl, ibasel
01fd37 e0a0              ldi     xl, low(ibuf)
01fd38 e0b2              ldi     xh, high(ibuf)
                 IFILL_BUFFER_2:
01fd39 9117              lpm_    t1, z+
01fd3a 931d              st      x+, t1
01fd3b 950a              dec     t0
01fd3c f7e1              brne    IFILL_BUFFER_2
                 .ifdef RAMPZ
01fd3d e003              ldi     t0, RAMPZV
01fd3e bf0b              out_    RAMPZ, t0
                 .endif
01fd3f 9508              ret
                 
                 IWRITE_BUFFER:
                 .if OPERATOR_UART == 0
                 .if U0FC_TYPE == 1
01fd40 d9b6              rcall   DOLIT
01fd41 0013              .dw     XOFF
01fd42 940f ef9e         call    EMIT
                 .endif
                 .if U0FC_TYPE == 2
                 .endif
                 .else  ;; UART1
                 .if U1FC_TYPE == 1
                 .endif
                 .if U1FC_TYPE == 2
                 .endif
                 .endif
01fd44 d9b2              rcall   DOLIT
01fd45 000a              .dw     10
01fd46 dafd              rcall   MS
                         ; Disable interrupts
01fd47 94f8              cli
01fd48 01f5              movw    zl, ibasel
                 .ifdef RAMPZ
01fd49 9100 03c7 	lds     t0, ibaseu
01fd4b bf0b      	out_    RAMPZ, t0
                 .endif
01fd4c e013              ldi     t1, (1<<PGERS) | (1<<SPMEN) ; Page erase
01fd4d d031              rcall   DO_SPM
01fd4e e111              ldi     t1, (1<<RWWSRE) | (1<<SPMEN); re-enable the RWW section
01fd4f d02f              rcall   DO_SPM
                 
                         ; transfer data from RAM to Flash page buffer
01fd50 e000              ldi     t0, low(PAGESIZEB);init loop variable
01fd51 e0a0              ldi     xl, low(ibuf)
01fd52 e0b2              ldi     xh, high(ibuf)
01fd53 920f              push    r0
01fd54 921f              push    r1
                 IWRITE_BUFFER1:
01fd55 900d              ld      r0, x+
01fd56 901d              ld      r1, x+
01fd57 e011              ldi     t1, (1<<SPMEN)
01fd58 d026              rcall   DO_SPM
01fd59 9632              adiw    zl, 2
01fd5a 5002              subi    t0, 2
01fd5b f7c9              brne    IWRITE_BUFFER1
                 
                         ; execute page write
01fd5c 50e0              subi    zl, low(PAGESIZEB) ;restore pointer
01fd5d 40f1              sbci    zh, high(PAGESIZEB)
01fd5e e015              ldi     t1, (1<<PGWRT) | (1<<SPMEN)
01fd5f d01f              rcall   DO_SPM
                         ; re-enable the RWW section
01fd60 d018              rcall   IWRITE_BUFFER3
                 
                         ; read back and check, optional
01fd61 e000              ldi     t0, low(PAGESIZEB);init loop variable
01fd62 50a0              subi    xl, low(PAGESIZEB) ;restore pointer
01fd63 40b1              sbci    xh, high(PAGESIZEB)
                 IWRITE_BUFFER2:
01fd64 9007              lpm_    r0, z+
01fd65 901d              ld      r1, x+
01fd66 1001              cpse    r0, r1
01fd67 c03c              rjmp    WARM_     ; reset
01fd68 5001              subi    t0, 1
01fd69 f7d1              brne    IWRITE_BUFFER2
01fd6a 901f              pop     r1
01fd6b 900f              pop     r0
01fd6c ef0f      	ser     t0
01fd6d 2eb0      	mov     ibaseh, t0
                 .ifdef RAMPZ
01fd6e 9300 03c7 	sts     ibaseu, t0
                 .endif
                 .ifdef RAMPZ
01fd70 e003              ldi     t0, RAMPZV
01fd71 bf0b              out_    RAMPZ, t0
                 .endif
01fd72 7f6e              cbr     FLAGS1, (1<<idirty)
                         // reenable interrupts
01fd73 9478              sei
                 .if OPERATOR_UART == 0
                 .if U0FC_TYPE == 1
01fd74 d982              rcall   DOLIT
01fd75 0011              .dw     XON
01fd76 940f ef9e         call    EMIT
                 .endif
                 .if U0FC_TYPE == 2
                 .endif
                 .else
                 .if U1FC_TYPE == 1
                 .endif
                 .if U1FC_TYPE == 2
                 .endif
                 .endif
                 .if DEBUG_FLASH == 1
                 .endif
01fd78 9508               ret
                         ; ret to RWW section
                         ; verify that RWW section is safe to read
                 IWRITE_BUFFER3:
01fd79 b687              in_     t8, SPMCSR
01fd7a fe86              sbrs    t8, RWWSB ; If RWWSB is set, the RWW section is not ready yet
01fd7b 9508              ret
                         ; re-enable the RWW section
01fd7c e111              ldi     t1, (1<<RWWSRE) | (1<<SPMEN)
01fd7d d001              rcall   DO_SPM
01fd7e cffa              rjmp    IWRITE_BUFFER3
                 
                 DO_SPM:
01fd7f b687              in_     t8, SPMCSR
01fd80 fc80              sbrc    t8, SPMEN
01fd81 cffd              rjmp    DO_SPM       ; Wait for previous write to complete
01fd82 bf17              out_    SPMCSR, t1
01fd83 95e8              spm
01fd84 9508              ret
                 ; WD+ ( n -- )  n < 8 start watchdog timer
                 .if (FLASHEND < 0x1ffff)
                 .ifdef MCUSR
                 .else
                 .endif
                 .endif
01fd85 dd7c              fdw     CWD_L
                 IFLUSH_L:
01fd86 6986
01fd87 6c66
01fd88 7375
01fd89 0068              .db     NFA|6,"iflush",0
                 IFLUSH:
01fd8a fd60              sbrc    FLAGS1, idirty
01fd8b cfb4              rjmp    IWRITE_BUFFER
01fd8c 9508              ret
                 
                 ;***************************************************
                 .ifdef UCSR1A
01fd8d f638              fdw     RX1Q_L
                 .else
                 .endif
                 EMPTY_L:
01fd8e 6585
01fd8f 706d
01fd90 7974              .db     NFA|5,"empty"
                 EMPTY:
01fd91 d965              rcall   DOLIT
01fd92 ffd4              fdw     COLDLIT
01fd93 d963              rcall   DOLIT
01fd94 2200              .dw     dp_start
01fd95 d961              rcall   DOLIT
01fd96 000c              .dw     coldlitsize
01fd97 940f f484         call    CMOVE
01fd99 940d f675         jmp     DP_TO_RAM
                 
                 ; Init constant registers
                 INIT_012:
01fd9b 2455              clr     r_zero
01fd9c e0e1              ldi     zl, 1
01fd9d e0f2              ldi     zh, 2
01fd9e 013f              movw    r_one, zl
01fd9f 9508              ret
                 ;*******************************************************
01fda0 fb1c              fdw     EMPTY_L
                 WARM_L:
01fda1 7784
01fda2 7261
01fda3 006d              .db     NFA|4,"warm",0
                 WARM_:
                 ; Zero memory
01fda4 94f8              cli           ; Disable interrupts
01fda5 27aa              clr     xl
01fda6 27bb              clr     xh
01fda7 e1c9              ldi     yl, 25
01fda8 e0d0              ldi     yh, 0
                 WARM_1:
01fda9 93dd              st      x+, yh
01fdaa 50c1              subi    yl, 1
01fdab f7e9              brne    WARM_1
                 
01fdac b61f              in_     t3, SREG
                 .ifdef MCUCSR
                 .endif
                 .ifdef MCUSR
01fdad b604              in_     t2, MCUSR
01fdae 9250 0034         sts     MCUSR, r_zero
                 .endif
01fdb0 e1ac              ldi     xl, 0x1C  ; clear ram from y register upwards
                 WARM_2:
01fdb1 925d              st      x+, r_zero
01fdb2 31b0              cpi     xh, 0x10  ; up to 0xfff, 4 Kbytes 
01fdb3 f7e9              brne    WARM_2
                 
                 ; Init empty flash buffer
01fdb4 94ba      	    dec     ibaseh
                 .ifdef RAMPZ
01fdb5 92b0 03c7 	sts     ibaseu, ibaseh
                 .endif
                 
                 ; Init Stack pointer
01fdb7 e8c4              ldi     yl, low(utibbuf-4)
01fdb8 e0d4              ldi     yh, high(utibbuf-4)
                 
                 ; Init Return stack pointer
01fdb9 e207              ldi     t0, low(usbuf-1)
01fdba e014              ldi     t1, high(usbuf-1)
01fdbb bf0d              out     spl, t0
01fdbc bf1e              out     sph, t1
                 
01fdbd dfdd              rcall   INIT_012
01fdbe 940f eeb3         call    WDOFF
                 
                 ; Init user pointer
01fdc0 ee06              ldi     t0, low(up0)
01fdc1 e013              ldi     t1, high(up0)
01fdc2 0118              movw    upl, t0
                 ; Set RAMPZ for correct flash addressing
                 .ifdef RAMPZ
01fdc3 e003              ldi     t0, RAMPZV
01fdc4 bf0b              out_    RAMPZ, t0
                 .endif
                 .ifdef EIND
01fdc5 be6c              out_    EIND, r_one
                 .endif
                 ; init warm literals
01fdc6 d930              rcall   DOLIT
01fdc7 dd00              fdw     WARMLIT
01fdc8 d92e              rcall   DOLIT
01fdc9 03c8              .dw     cse
01fdca d92c              rcall   DOLIT
01fdcb 001c              .dw     warmlitsize
01fdcc 940f f484         call    CMOVE
                 ; init cold data to eeprom
01fdce d928              rcall   DOLIT
01fdcf 2200              .dw     dp_start
01fdd0 d0ff              rcall   FETCH
01fdd1 d8d0              rcall   TRUE_
01fdd2 940f f2a6         call    EQUAL
01fdd4 940f f317         call    ZEROSENSE
01fdd6 f009              breq    WARM_3  
01fdd7 dfb9              rcall   EMPTY
                 WARM_3:
                 ; Move interrupts to boot flash section
01fdd8 be65              out_    MCUCR, r_one   ; (1<<IVCE)
01fdd9 be75              out_    MCUCR, r_two   ; (1<<IVSEL)
                 ; Start watchdog timer
                 .if MS_TIMER == 0
                 .ifdef TIMSK0
01fdda bc74              out_    TCCR0A, r_two  ; CTC
01fddb e003              ldi     t0, ms_pre_tmr0
01fddc bd05              out_    TCCR0B, t0
01fddd ef09              ldi     t0, ms_value_tmr0
01fdde bd07              out_    OCR0A, t0
01fddf 9270 006e         out_    TIMSK0, r_two ; (1<<OCIE0A)
                 .endif
                 .ifdef TIMSK
                 .endif
                 .endif
                 .if MS_TIMER == 1
                 .ifdef TIMSK
                 .endif
                 .ifdef TIMSK1
                 .endif
                 .endif
                 .if MS_TIMER == 2
                 .ifdef TIMSK2
                 .endif
                 .ifdef TIMSK
                 .endif
                 .endif
                 
                 ; Init UART 0
                 .ifdef UBRR0L
01fde1 d915              rcall   DOLIT
01fde2 fc95              .dw     RX0_ISR
01fde3 d913              rcall   DOLIT
                 .ifdef URXC0addr
01fde4 0332              .dw     URXC0addr+ivec
                 .else
                 .endif
01fde5 d0ad              rcall   STORE
                 ;;;     Set baud rate
                 ;        out_    UBRR0H, r_zero
01fde6 e607              ldi     t0, ubrr0val
01fde7 9300 00c4         out_    UBRR0L, t0
                         ; Enable receiver and transmitter, rx1 interrupts
01fde9 e908              ldi     t0, (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0)
01fdea 9300 00c1         out_    UCSR0B,t0
                         ; Set frame format: 8data, 1stop bit
01fdec e006              ldi     t0, (3<<UCSZ00)|URSEL_
01fded 9300 00c2         out_    UCSR0C,t0
                 .if U0FC_TYPE == 1
01fdef 6071              sbr     FLAGS2, (1<<ixoff_tx0)
                 .endif
                 .if U0FC_TYPE == 2
                 .endif
                 .endif
                 ; Init UART 1
                 .ifdef UBRR1L
01fdf0 d906              rcall   DOLIT
01fdf1 fcb3              .dw     RX1_ISR
01fdf2 d904              rcall   DOLIT
01fdf3 0348              .dw     URXC1addr+ivec
01fdf4 d09e              rcall   STORE
                         ; Set baud rate
                 ;        out_    UBRR1H, r_zero
01fdf5 e109              ldi     t0, ubrr1val
01fdf6 9300 00cc         out_    UBRR1L, t0
                         ; Enable receiver and transmitter, rx1 interrupts
01fdf8 e908              ldi     t0, (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1)
01fdf9 9300 00c9         out_    UCSR1B,t0
                         ; Set frame format: 8data, 1stop bit
01fdfb e006              ldi     t0, (3<<UCSZ10)
01fdfc 9300 00ca         out_    UCSR1C,t0
                 .if U1FC_TYPE == 1
01fdfe 6072              sbr     FLAGS2, (1<<ixoff_tx1)
                 .endif
                 .if U1FC_TYPE == 2
                 .endif
                 .endif
01fdff d875              rcall   DP_TO_RAM
01fe00 9478              sei
                 
01fe01 dd40              rcall   RQ_EMIT
01fe02 d023              rcall   VER
                 ; Turnkey ?
01fe03 d15c              rcall   TURNKEY
01fe04 940f f317         call    ZEROSENSE
01fe06 f0d1              breq    STARTQ2
01fe07 940f f174         call    XSQUOTE
01fe09 4503
01fe0a 4353              .db     3,"ESC"
01fe0b 940f f167         call    TYPE
01fe0d d8e9              rcall   DOLIT
01fe0e 07d0              .dw     TURNKEY_DELAY
01fe0f da34              rcall   MS
01fe10 940f efab         call    KEYQ
01fe12 940f f317         call    ZEROSENSE
01fe14 f049              breq    STARTQ1
01fe15 940f efa4         call    KEY
01fe17 d8df              rcall   DOLIT
01fe18 001b              .dw     0x1b
01fe19 940f f2a6         call    EQUAL
01fe1b 940f f317         call    ZEROSENSE
01fe1d f419              brne    STARTQ2
                 STARTQ1:
01fe1e d141              rcall   TURNKEY
01fe1f 940f efb3         call    EXECUTE
                 STARTQ2:
01fe21 940d f6d0         jmp     ABORT
                 
                 .equ partlen = strlen(partstring)
                 .equ datelen = strlen(DATE)
                 
01fe23 fb42              fdw     WARM_L
                 VER_L:
01fe24 7683
01fe25 7265              .db     NFA|3,"ver"
                 VER:
01fe26 940f f174         call    XSQUOTE
                          ;      1234567890123456789012345678901234567890
                         ;.db 34,"FlashForth Atmega 5.0 ",DATE,0xd,0xa,0
01fe28 4624
01fe29 616c
01fe2a 6873
01fe2b 6f46
01fe2c 7472
01fe2d 2068
01fe2e 2035
01fe2f 5441
01fe30 656d
01fe31 6167
01fe32 3532
01fe33 3036
01fe34 3220
01fe35 2e32
01fe36 3330
01fe37 322e
01fe38 3130
01fe39 0d37
avr/src/ff-atmega.asm(5545): warning: .cseg .db misalignment - padding zero byte
01fe3a 000a              .db     partlen+datelen+16,"FlashForth 5 ",partstring," ", DATE,0xd,0xa
01fe3b 940d f167         jmp     TYPE
                 
                 ; ei  ( -- )    Enable interrupts
01fe3d fc48              fdw     VER_L
                 EI_L:
01fe3e 65a2
01fe3f 0069              .db     NFA|INLINE|2,"ei",0
01fe40 9478              sei
01fe41 9508              ret
                         
                 ; di  ( -- )    Disable interrupts
01fe42 fc7c              fdw     EI_L
                 DI_L:
01fe43 64a2
01fe44 0069              .db     NFA|INLINE|2,"di",0
01fe45 94f8              cli
01fe46 9508              ret
                 ;*******************************************************
                 ; ;i  ( -- )    End definition of user interrupt routine
01fe47 fc86              fdw     DI_L
                 IRQ_SEMI_L:
01fe48 3bc2
01fe49 0069              .db     NFA|IMMED|2,";i",0
                 IRQ_SEMI:
01fe4a d8ac              rcall   DOLIT
                 .ifdef EIND
01fe4b 940d              .dw     0x940D     ; jmp
                 .else
                 .endif
01fe4c d13b              rcall   ICOMMA
01fe4d d8a9              rcall   DOLIT
01fe4e fc71              .dw     FF_ISR_EXIT
01fe4f d138              rcall   ICOMMA
01fe50 940d f7b9         jmp     LEFTBRACKET
                 
                 
                 ; int!  ( addr n  --  )   store to interrupt vector number
01fe52 fc90              fdw     IRQ_SEMI_L
                 IRQ_V_L:
01fe53 6984
01fe54 746e
01fe55 0021              .db     NFA|4,"int!",0
                 IRQ_V:
01fe56 01fc              movw    zl, tosl
01fe57 9731              sbiw    zl, 1
01fe58 0fee              lsl     zl
                 .if low(ivec) == 0x80
                 .endif
01fe59 e0f3              ldi     zh, high(ivec)
01fe5a 9189
01fe5b 9199              poptos
01fe5c da9e              rcall   TO_XA
01fe5d 940d fe98         jmp     STORE_RAM_2
                 
                 ; DOLITERAL  x --           compile DOLITeral x as native code
01fe5f fca6              fdw     IRQ_V_L
                 LITERAL_L:
01fe60 6cc7
01fe61 7469
01fe62 7265
01fe63 6c61              .db     NFA|IMMED|7,"literal"
                 LITERAL:
01fe64 d892              rcall   DOLIT
01fe65 ee02              fdw     DUP
01fe66 db24              rcall   INLINE0
01fe67 9380 03b8         sts     litbuf0, tosl
01fe69 9390 03b9         sts     litbuf1, tosh
01fe6b 6860              sbr     FLAGS1, (1<<fLIT)
01fe6c 940f f701         call    DUP
01fe6e 2f98              mov     tosh, tosl
01fe6f 9592              swap    tosh
01fe70 709f              andi    tosh, 0xf
01fe71 708f              andi    tosl, 0xf
01fe72 6e90              ori     tosh, 0xe0
01fe73 6880              ori     tosl, 0x80
01fe74 d113              rcall   ICOMMA
01fe75 2f89              mov     tosl, tosh
01fe76 9592              swap    tosh
01fe77 709f              andi    tosh, 0xf
01fe78 708f              andi    tosl, 0xf
01fe79 6e90              ori     tosh, 0xe0
01fe7a 6980              ori     tosl, 0x90
01fe7b 940d ff88         jmp     ICOMMA
                 
                 #if 0
                 #endif
                 
                 ;*****************************************************************
                 ISTORE:
01fe7d de90              rcall   IUPDATEBUF
                 ISTORE1:
01fe7e 9189
01fe7f 9199              poptos
01fe80 e0a0              ldi     xl, low(ibuf)
01fe81 e0b2              ldi     xh, high(ibuf)
01fe82 9100 03c4         lds     t0, iaddrl
01fe84 7f0f              andi    t0, (PAGESIZEB-1)
01fe85 0fa0              add     xl, t0
01fe86 938d              st      x+, tosl
01fe87 939d              st      x+, tosh
01fe88 c077              rjmp    ICSTORE_POP
                 
01fe89 fcc0              fdw     LITERAL_L
                 TO_A_L:
01fe8a 3e82
01fe8b 0061              .db     NFA|2, ">a",0
                 TO_A:
01fe8c 2f28              mov     al, tosl
01fe8d 2f39              mov     ah, tosh
01fe8e 9189
01fe8f 9199              poptos
01fe90 9508              ret
                 
01fe91 fd14              fdw     TO_A_L
                 STORE_L:
01fe92 2181              .db     NFA|1, "!"
                 STORE:
01fe93 3292              cpi     tosh, high(PEEPROM)
01fe94 f440              brcc    STORE1
                 STORE_RAM:
01fe95 01fc              movw    zl, tosl
01fe96 9189
01fe97 9199              poptos
                 STORE_RAM_2:
01fe98 8391              std     Z+1, tosh
01fe99 8380              std     Z+0, tosl
01fe9a 9189
01fe9b 9199              poptos
01fe9c 9508              ret
                 STORE1:
01fe9d d009              rcall   LOCKEDQ
01fe9e 3392              cpi     tosh, high(OFLASH)
01fe9f f6e8              brcc    ISTORE
                 ESTORE:
01fea0 940f f0ed         call    TWODUP
01fea2 d06e              rcall   ECSTORE
01fea3 9601              adiw    tosl, 1
01fea4 8109              ldd     t0, Y+1
01fea5 8308              std     y+0, t0
01fea6 c06a              rjmp    ECSTORE
                 
                 LOCKEDQ:
01fea7 ff62              sbrs    FLAGS1, fLOCK
01fea8 9508              ret
01fea9 d9fc              rcall   DOTS
01feaa 940f f174         call    XSQUOTE
01feac 4103
01fead 3f44              .db     3,"AD?"
01feae 940f f167         call    TYPE
01feb0 cf70              rjmp    STARTQ2        ; goto    ABORT
                         
                 ;***********************************************************
                 IFETCH:
01feb1 01fc              movw    z, tosl
                         sub_pflash_z
                 .ifdef RAMPZ
01feb2 9100 03c7 	lds     t0, ibaseu
01feb4 3003      	cpi     t0, RAMPZV
01feb5 f469      	brne    IIFETCH
                 .endif
01feb6 11fb              cpse    zh, ibaseh
01feb7 c00b              rjmp    IIFETCH
01feb8 2f0e              mov     t0, zl
01feb9 7000              andi    t0, ~(PAGESIZEB-1)
01feba 150a              cp      t0, ibasel
01febb f439              brne    IIFETCH
01febc e0a0              ldi     xl, low(ibuf)
01febd e0b2              ldi     xh, high(ibuf)
01febe 7fef              andi    zl, (PAGESIZEB-1)
01febf 0fae              add     xl, zl
01fec0 918d              ld      tosl, x+
01fec1 919d              ld      tosh, x+
01fec2 9508              ret
                 IIFETCH:
01fec3 9187              lpm_    tosl, z+     ; Fetch from Flash directly
01fec4 9197              lpm_    tosh, z+
01fec5 9508              ret
                                 
01fec6 fd24              fdw     STORE_L
                 A_FROM_L:
01fec7 6182
01fec8 003e              .db     NFA|2, "a>",0
                 A_FROM:
01fec9 939a
01feca 938a              pushtos
01fecb 2f82              mov     tosl, al
01fecc 2f93              mov     tosh, ah
01fecd 9508              ret
                 
                 .if FLASHEND > 0x3fff
01fece f522              fdw     XSTORE_L
                 .else
                 .endif
                 FETCH_L:
01fecf 4081              .db     NFA|1, "@"
                 FETCH:
01fed0 3292              cpi     tosh, high(PEEPROM)
01fed1 f420              brcc    FETCH1
                 FETCH_RAM:
01fed2 01fc              movw    zl, tosl
                 FETCH_RAM_2:
01fed3 9181              ld      tosl, z+
01fed4 9191              ld      tosh, z+
01fed5 9508              ret
                 FETCH1:
01fed6 3392              cpi     tosh, high(OFLASH)
01fed7 f6c8              brcc    IFETCH
                 EFETCH:
01fed8 99f9              sbic    eecr, eewe
01fed9 cffe              rjmp    EFETCH
01feda 5292              subi    tosh, high(PEEPROM)
01fedb bd81              out     eearl, tosl
01fedc bd92              out     eearh, tosh
01fedd 9af8              sbi     eecr, eere
01fede b500              in      t0, eedr
01fedf 9583              inc     tosl
01fee0 bd81              out     eearl, tosl
01fee1 9af8              sbi     eecr, eere
01fee2 b590              in      tosh, eedr
01fee3 2f80              mov     tosl, t0
01fee4 9508              ret
                 
                 ICFETCH:
01fee5 dfcb              rcall   IFETCH
01fee6 2799              clr     tosh
01fee7 9508              ret
                 
01fee8 fd9e              fdw     FETCH_L
                 CFETCH_L:
01fee9 6382
01feea 0040              .db     NFA|2, "c@",0
                 CFETCH:
01feeb 3292              cpi     tosh, high(PEEPROM)
01feec f420              brcc    CFETCH1
                 CFETCH_RAM:
01feed 01fc              movw    zl, tosl
01feee 9181              ld      tosl, z+
01feef 2799              clr     tosh
01fef0 9508              ret
                 CFETCH1:
01fef1 3392              cpi     tosh, high(OFLASH)
01fef2 f790              brcc    ICFETCH
                 ECFETCH:
01fef3 dfe4              rcall   EFETCH
01fef4 2799              clr     tosh
01fef5 9508              ret
                 
                 ICSTORE:
01fef6 de17              rcall   IUPDATEBUF
01fef7 9189
01fef8 9199              poptos
01fef9 e0a0              ldi     xl, low(ibuf)
01fefa e0b2              ldi     xh, high(ibuf)
01fefb 9100 03c4         lds     t0, iaddrl
01fefd 7f0f              andi    t0, (PAGESIZEB-1)
01fefe 0fa0              add     xl, t0
01feff 938d              st      x+, tosl
                 ICSTORE_POP:
01ff00 6061              sbr     FLAGS1, (1<<idirty)
01ff01 c009              rjmp    CSTORE_POP
                 
01ff02 fdd2              fdw     CFETCH_L
                 CSTORE_L:
01ff03 6382
01ff04 0021              .db     NFA|2, "c!",0
                 CSTORE:
01ff05 3292              cpi     tosh, high(PEEPROM)
01ff06 f438              brcc    CSTORE1
                 CSTORE_RAM:
01ff07 01fc              movw zl, tosl
01ff08 9189
01ff09 9199              poptos
01ff0a 8380              st      Z, tosl
                 CSTORE_POP:
01ff0b 9189
01ff0c 9199              poptos
01ff0d 9508              ret
                 CSTORE1:
01ff0e df98              rcall   LOCKEDQ
01ff0f 3392              cpi     tosh, high(OFLASH)
01ff10 f728              brcc    ICSTORE
                 ECSTORE:
01ff11 99f9              sbic    eecr, eewe
01ff12 cffe              rjmp    ECSTORE
01ff13 5292              subi    tosh, high(PEEPROM)
01ff14 bd81              out     eearl, tosl
01ff15 bd92              out     eearh, tosh
01ff16 9189
01ff17 9199              poptos
01ff18 bd80              out     eedr, tosl
01ff19 9afa              sbi     eecr, eemwe
01ff1a 9af9              sbi     eecr, eewe
01ff1b cfef              rjmp    CSTORE_POP
                 
                 ;;; Disable writes to flash and eeprom
01ff1c fe06              fdw     CSTORE_L
                 
                 FLOCK_L:
01ff1d 6683
01ff1e 2d6c              .db     NFA|3,"fl-"
01ff1f 6064              sbr     FLAGS1, (1<<fLOCK)
01ff20 9508              ret
                 
                 ;;; Enable writes to flash and eeprom
01ff21 fe3a              fdw     FLOCK_L
                 FUNLOCK_L:
01ff22 6683
01ff23 2b6c              .db     NFA|3,"fl+"
01ff24 7f6b              cbr     FLAGS1, (1<<fLOCK)
01ff25 9508              ret
                 
                 
                 
01ff26 fe44              fdw     FUNLOCK_L
                 VALUE_L:
01ff27 7685
01ff28 6c61
01ff29 6575              .db     NFA|5,"value"
                 VALUE:
01ff2a d820              rcall   CREATE
01ff2b 940f f06f         call    COMMA
01ff2d d86f              rcall   XDOES
                 VALUE_DOES:
01ff2e 940f effc         call    DODOES
01ff30 940d fed0         jmp     FETCH
                 
01ff32 fe4e              fdw     VALUE_L
                 DEFER_L:
01ff33 6485
01ff34 6665
01ff35 7265              .db     NFA|5,"defer"
                 DEFER:
01ff36 d814              rcall   CREATE
01ff37 940f f6f7         call    DOLIT
01ff39 eda0              fdw     ABORT
01ff3a 940f f06f         call    COMMA
01ff3c d860              rcall   XDOES
                 DEFER_DOES:
01ff3d 940f effc         call    DODOES
01ff3f 940d efbd         jmp     FEXECUTE
                 
01ff41 fe66              fdw     DEFER_L
                 IS_L:
01ff42 69c2
01ff43 0073              .db     NFA|IMMED|2,"is",0
                 IS:
01ff44 940f f714         call    TICK
01ff46 940f f274         call    TWOPLUS
01ff48 940f f274         call    TWOPLUS
01ff4a df85              rcall   FETCH
01ff4b d8cb              rcall   STATE_
01ff4c 940f f317         call    ZEROSENSE
01ff4e f029              breq    IS1
01ff4f df14              rcall   LITERAL
01ff50 940f f00e         call    DOCOMMAXT
01ff52 fd26              fdw     STORE
01ff53 c001              rjmp    IS2
                 IS1:
01ff54 df3e              rcall   STORE
                 IS2:
01ff55 9508              ret
                 
01ff56 fe84              fdw     IS_L
                 TO_L:
01ff57 74c2
01ff58 006f              .db     NFA|IMMED|2,"to",0
                 TO:
01ff59 940d ff44         jmp     IS
                 
01ff5b feae              fdw     TO_L
                 TURNKEY_L:
01ff5c 7487
01ff5d 7275
01ff5e 6b6e
01ff5f 7965              .db     NFA|7,"turnkey"
                 TURNKEY:
01ff60 940f ff2e         call    VALUE_DOES      ; Must be call for IS to work.
01ff62 03ba              .dw     dpSTART
                 
                 
                 ;;; *******************************************************
                 ; PAUSE  --     switch task
01ff63 feb8              fdw     TURNKEY_L
                 PAUSE_L:
01ff64 7085
01ff65 7561
01ff66 6573              .db     NFA|5,"pause"
                 PAUSE:
                 .if IDLE_MODE == 1
01ff67 dbf5              rcall   IDLE_LOAD
                 .endif
01ff68 b71f              in_     t1, SREG
01ff69 94f8              cli
01ff6a 95a8              wdr               ; watchdog reset
01ff6b 93df              push    yh        ; SP
01ff6c 93cf              push    yl
01ff6d 939f              push    tosh      ; TOS
01ff6e 938f              push    tosl
01ff6f 935f              push    ph        ; P
01ff70 934f              push    pl
01ff71 01f1              movw    zl, upl
01ff72 b70e              in      t0, sph
01ff73 9302              st      -z, t0
01ff74 b70d              in      t0, spl
01ff75 9302              st      -z, t0
01ff76 91b2              ld      xh, -z     ; UP
01ff77 91a2              ld      xl, -z
01ff78 011d              movw    upl, xl
01ff79 910e              ld      t0, -x
01ff7a bf0e              out     sph, t0
01ff7b 910e              ld      t0, -x
01ff7c bf0d              out     spl, t0
01ff7d 914f              pop     pl
01ff7e 915f              pop     ph
01ff7f 918f              pop     tosl
01ff80 919f              pop     tosh
01ff81 91cf              pop     yl
01ff82 91df              pop     yh
01ff83 bf1f              out_    SREG, t1
01ff84 9508              ret
                 
                 
01ff85 dd96              fdw     OPERATOR_L
                 ICOMMA_L:
01ff86 6982
01ff87 002c              .db     NFA|2, "i,",0
                 ICOMMA:
01ff88 940f f72e         call    IHERE
01ff8a df08              rcall   STORE
01ff8b 940f f080         call    CELL
01ff8d 940d f8e7         jmp     IALLOT
                 
                 
                 ;   IHERE ! 1 CHARS IALLOT ;
01ff8f ff0c              fdw     ICOMMA_L
                 ICCOMMA_L:
01ff90 6983
01ff91 2c63              .db     NFA|3,"ic,"
                 ICCOMMA:
01ff92 940f f72e         call    IHERE
01ff94 df70              rcall   CSTORE
01ff95 940f f120         call    ONE
01ff97 940d f8e7         jmp     IALLOT
                 
                 L_DOTBASE:
01ff99 2081              .db      NFA|1," "
                 DOTBASE:
01ff9a 940f f42a         call    BASE
01ff9c df33              rcall   FETCH
01ff9d 3180              cpi     tosl, 0x10
01ff9e f411              brne    DOTBASE1
01ff9f e284              ldi     tosl,'$'
01ffa0 c009              rjmp    DOTBASEEND
                 DOTBASE1:
01ffa1 308a              cpi     tosl, 0xa
01ffa2 f411              brne    DOTBASE2
01ffa3 e283              ldi     tosl, '#'
01ffa4 c005              rjmp    DOTBASEEND
                 DOTBASE2:
01ffa5 3082              cpi     tosl, 0x2
01ffa6 f411              brne    DOTBASE3
01ffa7 e285              ldi     tosl, '%'
01ffa8 c001              rjmp    DOTBASEEND
                 DOTBASE3:
01ffa9 e38f              ldi     tosl, '?'
                 DOTBASEEND:
01ffaa 9508              ret
                 
                 MEMQADDR_N:
01ffab e084              fdw     ROM_N
01ffac e092              fdw     EROM_N
01ffad e0a2              fdw     FRAM_N
                 ;*******************************************************
                 umstar0:
01ffae 920f              push t2
01ffaf 921f              push t3
01ffb0 9109              ld  t0, Y+
01ffb1 9119              ld  t1, Y+
01ffb2 9f80              mul tosl,t0
01ffb3 01d0              movw t4, r0 ; r0=t2, r1=t3
01ffb4 27ee              clr t6
01ffb5 27ff              clr t7
01ffb6 9f90              mul tosh, t0
01ffb7 0db0              add t5, r0
01ffb8 1de1              adc t6, r1
01ffb9 1df5              adc t7, r_zero
01ffba 9f81              mul tosl, t1
01ffbb 0db0              add t5, r0
01ffbc 1de1              adc t6, r1
01ffbd 1df5              adc t7, r_zero
01ffbe 9f91              mul tosh, t1
01ffbf 0de0              add t6, r0
01ffc0 1df1              adc t7, r1
01ffc1 93ba              st -Y, t5
01ffc2 93aa              st -Y, t4
01ffc3 01cf              movw tosl, t6
01ffc4 901f              pop t3
01ffc5 900f              pop t2
01ffc6 9508              ret
                 ;***********************************************************
                 ; unsigned 32/16 -> 16/16 division
                 umslashmod0:
01ffc7 94e8              clt
01ffc8 2388              tst  tosl
01ffc9 f429              brne umslashmodstart
01ffca 2399              tst  tosh
01ffcb f419              brne umslashmodstart
01ffcc 9468              set  ; Set T flag
01ffcd 940d fda4         jmp  WARM_
                 umslashmodstart:
01ffcf 01dc              movw t4, tosl
                 
01ffd0 9019              ld t3, Y+
01ffd1 91e9              ld t6, Y+
                 
01ffd2 9189              ld tosl, Y+
01ffd3 9199              ld tosh, Y+
                 
                 ; unsigned 32/16 -> 16/16 division
                         ; set loop counter
01ffd4 e100              ldi t0,$10 ;6
                 
                 umslashmod1:
                         ; shift left, saving high bit
01ffd5 27ff              clr t7
01ffd6 0f88              lsl tosl
01ffd7 1f99              rol tosh
01ffd8 1c11              rol t3
01ffd9 1fee              rol t6
01ffda 1fff              rol t7
                 
                         ; try subtracting divisor
01ffdb 161a              cp  t3, t4
01ffdc 07eb              cpc t6, t5
01ffdd 05f5              cpc t7,r_zero
                 
01ffde f018              brcs umslashmod2
                 
                         ; dividend is large enough
                         ; do the subtraction for real
                         ; and set lowest bit
01ffdf 9583              inc tosl
01ffe0 1a1a              sub t3, t4
01ffe1 0beb              sbc t6, t5
                 
                 umslashmod2:
01ffe2 950a              dec  t0
01ffe3 f789              brne umslashmod1 ;16=17=272
                 
                 umslashmod3:
                         ; put remainder on stack
01ffe4 93ea              st -Y,t6
01ffe5 921a              st -Y,t3
                         ; Quotient is already in tos ; 6 + 272 + 4 =282 cycles
01ffe6 9508              ret
                 BASEQV:
01ffe7 e7ea              fdw     DECIMAL
01ffe8 e7f8              fdw     HEX
01ffe9 e808              fdw     BIN
                 
                 
                 ;;; *************************************
                 ;;; EMPTY dictionary data
                 ; *******************************************************************
                 .equ coldlitsize=12
                 COLDLIT:
01ffea 0000      STARTV: .dw      0
01ffeb 3200      DPC:    .dw      OFLASH
01ffec 220c      DPE:    .dw      ehere
01ffed 04e2      DPD:    .dw      dpdata
01ffee f55c      LW:     fdw      lastword
01ffef ecb8      STAT:   fdw      DOTSTATUS
                 ;*******************************************************************
                 ; BOOT sector END **************************************************
                 
                 KERNEL_END:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega2560 register use summary:
r0 :  20 r1 :  23 r2 :   5 r3 :   1 r4 :   0 r5 :  24 r6 :   8 r7 :   5 
r8 :   4 r9 :   4 r10:   5 r11:   6 r12:   0 r13:   0 r14:   2 r15:   2 
r16: 169 r17:  57 r18:   7 r19:   2 r20:  14 r21:   7 r22:  35 r23:  17 
r24: 257 r25: 189 r26:  75 r27:  43 r28:   5 r29:   5 r30:  82 r31:  70 
x  :  16 y  : 181 z  :  37 
Registers used: 32 out of 35 (91.4%)

ATmega2560 instruction use summary:
.lds  :   0 .sts  :   0 adc   :  20 add   :  20 adiw  :  14 and   :   4 
andi  :  26 asr   :   2 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :  21 brcs  :   1 break :   0 breq  :  51 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   2 brmi  :   6 
brne  :  37 brpl  :   3 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   5 bst   :   0 call  :  95 cbi   :   3 cbr   :  20 
clc   :   0 clh   :   0 cli   :   9 cln   :   0 clr   :  19 cls   :   0 
clt   :   1 clv   :   0 clz   :   1 com   :  11 cp    :   3 cpc   :   2 
cpi   :  37 cpse  :   7 dec   :   5 eicall:   0 eijmp :  15 elpm  :   9 
eor   :   2 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  16 inc   :   8 jmp   : 163 ld    : 126 ldd   :   3 ldi   :  78 
lds   :  33 lpm   :   0 lsl   :  11 lsr   :   1 mov   :  25 movw  :  40 
mul   :   4 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   6 
ori   :  19 out   :  34 pop   : 108 push  :  37 rcall : 993 ret   : 136 
reti  :   1 rjmp  : 120 rol   :  14 ror   :  21 sbc   :   8 sbci  :   3 
sbi   :   6 sbic  :   2 sbis  :   0 sbiw  :  14 sbr   :  17 sbrc  :  13 
sbrs  :  21 sec   :   0 seh   :   0 sei   :   5 sen   :   0 ser   :   5 
ses   :   0 set   :   1 sev   :   0 sez   :   1 sleep :   1 spm   :   2 
st    :  85 std   :   3 sts   :  37 sub   :   2 subi  :  10 swap  :   3 
tst   :   2 wdr   :   4 
Instructions used: 76 out of 116 (65.5%)

ATmega2560 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x02fd00 0x03ffe0   6042   2516   8558  262144   3.3%
[.dseg] 0x000200 0x0004e4      0    740    740    8192   9.0%
[.eseg] 0x000000 0x000002      0      2      2    4096   0.0%

Assembly complete, 0 errors, 8 warnings
